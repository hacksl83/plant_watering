
5110_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  00003a2c  00003ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a2c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  0080026e  0080026e  00003c4e  2**0
                  ALLOC
  3 .eeprom       000001c3  00810000  00810000  00003c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003e11  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e44  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000358  00000000  00000000  00003e88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000064aa  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000135d  00000000  00000000  0000a68a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003142  00000000  00000000  0000b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a24  00000000  00000000  0000eb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f60  00000000  00000000  0000f550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003431  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000280  00000000  00000000  000138e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__ctors_end>
       4:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__vector_1>
       8:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
       c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      10:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      14:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      18:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      1c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      20:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      24:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      28:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      2c:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__vector_11>
      30:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      34:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      38:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      3c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      40:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      44:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      48:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      4c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      50:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      54:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      58:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      5c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      60:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      64:	0c 94 3a 04 	jmp	0x874	; 0x874 <__bad_interrupt>
      68:	a4 0b       	sbc	r26, r20
      6a:	47 0c       	add	r4, r7
      6c:	e1 0c       	add	r14, r1
      6e:	87 0d       	add	r24, r7
      70:	2f 0e       	add	r2, r31
      72:	ca 0e       	add	r12, r26
      74:	70 0f       	add	r23, r16

00000076 <__trampolines_end>:
      76:	07 8a       	std	Z+23, r0	; 0x17
      78:	00 6d       	ori	r16, 0xD0	; 208
      7a:	61 69       	ori	r22, 0x91	; 145
      7c:	6e 20       	and	r6, r14
      7e:	6d 65       	ori	r22, 0x5D	; 93
      80:	6e 75       	andi	r22, 0x5E	; 94
	...

0000008a <main_menu_items>:
      8a:	00 74 69 6d 65 00 00 00 00 00 00 00 00 00 00 00     .time...........
      9a:	00 00 b6 09 01 73 65 74 20 74 69 6d 65 00 00 00     .....set time...
      aa:	00 00 00 00 00 00 67 0b 02 70 75 6d 70 31 00 00     ......g..pump1..
	...
      c2:	56 02 60 05 03 70 75 6d 70 32 00 00 00 00 00 00     V.`..pump2......
      d2:	00 00 00 00 b6 01 60 05 04 70 75 6d 70 33 00 00     ......`..pump3..
	...
      ea:	16 01 60 05 05 4c 43 44 20 63 6f 6e 74 72 61 73     ..`..LCD contras
      fa:	74 00 00 00 00 00 31 06 06 61 62 6f 75 74 00 00     t.....1..about..
	...
     112:	00 00 ce 05                                         ....

00000116 <pump3_menu>:
     116:	07 2a 01 70 75 6d 70 33 20 6d 65 6e 75 00 00 00     .*.pump3 menu...
     126:	00 00 34 01                                         ..4.

0000012a <pump3_menu_items>:
     12a:	00 73 65 74 20 74 69 6d 65 00 00 00 00 00 00 00     .set time.......
     13a:	00 00 18 0a 01 73 65 74 20 64 61 79 00 00 00 00     .....set day....
     14a:	00 00 00 00 00 00 2a 08 02 73 65 74 20 76 6f 6c     ......*..set vol
	...
     162:	00 00 9a 06 03 70 75 6d 70 20 63 61 6c 69 62 00     .....pump calib.
     172:	00 00 00 00 00 00 f7 06 04 74 69 6d 65 72 20 6f     .........timer o
     182:	6e 2f 6f 66 66 00 00 00 00 00 1e 09 05 6d 6f 69     n/off........moi
     192:	73 74 20 73 65 6e 73 6f 72 00 00 00 f6 02 60 05     st sensor.....`.
     1a2:	07 62 61 63 6b 00 00 00 00 00 00 00 00 00 00 00     .back...........
     1b2:	76 00 60 05                                         v.`.

000001b6 <pump2_menu>:
     1b6:	07 ca 01 70 75 6d 70 32 20 6d 65 6e 75 00 00 00     ...pump2 menu...
     1c6:	00 00 3f 01                                         ..?.

000001ca <pump2_menu_items>:
     1ca:	00 73 65 74 20 74 69 6d 65 00 00 00 00 00 00 00     .set time.......
     1da:	00 00 18 0a 01 73 65 74 20 64 61 79 00 00 00 00     .....set day....
     1ea:	00 00 00 00 00 00 2a 08 02 73 65 74 20 76 6f 6c     ......*..set vol
	...
     202:	00 00 9a 06 03 70 75 6d 70 20 63 61 6c 69 62 00     .....pump calib.
     212:	00 00 00 00 00 00 f7 06 04 74 69 6d 65 72 20 6f     .........timer o
     222:	6e 2f 6f 66 66 00 00 00 00 00 1e 09 05 6d 6f 69     n/off........moi
     232:	73 74 20 73 65 6e 73 6f 72 00 00 00 82 03 60 05     st sensor.....`.
     242:	07 62 61 63 6b 00 00 00 00 00 00 00 00 00 00 00     .back...........
     252:	76 00 60 05                                         v.`.

00000256 <pump1_menu>:
     256:	07 6a 02 70 75 6d 70 31 20 6d 65 6e 75 00 00 00     .j.pump1 menu...
     266:	00 00 4a 01                                         ..J.

0000026a <pump1_menu_items>:
     26a:	00 73 65 74 20 74 69 6d 65 00 00 00 00 00 00 00     .set time.......
     27a:	00 00 18 0a 01 73 65 74 20 64 61 79 00 00 00 00     .....set day....
     28a:	00 00 00 00 00 00 2a 08 02 73 65 74 20 76 6f 6c     ......*..set vol
	...
     2a2:	00 00 9a 06 03 70 75 6d 70 20 63 61 6c 69 62 00     .....pump calib.
     2b2:	00 00 00 00 00 00 f7 06 04 74 69 6d 65 72 20 6f     .........timer o
     2c2:	6e 2f 6f 66 66 00 00 00 00 00 1e 09 05 6d 6f 69     n/off........moi
     2d2:	73 74 20 73 65 6e 73 6f 72 00 00 00 0e 04 60 05     st sensor.....`.
     2e2:	07 62 61 63 6b 00 00 00 00 00 00 00 00 00 00 00     .back...........
     2f2:	76 00 60 05                                         v.`.

000002f6 <moist_sensor3_menu>:
     2f6:	06 0a 03 6d 6f 69 73 74 33 20 6d 65 6e 75 00 00     ...moist3 menu..
     306:	00 00 0a 01                                         ....

0000030a <moist_sensor3_menu_items>:
     30a:	00 6d 6f 69 73 74 20 6c 65 76 65 6c 00 00 00 00     .moist level....
     31a:	00 00 3c 10 01 6d 6f 69 73 74 20 65 65 70 72 6f     ..<..moist eepro
     32a:	6d 00 00 00 00 00 7c 10 02 6d 6f 69 73 74 20 74     m.....|..moist t
     33a:	68 72 65 73 68 00 00 00 00 00 c5 07 02 6d 6f 69     hresh........moi
     34a:	73 74 20 76 6f 6c 00 00 00 00 00 00 00 00 68 07     st vol........h.
     35a:	03 6d 6f 69 73 74 20 6f 6e 2f 6f 66 66 00 00 00     .moist on/off...
     36a:	00 00 6a 09 04 62 61 63 6b 00 00 00 00 00 00 00     ..j..back.......
     37a:	00 00 00 00 16 01 60 05                             ......`.

00000382 <moist_sensor2_menu>:
     382:	06 96 03 6d 6f 69 73 74 32 20 6d 65 6e 75 00 00     ...moist2 menu..
     392:	00 00 16 01                                         ....

00000396 <moist_sensor2_menu_items>:
     396:	00 6d 6f 69 73 74 20 6c 65 76 65 6c 00 00 00 00     .moist level....
     3a6:	00 00 3c 10 01 6d 6f 69 73 74 20 65 65 70 72 6f     ..<..moist eepro
     3b6:	6d 00 00 00 00 00 7c 10 02 6d 6f 69 73 74 20 74     m.....|..moist t
     3c6:	68 72 65 73 68 00 00 00 00 00 c5 07 02 6d 6f 69     hresh........moi
     3d6:	73 74 20 76 6f 6c 00 00 00 00 00 00 00 00 68 07     st vol........h.
     3e6:	03 6d 6f 69 73 74 20 6f 6e 2f 6f 66 66 00 00 00     .moist on/off...
     3f6:	00 00 6a 09 04 62 61 63 6b 00 00 00 00 00 00 00     ..j..back.......
     406:	00 00 00 00 b6 01 60 05                             ......`.

0000040e <moist_sensor1_menu>:
     40e:	06 22 04 6d 6f 69 73 74 31 20 6d 65 6e 75 00 00     .".moist1 menu..
     41e:	00 00 22 01                                         ..".

00000422 <moist_sensor1_menu_items>:
     422:	00 6d 6f 69 73 74 20 6c 65 76 65 6c 00 00 00 00     .moist level....
     432:	00 00 3c 10 01 6d 6f 69 73 74 20 65 65 70 72 6f     ..<..moist eepro
     442:	6d 00 00 00 00 00 7c 10 02 6d 6f 69 73 74 20 74     m.....|..moist t
     452:	68 72 65 73 68 00 00 00 00 00 c5 07 02 6d 6f 69     hresh........moi
     462:	73 74 20 76 6f 6c 00 00 00 00 00 00 00 00 68 07     st vol........h.
     472:	03 6d 6f 69 73 74 20 6f 6e 2f 6f 66 66 00 00 00     .moist on/off...
     482:	00 00 6a 09 04 62 61 63 6b 00 00 00 00 00 00 00     ..j..back.......
     492:	00 00 00 00 56 02 60 05                             ....V.`.

0000049a <PCD8544_Font3x5>:
     49a:	00 00 00 00 17 00 03 00 03 1f 0a 1f 0a 1f 05 09     ................
     4aa:	04 12 0f 17 1c 00 03 00 00 0e 11 11 0e 00 05 02     ................
     4ba:	05 04 0e 04 10 08 00 04 04 04 00 10 00 08 04 02     ................
     4ca:	1f 11 1f 12 1f 10 1d 15 17 11 15 1f 07 04 1f 17     ................
     4da:	15 1d 1f 15 1d 01 01 1f 1f 15 1f 17 15 1f 00 0a     ................
     4ea:	00 10 0a 00 04 0a 11 0a 0a 0a 11 0a 04 01 15 03     ................
     4fa:	0e 15 16 1e 05 1e 1f 15 0a 0e 11 11 1f 11 0e 1f     ................
     50a:	15 15 1f 05 05 0e 15 1d 1f 04 1f 11 1f 11 08 10     ................
     51a:	0f 1f 04 1b 1f 10 10 1f 06 1f 1f 0e 1f 0e 11 0e     ................
     52a:	1f 05 02 0e 11 1e 1f 0d 16 12 15 09 01 1f 01 0f     ................
     53a:	10 0f 07 18 07 1f 0c 1f 1b 04 1b 03 1c 03 19 15     ................
     54a:	13 1f 11 00 02 04 08 00 11 1f 02 01 02 10 10 10     ................
     55a:	01 02 00 1a 16 1c 1f 12 0c 0c 12 12 0c 12 1f 0c     ................
     56a:	1a 16 04 1e 05 06 15 0f 1f 02 1c 00 1d 00 10 10     ................
     57a:	0d 1f 0c 12 11 1f 10 1e 0e 1e 1e 02 1c 0c 12 0c     ................
     58a:	1e 0a 04 04 0a 1e 1c 02 02 14 1e 0a 02 1f 12 0e     ................
     59a:	10 1e 0e 10 0e 1e 1c 1e 12 0c 12 02 14 1e 1a 1e     ................
     5aa:	16 04 1b 11 00 1f 00 11 1b 04 04 06 02 1f 1f 1f     ................
	...

000005d8 <PCD8544_Font5x7>:
	...
     5e0:	2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14 00     /...............
     5f0:	24 2a 7f 2a 12 00 32 34 08 16 26 00 36 49 55 22     $*.*..24..&.6IU"
     600:	50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00 41     P........."A...A
     610:	22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08 00     ".....>.....>...
     620:	00 00 50 30 00 00 10 10 10 10 10 00 00 60 60 00     ..P0.........``.
     630:	00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00 42     .. .....>QIE>..B
     640:	7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31 00     .@..BaQIF.!AEK1.
     650:	18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49 49     ......'EEE9.<JII
     660:	30 00 01 71 09 05 03 00 36 49 49 49 36 00 06 49     0..q....6III6..I
     670:	49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00 00     I)...66....V6...
     680:	08 14 22 41 00 00 14 14 14 14 14 00 00 41 22 14     .."A.........A".
     690:	08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7e 11     ....Q...2IYQ>.~.
     6a0:	11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22 00     ..~..III6.>AAA".
     6b0:	7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09 09     .AA"...IIIA.....
     6c0:	01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00 41     ..>AIIz........A
     6d0:	7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41 00     .A.. @A?....."A.
     6e0:	7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08 10     .@@@@...........
     6f0:	7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e 41     ..>AAA>.......>A
     700:	51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31 00     Q!^....)F.FIII1.
     710:	01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40 20     ......?@@@?.. @ 
     720:	1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07 08     ..?@8@?.c...c...
     730:	70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00 00     p...aQIEC...AA..
     740:	55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01 02     U*U*U..AA.......
     750:	04 00 40 40 40 40 40 00 00 01 02 04 00 00 20 54     ..@@@@@....... T
     760:	54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20 00     TTx..HDD8.8DDD .
     770:	38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09 01     8DDH..8TTT...~..
     780:	02 00 0c 52 52 52 3e 00 7f 08 04 04 78 00 00 44     ...RRR>.....x..D
     790:	7d 40 00 00 20 40 44 3d 00 00 7f 10 28 44 00 00     }@.. @D=....(D..
     7a0:	00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04 04     .A.@..|...x.|...
     7b0:	78 00 38 44 44 44 38 00 7c 14 14 14 08 00 08 14     x.8DDD8.|.......
     7c0:	14 18 7c 00 7c 08 04 04 08 00 48 54 54 54 20 00     ..|.|.....HTTT .
     7d0:	04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40 20     .?D@ .<@@ |.. @ 
     7e0:	1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 0c 50     ..<@0@<.D(.(D..P
     7f0:	50 50 3c 00 44 64 54 4c 44 00 00 7f 3e 1c 08 00     PP<.DdTLD...>...
     800:	08 1c 3e 7f 00 00 08 7c 7e 7c 08 00 10 3e 7e 3e     ..>....|~|...>~>
     810:	10 00 7f 7f 7f 7f 7f 00 00 7f 3e 1c 08 00           ..........>...

0000081e <custom_chars>:
     81e:	00 00 00 00 00 00 3e 22 22 22 3e 00 3e 3e 3e 3e     ......>""">.>>>>
     82e:	3e 00 06 09 12 09 06 00 00 00 00 00                 >...........

0000083a <__ctors_end>:
     83a:	11 24       	eor	r1, r1
     83c:	1f be       	out	0x3f, r1	; 63
     83e:	cf ef       	ldi	r28, 0xFF	; 255
     840:	d8 e0       	ldi	r29, 0x08	; 8
     842:	de bf       	out	0x3e, r29	; 62
     844:	cd bf       	out	0x3d, r28	; 61

00000846 <__do_copy_data>:
     846:	12 e0       	ldi	r17, 0x02	; 2
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b1 e0       	ldi	r27, 0x01	; 1
     84c:	ec e2       	ldi	r30, 0x2C	; 44
     84e:	fa e3       	ldi	r31, 0x3A	; 58
     850:	02 c0       	rjmp	.+4      	; 0x856 <__do_copy_data+0x10>
     852:	05 90       	lpm	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	ae 36       	cpi	r26, 0x6E	; 110
     858:	b1 07       	cpc	r27, r17
     85a:	d9 f7       	brne	.-10     	; 0x852 <__do_copy_data+0xc>

0000085c <__do_clear_bss>:
     85c:	24 e0       	ldi	r18, 0x04	; 4
     85e:	ae e6       	ldi	r26, 0x6E	; 110
     860:	b2 e0       	ldi	r27, 0x02	; 2
     862:	01 c0       	rjmp	.+2      	; 0x866 <.do_clear_bss_start>

00000864 <.do_clear_bss_loop>:
     864:	1d 92       	st	X+, r1

00000866 <.do_clear_bss_start>:
     866:	ac 38       	cpi	r26, 0x8C	; 140
     868:	b2 07       	cpc	r27, r18
     86a:	e1 f7       	brne	.-8      	; 0x864 <.do_clear_bss_loop>
     86c:	0e 94 a5 04 	call	0x94a	; 0x94a <main>
     870:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <_exit>

00000874 <__bad_interrupt>:
     874:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000878 <month_length>:
     878:	62 30       	cpi	r22, 0x02	; 2
     87a:	21 f4       	brne	.+8      	; 0x884 <month_length+0xc>
     87c:	0e 94 49 04 	call	0x892	; 0x892 <is_leap_year>
     880:	84 5e       	subi	r24, 0xE4	; 228
     882:	08 95       	ret
     884:	68 30       	cpi	r22, 0x08	; 8
     886:	08 f0       	brcs	.+2      	; 0x88a <month_length+0x12>
     888:	6f 5f       	subi	r22, 0xFF	; 255
     88a:	61 70       	andi	r22, 0x01	; 1
     88c:	8e e1       	ldi	r24, 0x1E	; 30
     88e:	86 0f       	add	r24, r22
     890:	08 95       	ret

00000892 <is_leap_year>:
     892:	9c 01       	movw	r18, r24
     894:	23 70       	andi	r18, 0x03	; 3
     896:	33 27       	eor	r19, r19
     898:	23 2b       	or	r18, r19
     89a:	59 f4       	brne	.+22     	; 0x8b2 <is_leap_year+0x20>
     89c:	64 e6       	ldi	r22, 0x64	; 100
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__divmodhi4>
     8a4:	89 2b       	or	r24, r25
     8a6:	39 f4       	brne	.+14     	; 0x8b6 <is_leap_year+0x24>
     8a8:	63 70       	andi	r22, 0x03	; 3
     8aa:	77 27       	eor	r23, r23
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	67 2b       	or	r22, r23
     8b0:	19 f0       	breq	.+6      	; 0x8b8 <is_leap_year+0x26>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	08 95       	ret

000008ba <CHAR2BCD2>:
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
     8ba:	8a 30       	cpi	r24, 0x0A	; 10
     8bc:	30 f0       	brcs	.+12     	; 0x8ca <CHAR2BCD2+0x10>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	8a 50       	subi	r24, 0x0A	; 10
     8c4:	8a 30       	cpi	r24, 0x0A	; 10
     8c6:	e0 f7       	brcc	.-8      	; 0x8c0 <CHAR2BCD2+0x6>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <CHAR2BCD2+0x12>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	90 e1       	ldi	r25, 0x10	; 16
     8ce:	29 9f       	mul	r18, r25
     8d0:	90 01       	movw	r18, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	82 2b       	or	r24, r18
     8d6:	08 95       	ret

000008d8 <INT2BCD4>:
*****************************************************************************/
uint16_t INT2BCD4(uint16_t input)
{
	int high = 0;
	
	while (input >= 1000)                // Count thousands
     8d8:	88 3e       	cpi	r24, 0xE8	; 232
     8da:	23 e0       	ldi	r18, 0x03	; 3
     8dc:	92 07       	cpc	r25, r18
     8de:	58 f0       	brcs	.+22     	; 0x8f6 <INT2BCD4+0x1e>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
	{
		high++;
     8e4:	2f 5f       	subi	r18, 0xFF	; 255
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
		input -= 1000;
     8e8:	88 5e       	subi	r24, 0xE8	; 232
     8ea:	93 40       	sbci	r25, 0x03	; 3
*****************************************************************************/
uint16_t INT2BCD4(uint16_t input)
{
	int high = 0;
	
	while (input >= 1000)                // Count thousands
     8ec:	88 3e       	cpi	r24, 0xE8	; 232
     8ee:	43 e0       	ldi	r20, 0x03	; 3
     8f0:	94 07       	cpc	r25, r20
     8f2:	c0 f7       	brcc	.-16     	; 0x8e4 <INT2BCD4+0xc>
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <INT2BCD4+0x22>
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
uint16_t INT2BCD4(uint16_t input)
{
	int high = 0;
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
	{
		high++;
		input -= 1000;
	}

	high <<= 4;	
     8fa:	22 95       	swap	r18
     8fc:	32 95       	swap	r19
     8fe:	30 7f       	andi	r19, 0xF0	; 240
     900:	32 27       	eor	r19, r18
     902:	20 7f       	andi	r18, 0xF0	; 240
     904:	32 27       	eor	r19, r18
	
	while (input >= 100)                // Count hundreds
     906:	84 36       	cpi	r24, 0x64	; 100
     908:	91 05       	cpc	r25, r1
     90a:	38 f0       	brcs	.+14     	; 0x91a <__stack+0x1b>
	{
		high++;
     90c:	2f 5f       	subi	r18, 0xFF	; 255
     90e:	3f 4f       	sbci	r19, 0xFF	; 255
		input -= 100;
     910:	84 56       	subi	r24, 0x64	; 100
     912:	91 09       	sbc	r25, r1
		input -= 1000;
	}

	high <<= 4;	
	
	while (input >= 100)                // Count hundreds
     914:	84 36       	cpi	r24, 0x64	; 100
     916:	91 05       	cpc	r25, r1
     918:	c8 f7       	brcc	.-14     	; 0x90c <__stack+0xd>
	{
		high++;
		input -= 100;
	}

	high <<= 4;
     91a:	22 95       	swap	r18
     91c:	32 95       	swap	r19
     91e:	30 7f       	andi	r19, 0xF0	; 240
     920:	32 27       	eor	r19, r18
     922:	20 7f       	andi	r18, 0xF0	; 240
     924:	32 27       	eor	r19, r18
	
	while (input >= 10)                 // Count tens
     926:	8a 30       	cpi	r24, 0x0A	; 10
     928:	91 05       	cpc	r25, r1
     92a:	30 f0       	brcs	.+12     	; 0x938 <__stack+0x39>
	{
		high++;
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
		input -= 10;
     930:	0a 97       	sbiw	r24, 0x0a	; 10
		input -= 100;
	}

	high <<= 4;
	
	while (input >= 10)                 // Count tens
     932:	8a 30       	cpi	r24, 0x0A	; 10
     934:	91 05       	cpc	r25, r1
     936:	d0 f7       	brcc	.-12     	; 0x92c <__stack+0x2d>
	{
		high++;
		input -= 10;
	}

	return  (high << 4) | input;        // Add ones and return answer
     938:	22 95       	swap	r18
     93a:	32 95       	swap	r19
     93c:	30 7f       	andi	r19, 0xF0	; 240
     93e:	32 27       	eor	r19, r18
     940:	20 7f       	andi	r18, 0xF0	; 240
     942:	32 27       	eor	r19, r18
     944:	82 2b       	or	r24, r18
     946:	93 2b       	or	r25, r19
     948:	08 95       	ret

0000094a <main>:

int main(void)
{	
		
		//Init
		spi_MasterInit();										// Init SPI interface for the LCD display
     94a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <spi_MasterInit>
		pump_init();
     94e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <pump_init>
		PCD8544_Init(PCD8544_LCD_CONTRAST);
     952:	88 e3       	ldi	r24, 0x38	; 56
     954:	0e 94 9b 13 	call	0x2736	; 0x2736 <PCD8544_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     958:	87 ea       	ldi	r24, 0xA7	; 167
     95a:	91 e6       	ldi	r25, 0x61	; 97
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <main+0x12>
     960:	00 c0       	rjmp	.+0      	; 0x962 <main+0x18>
     962:	00 00       	nop
		_delay_ms(100); 
		init_time();				// Init the timer for the time and ms counter
     964:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <init_time>
		rotenc_init();				// Init the rotary encoder
     968:	0e 94 89 18 	call	0x3112	; 0x3112 <rotenc_init>
		moist_sensor_init();		// Init moisture sensor 
     96c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <moist_sensor_init>
		sei();						// global interrupt enable
     970:	78 94       	sei
		PCD8544_Clear();			// clear display
     972:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0, 0);			// call state function (this is menu_func() at bootup)
     976:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     97a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	09 95       	icall
		while (1)
		{
			// handle up/down of rotenc
			val = rotenc_read4();
			if(val < -1){val = -1;}
			if(val > 1){val = 1;}
     984:	c1 e0       	ldi	r28, 0x01	; 1
		// main loop
		while (1)
		{
			// handle up/down of rotenc
			val = rotenc_read4();
			if(val < -1){val = -1;}
     986:	df ef       	ldi	r29, 0xFF	; 255
			};
			
			// handle button push of rotenc
			if (rotenc_press) {
					gPowerSaveTimer = 0; 
					p_func = p_menu->p_menu_list[menu_item].pFunc;				// set the function pointer to the func of the selected menu item		
     988:	14 e1       	ldi	r17, 0x14	; 20
		
		// main loop
		while (1)
		{
			// handle up/down of rotenc
			val = rotenc_read4();
     98a:	0e 94 95 18 	call	0x312a	; 0x312a <rotenc_read4>
     98e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
			if(val < -1){val = -1;}
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	24 f4       	brge	.+8      	; 0x99e <main+0x54>
     996:	d0 93 6e 02 	sts	0x026E, r29	; 0x80026e <__data_end>
			if(val > 1){val = 1;}
			if (val) {
     99a:	8d 2f       	mov	r24, r29
     99c:	0a c0       	rjmp	.+20     	; 0x9b2 <main+0x68>
		while (1)
		{
			// handle up/down of rotenc
			val = rotenc_read4();
			if(val < -1){val = -1;}
			if(val > 1){val = 1;}
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	24 f0       	brlt	.+8      	; 0x9aa <main+0x60>
     9a2:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <__data_end>
			if (val) {
     9a6:	8c 2f       	mov	r24, r28
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <main+0x68>
     9aa:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     9ae:	88 23       	and	r24, r24
     9b0:	51 f0       	breq	.+20     	; 0x9c6 <main+0x7c>
				gPowerSaveTimer = 0; 
     9b2:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <gPowerSaveTimer>
				(*p_func)(val, 0);
     9b6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     9ba:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	09 95       	icall
				val = 0;
     9c2:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end>
			};
			
			// handle button push of rotenc
			if (rotenc_press) {
     9c6:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <rotenc_press>
     9ca:	88 23       	and	r24, r24
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <main+0x86>
     9ce:	54 c0       	rjmp	.+168    	; 0xa78 <main+0x12e>
					gPowerSaveTimer = 0; 
     9d0:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <gPowerSaveTimer>
					p_func = p_menu->p_menu_list[menu_item].pFunc;				// set the function pointer to the func of the selected menu item		
     9d4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p_menu>
     9d8:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p_menu+0x1>
     9dc:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <menu_item>
     9e0:	21 03       	mulsu	r18, r17
     9e2:	c0 01       	movw	r24, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	9f 01       	movw	r18, r30
     9e8:	2f 5f       	subi	r18, 0xFF	; 255
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	f9 01       	movw	r30, r18
     9ee:	45 91       	lpm	r20, Z+
     9f0:	55 91       	lpm	r21, Z+
     9f2:	fa 01       	movw	r30, r20
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	72 96       	adiw	r30, 0x12	; 18
     9fa:	45 91       	lpm	r20, Z+
     9fc:	55 91       	lpm	r21, Z+
     9fe:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
     a02:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
					if(p_menu->p_menu_list[menu_item].pFunc == menu_func){		// apply changes below only when changing between menus 
     a06:	f9 01       	movw	r30, r18
     a08:	25 91       	lpm	r18, Z+
     a0a:	35 91       	lpm	r19, Z+
     a0c:	82 0f       	add	r24, r18
     a0e:	93 1f       	adc	r25, r19
     a10:	fc 01       	movw	r30, r24
     a12:	72 96       	adiw	r30, 0x12	; 18
     a14:	25 91       	lpm	r18, Z+
     a16:	35 91       	lpm	r19, Z+
     a18:	20 56       	subi	r18, 0x60	; 96
     a1a:	35 40       	sbci	r19, 0x05	; 5
     a1c:	f1 f4       	brne	.+60     	; 0xa5a <main+0x110>
						p_menu = p_menu->p_menu_list[menu_item].pMenu;			// reset the menu pointer 
     a1e:	fc 01       	movw	r30, r24
     a20:	70 96       	adiw	r30, 0x10	; 16
     a22:	25 91       	lpm	r18, Z+
     a24:	35 91       	lpm	r19, Z+
     a26:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <p_menu+0x1>
     a2a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <p_menu>
						p_data = p_menu->pdata;									// set the data pointer to the currently active dataset
     a2e:	c9 01       	movw	r24, r18
     a30:	42 96       	adiw	r24, 0x12	; 18
     a32:	fc 01       	movw	r30, r24
     a34:	85 91       	lpm	r24, Z+
     a36:	95 91       	lpm	r25, Z+
     a38:	32 97       	sbiw	r30, 0x02	; 2
     a3a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <p_data+0x1>
     a3e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <p_data>
						menu_item = 0;											// set menu_items to 0 only when changing between menu and submenu
     a42:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <menu_item>
					}	
					if((p_menu->p_menu_list[menu_item].pFunc == menu_func) || (rotenc_press_old == 0) ){
     a46:	71 97       	sbiw	r30, 0x11	; 17
     a48:	05 90       	lpm	r0, Z+
     a4a:	f4 91       	lpm	r31, Z
     a4c:	e0 2d       	mov	r30, r0
     a4e:	72 96       	adiw	r30, 0x12	; 18
     a50:	85 91       	lpm	r24, Z+
     a52:	95 91       	lpm	r25, Z+
     a54:	80 56       	subi	r24, 0x60	; 96
     a56:	95 40       	sbci	r25, 0x05	; 5
     a58:	21 f0       	breq	.+8      	; 0xa62 <main+0x118>
     a5a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
     a5e:	81 11       	cpse	r24, r1
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <main+0x11c>
						PCD8544_Clear(); //clear the screen data when menu changes or when entering a settings menu for the first time
     a62:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
					}
				rotenc_press = 0;
     a66:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <rotenc_press>
				(*p_func)(0, true); // call the state function
     a6a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     a6e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     a72:	6c 2f       	mov	r22, r28
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	09 95       	icall
			}
			pump_timer_watering();
     a78:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <pump_timer_watering>
			pump_moist_sensor_watering();
     a7c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <pump_moist_sensor_watering>
			moist_sensor_read_save();
     a80:	0e 94 ac 11 	call	0x2358	; 0x2358 <moist_sensor_read_save>
			PCD8544_Powersave();
     a84:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <PCD8544_Powersave>
			
			// refresh display every second. For example to see seconds updating in time menu
			if(gSEC_CHANGE){
     a88:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <gSEC_CHANGE>
     a8c:	88 23       	and	r24, r24
     a8e:	49 f0       	breq	.+18     	; 0xaa2 <main+0x158>
				(*p_func)(0,false);
     a90:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     a94:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	09 95       	icall
				gSEC_CHANGE = 0;
     a9e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <gSEC_CHANGE>
			}
			
			// refresh the display content
			PCD8544_UpdateArea(0, 0, PCD8544_WIDTH - 1, PCD8544_HEIGHT - 1);
     aa2:	2f e2       	ldi	r18, 0x2F	; 47
     aa4:	43 e5       	ldi	r20, 0x53	; 83
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 2c 13 	call	0x2658	; 0x2658 <PCD8544_UpdateArea>
			PCD8544_Refresh();
     aae:	0e 94 44 12 	call	0x2488	; 0x2488 <PCD8544_Refresh>
     ab2:	83 ed       	ldi	r24, 0xD3	; 211
     ab4:	90 e3       	ldi	r25, 0x30	; 48
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <main+0x16c>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <main+0x172>
     abc:	00 00       	nop
     abe:	65 cf       	rjmp	.-310    	; 0x98a <main+0x40>

00000ac0 <menu_func>:
bool func_setting_active = false;
int8_t frame = 0;
int8_t rotenc_updown;

// state function that handles the main and submenus
void menu_func(int8_t val, bool press){
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
	int8_t i = 0;
	int8_t j = 0;
	

	// If rot-enc was turned:
	menu_item = (menu_item + val) ;	// val contains the number of pos changes of rot enc. The currently selected item (menu_item) is updated by this value    
     ac8:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <menu_item>
     acc:	89 0f       	add	r24, r25
     ace:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <menu_item>
	if (menu_item >= p_menu->num_items) {
     ad2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p_menu>
     ad6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p_menu+0x1>
     ada:	94 91       	lpm	r25, Z
     adc:	89 17       	cp	r24, r25
     ade:	1c f0       	brlt	.+6      	; 0xae6 <menu_func+0x26>
		menu_item = p_menu->num_items-1;
     ae0:	91 50       	subi	r25, 0x01	; 1
     ae2:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <menu_item>
	}
	if (menu_item  < 0) {
     ae6:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <menu_item>
     aea:	99 23       	and	r25, r25
     aec:	24 f4       	brge	.+8      	; 0xaf6 <menu_func+0x36>
		menu_item = 0;
     aee:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <menu_item>
	}
	
	// LCD can only show 4 menu items. If the selected menu_item exceeds the last item on the page then set frame variable that contains the new top menu_item.
	if (menu_item > 3) {
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	06 c0       	rjmp	.+12     	; 0xb02 <menu_func+0x42>
     af6:	94 30       	cpi	r25, 0x04	; 4
     af8:	24 f0       	brlt	.+8      	; 0xb02 <menu_func+0x42>
		frame = menu_item - 3;		
     afa:	8d ef       	ldi	r24, 0xFD	; 253
     afc:	89 0f       	add	r24, r25
     afe:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <frame>
	}
	if (menu_item < frame) {
     b02:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <frame>
     b06:	98 17       	cp	r25, r24
     b08:	14 f4       	brge	.+4      	; 0xb0e <menu_func+0x4e>
		frame = menu_item;
     b0a:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <frame>
	}
		
	// print Menu Title
	PCD8544_PutTitle_f(p_menu->menu_title);
     b0e:	cf 01       	movw	r24, r30
     b10:	03 96       	adiw	r24, 0x03	; 3
     b12:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <PCD8544_PutTitle_f>
     b16:	11 e0       	ldi	r17, 0x01	; 1
     b18:	c0 e0       	ldi	r28, 0x00	; 0
     b1a:	d0 e0       	ldi	r29, 0x00	; 0
	// Print frame item as new top item and the 3 items that come after frame. Print the selected item with iverted color.
	for (j=0; j<4; j++){			
		if (menu_item == (frame + j)){
			PCD8544_PutSub_f(p_menu->p_menu_list[frame + j].menu_item_text, j+1, PCD8544_Pixel_Set);
		}else {
			PCD8544_PutSub_f(p_menu->p_menu_list[frame + j].menu_item_text, j+1, PCD8544_Pixel_Clear);
     b1c:	04 e1       	ldi	r16, 0x14	; 20
	PCD8544_PutTitle_f(p_menu->menu_title);

	// Print Menu Items 
	// Print frame item as new top item and the 3 items that come after frame. Print the selected item with iverted color.
	for (j=0; j<4; j++){			
		if (menu_item == (frame + j)){
     b1e:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <menu_item>
     b22:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <frame>
     b26:	ae 01       	movw	r20, r28
     b28:	48 0f       	add	r20, r24
     b2a:	51 1d       	adc	r21, r1
     b2c:	87 fd       	sbrc	r24, 7
     b2e:	5a 95       	dec	r21
     b30:	82 2f       	mov	r24, r18
     b32:	02 2e       	mov	r0, r18
     b34:	00 0c       	add	r0, r0
     b36:	99 0b       	sbc	r25, r25
     b38:	84 17       	cp	r24, r20
     b3a:	95 07       	cpc	r25, r21
     b3c:	91 f4       	brne	.+36     	; 0xb62 <menu_func+0xa2>
			PCD8544_PutSub_f(p_menu->p_menu_list[frame + j].menu_item_text, j+1, PCD8544_Pixel_Set);
     b3e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p_menu>
     b42:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p_menu+0x1>
     b46:	31 96       	adiw	r30, 0x01	; 1
     b48:	20 03       	mulsu	r18, r16
     b4a:	c0 01       	movw	r24, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	25 91       	lpm	r18, Z+
     b50:	35 91       	lpm	r19, Z+
     b52:	82 0f       	add	r24, r18
     b54:	93 1f       	adc	r25, r19
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	61 2f       	mov	r22, r17
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <PCD8544_PutSub_f>
     b60:	13 c0       	rjmp	.+38     	; 0xb88 <menu_func+0xc8>
		}else {
			PCD8544_PutSub_f(p_menu->p_menu_list[frame + j].menu_item_text, j+1, PCD8544_Pixel_Clear);
     b62:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p_menu>
     b66:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p_menu+0x1>
     b6a:	31 96       	adiw	r30, 0x01	; 1
     b6c:	04 9f       	mul	r16, r20
     b6e:	c0 01       	movw	r24, r0
     b70:	05 9f       	mul	r16, r21
     b72:	90 0d       	add	r25, r0
     b74:	11 24       	eor	r1, r1
     b76:	25 91       	lpm	r18, Z+
     b78:	35 91       	lpm	r19, Z+
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	61 2f       	mov	r22, r17
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <PCD8544_PutSub_f>
     b88:	21 96       	adiw	r28, 0x01	; 1
     b8a:	1f 5f       	subi	r17, 0xFF	; 255
	// print Menu Title
	PCD8544_PutTitle_f(p_menu->menu_title);

	// Print Menu Items 
	// Print frame item as new top item and the 3 items that come after frame. Print the selected item with iverted color.
	for (j=0; j<4; j++){			
     b8c:	c4 30       	cpi	r28, 0x04	; 4
     b8e:	d1 05       	cpc	r29, r1
     b90:	31 f6       	brne	.-116    	; 0xb1e <menu_func+0x5e>
			PCD8544_PutSub_f(p_menu->p_menu_list[frame + j].menu_item_text, j+1, PCD8544_Pixel_Set);
		}else {
			PCD8544_PutSub_f(p_menu->p_menu_list[frame + j].menu_item_text, j+1, PCD8544_Pixel_Clear);
		}
	} 
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <version_func>:

// state function that shows the FW version page
void version_func(int8_t val, bool press){
     b9c:	0f 93       	push	r16
     b9e:	cf 93       	push	r28
     ba0:	c6 2f       	mov	r28, r22

	PCD8544_Clear();	
     ba2:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
	PCD8544_GotoXY(0, Y_ROW1);
     ba6:	6d e0       	ldi	r22, 0x0D	; 13
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
	PCD8544_Puts(strcat("FW Ver: ", VERSION), PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	e7 e8       	ldi	r30, 0x87	; 135
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	a6 e8       	ldi	r26, 0x86	; 134
     bb6:	b1 e0       	ldi	r27, 0x01	; 1
     bb8:	01 90       	ld	r0, Z+
     bba:	0d 92       	st	X+, r0
     bbc:	8a 95       	dec	r24
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <version_func+0x1c>
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	8e e7       	ldi	r24, 0x7E	; 126
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
	PCD8544_GotoXY(0, Y_ROW2);
     bcc:	66 e1       	ldi	r22, 0x16	; 22
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
	PCD8544_Puts(strcat("Author: ", AUTHOR), PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
     bd4:	8d e0       	ldi	r24, 0x0D	; 13
     bd6:	e7 e9       	ldi	r30, 0x97	; 151
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	a6 e9       	ldi	r26, 0x96	; 150
     bdc:	b1 e0       	ldi	r27, 0x01	; 1
     bde:	01 90       	ld	r0, Z+
     be0:	0d 92       	st	X+, r0
     be2:	8a 95       	dec	r24
     be4:	e1 f7       	brne	.-8      	; 0xbde <version_func+0x42>
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	8e e8       	ldi	r24, 0x8E	; 142
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
	PCD8544_GotoXY(X_ROW4, Y_ROW4);
     bf2:	68 e2       	ldi	r22, 0x28	; 40
     bf4:	8e e0       	ldi	r24, 0x0E	; 14
     bf6:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y+6, 14, 65, 1);	
     bfa:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
     bfe:	66 e0       	ldi	r22, 0x06	; 6
     c00:	68 0f       	add	r22, r24
     c02:	01 e0       	ldi	r16, 0x01	; 1
     c04:	21 e4       	ldi	r18, 0x41	; 65
     c06:	4e e0       	ldi	r20, 0x0E	; 14
     c08:	82 50       	subi	r24, 0x02	; 2
     c0a:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_Puts("back", PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
     c0e:	41 e0       	ldi	r20, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	87 ec       	ldi	r24, 0xC7	; 199
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
	
	if (press && rotenc_press_old){
     c1a:	cc 23       	and	r28, r28
     c1c:	e1 f0       	breq	.+56     	; 0xc56 <version_func+0xba>
     c1e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
     c22:	88 23       	and	r24, r24
     c24:	c1 f0       	breq	.+48     	; 0xc56 <version_func+0xba>
		p_func = menu_func;
     c26:	80 e6       	ldi	r24, 0x60	; 96
     c28:	95 e0       	ldi	r25, 0x05	; 5
     c2a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     c2e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		p_menu = &main_menu;
     c32:	86 e7       	ldi	r24, 0x76	; 118
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <p_menu+0x1>
     c3a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <p_menu>
		PCD8544_Clear();
     c3e:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
     c42:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     c46:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	09 95       	icall
		rotenc_press_old = 0;
     c50:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		return;
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <version_func+0xc0>
	}
	rotenc_press_old = 1;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
	
};
     c5c:	cf 91       	pop	r28
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <lcdcontrast_func>:

// state function that shows the LCD contrast page
void lcdcontrast_func(int8_t val, bool press) {
     c62:	0f 93       	push	r16
     c64:	cf 93       	push	r28
     c66:	c6 2f       	mov	r28, r22

	if (val){
     c68:	88 23       	and	r24, r24
     c6a:	91 f0       	breq	.+36     	; 0xc90 <lcdcontrast_func+0x2e>
		func_item += val;
     c6c:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <func_item>
     c70:	89 0f       	add	r24, r25
     c72:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
		contrast = PCD8544_LCD_CONTRAST + func_item * 2;
     c76:	88 0f       	add	r24, r24
     c78:	88 5c       	subi	r24, 0xC8	; 200
	
	
		// set VOP
		if (contrast > 0x7F) {
     c7a:	1a f0       	brmi	.+6      	; 0xc82 <lcdcontrast_func+0x20>
// state function that shows the LCD contrast page
void lcdcontrast_func(int8_t val, bool press) {

	if (val){
		func_item += val;
		contrast = PCD8544_LCD_CONTRAST + func_item * 2;
     c7c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <contrast>
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <lcdcontrast_func+0x26>
	
	
		// set VOP
		if (contrast > 0x7F) {
			contrast = 0x7F;
     c82:	8f e7       	ldi	r24, 0x7F	; 127
     c84:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <contrast>
		}
		if (contrast <  0){
			contrast = 0;
		}
	
	PCD8544_Init(contrast);
     c88:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <contrast>
     c8c:	0e 94 9b 13 	call	0x2736	; 0x2736 <PCD8544_Init>
	} 
	
	// print Menu Title
	PCD8544_PutTitle("LCDcontrast");
     c90:	84 ea       	ldi	r24, 0xA4	; 164
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	
	PCD8544_GotoXY(X_ROW2, Y_ROW2);	// Go to Pixel x=0, y=0 position on the LCD display
     c98:	66 e1       	ldi	r22, 0x16	; 22
     c9a:	8e e0       	ldi	r24, 0x0E	; 14
     c9c:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + ROW_HEIGHT, X_ROW0, X_ROW0 + ROW_LENGTH, 0);	// Clear previous content in that row
     ca0:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
     ca4:	69 e0       	ldi	r22, 0x09	; 9
     ca6:	68 0f       	add	r22, r24
     ca8:	00 e0       	ldi	r16, 0x00	; 0
     caa:	20 e4       	ldi	r18, 0x40	; 64
     cac:	4e e0       	ldi	r20, 0x0E	; 14
     cae:	82 50       	subi	r24, 0x02	; 2
     cb0:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	show_4digit_number(contrast, PCD8544_Pixel_Clear );
     cb4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <contrast>
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
	
	PCD8544_GotoXY(X_ROW4, Y_ROW4);
     cc0:	68 e2       	ldi	r22, 0x28	; 40
     cc2:	8e e0       	ldi	r24, 0x0E	; 14
     cc4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y+6, 14, 65, 1);	// Set the row of the selected item to black then write the item text in white
     cc8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
     ccc:	66 e0       	ldi	r22, 0x06	; 6
     cce:	68 0f       	add	r22, r24
     cd0:	01 e0       	ldi	r16, 0x01	; 1
     cd2:	21 e4       	ldi	r18, 0x41	; 65
     cd4:	4e e0       	ldi	r20, 0x0E	; 14
     cd6:	82 50       	subi	r24, 0x02	; 2
     cd8:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_Puts("back", PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	87 ec       	ldi	r24, 0xC7	; 199
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
	
	if (press && rotenc_press_old){
     ce8:	cc 23       	and	r28, r28
     cea:	f1 f0       	breq	.+60     	; 0xd28 <lcdcontrast_func+0xc6>
     cec:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
     cf0:	88 23       	and	r24, r24
     cf2:	d1 f0       	breq	.+52     	; 0xd28 <lcdcontrast_func+0xc6>
		p_func = menu_func;
     cf4:	80 e6       	ldi	r24, 0x60	; 96
     cf6:	95 e0       	ldi	r25, 0x05	; 5
     cf8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     cfc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		p_menu = &main_menu;
     d00:	86 e7       	ldi	r24, 0x76	; 118
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <p_menu+0x1>
     d08:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <p_menu>
		PCD8544_Clear();
     d0c:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
     d10:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     d14:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	09 95       	icall
		rotenc_press_old = 0;
     d1e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		func_item = 0;
     d22:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
		
		return;
     d26:	03 c0       	rjmp	.+6      	; 0xd2e <lcdcontrast_func+0xcc>
	}
	rotenc_press_old = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
};
     d2e:	cf 91       	pop	r28
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <pump_vol_func>:
	}

rotenc_press_old = 1;
}

void pump_vol_func(int8_t val, bool press){
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	16 2f       	mov	r17, r22
	
	uint16_t pump_vol = ((PUMP_DATA*)p_data)->pump_vol;
     d3c:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
     d40:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
     d44:	c3 81       	ldd	r28, Z+3	; 0x03
     d46:	d4 81       	ldd	r29, Z+4	; 0x04
	
	if (val){
     d48:	88 23       	and	r24, r24
     d4a:	b1 f0       	breq	.+44     	; 0xd78 <pump_vol_func+0x44>
		pump_vol += val*10 ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
     d4c:	08 2e       	mov	r0, r24
     d4e:	00 0c       	add	r0, r0
     d50:	99 0b       	sbc	r25, r25
     d52:	9c 01       	movw	r18, r24
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	c8 0f       	add	r28, r24
     d6a:	d9 1f       	adc	r29, r25
     d6c:	c9 3e       	cpi	r28, 0xE9	; 233
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	d8 07       	cpc	r29, r24
     d72:	10 f0       	brcs	.+4      	; 0xd78 <pump_vol_func+0x44>
     d74:	c8 ee       	ldi	r28, 0xE8	; 232
     d76:	d3 e0       	ldi	r29, 0x03	; 3
			pump_vol = 0;	
		}
	}

	// plot
	PCD8544_PutTitle("pump vol"); 
     d78:	80 eb       	ldi	r24, 0xB0	; 176
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("Vol in ml: ", PCD8544_Row2, PCD8544_Pixel_Clear);
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	62 e0       	ldi	r22, 0x02	; 2
     d84:	89 eb       	ldi	r24, 0xB9	; 185
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	show_4digit_number(pump_vol, PCD8544_Pixel_Clear);
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	ce 01       	movw	r24, r28
     d90:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	64 e0       	ldi	r22, 0x04	; 4
     d98:	85 ec       	ldi	r24, 0xC5	; 197
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	((PUMP_DATA*)p_data)->pump_vol = pump_vol; 
     da0:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
     da4:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
     da8:	d4 83       	std	Z+4, r29	; 0x04
     daa:	c3 83       	std	Z+3, r28	; 0x03
	
	if(press && rotenc_press_old){
     dac:	11 23       	and	r17, r17
     dae:	c1 f0       	breq	.+48     	; 0xde0 <pump_vol_func+0xac>
     db0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
     db4:	88 23       	and	r24, r24
     db6:	a1 f0       	breq	.+40     	; 0xde0 <pump_vol_func+0xac>
			p_func = menu_func;
     db8:	80 e6       	ldi	r24, 0x60	; 96
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     dc0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			PCD8544_Clear();
     dc4:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
			(*p_func)(0,0);
     dc8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     dcc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	09 95       	icall
			rotenc_press_old = 0;
     dd6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
			func_item = 0;
     dda:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
			return;	
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <pump_vol_func+0xb2>
		}
	
	rotenc_press_old = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}		
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <pump_cal_func>:

void pump_cal_func(int8_t val, bool press){
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	18 2f       	mov	r17, r24
     dfc:	06 2f       	mov	r16, r22
	
	uint16_t pump_cal = ((PUMP_DATA*)p_data)->pump_calib;
     dfe:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
     e02:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
     e06:	65 81       	ldd	r22, Z+5	; 0x05
     e08:	76 81       	ldd	r23, Z+6	; 0x06
     e0a:	87 81       	ldd	r24, Z+7	; 0x07
     e0c:	90 85       	ldd	r25, Z+8	; 0x08
     e0e:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fixunssfsi>
     e12:	eb 01       	movw	r28, r22
	
	if (val){
     e14:	11 23       	and	r17, r17
     e16:	b1 f0       	breq	.+44     	; 0xe44 <pump_cal_func+0x56>
		pump_cal += val*10 ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
     e18:	21 2f       	mov	r18, r17
     e1a:	11 0f       	add	r17, r17
     e1c:	33 0b       	sbc	r19, r19
     e1e:	e9 01       	movw	r28, r18
     e20:	cc 0f       	add	r28, r28
     e22:	dd 1f       	adc	r29, r29
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	22 0f       	add	r18, r18
     e2a:	33 1f       	adc	r19, r19
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	c2 0f       	add	r28, r18
     e32:	d3 1f       	adc	r29, r19
     e34:	c6 0f       	add	r28, r22
     e36:	d7 1f       	adc	r29, r23
     e38:	c0 31       	cpi	r28, 0x10	; 16
     e3a:	87 e2       	ldi	r24, 0x27	; 39
     e3c:	d8 07       	cpc	r29, r24
     e3e:	10 f0       	brcs	.+4      	; 0xe44 <pump_cal_func+0x56>
     e40:	cf e0       	ldi	r28, 0x0F	; 15
     e42:	d7 e2       	ldi	r29, 0x27	; 39
			pump_cal = 0;	
		}
	}

	// plot
	PCD8544_PutTitle("pump cal"); 
     e44:	8c ec       	ldi	r24, 0xCC	; 204
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("ml\x2Fmin: ", PCD8544_Row2, PCD8544_Pixel_Clear);
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	85 ed       	ldi	r24, 0xD5	; 213
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	show_4digit_number(pump_cal, PCD8544_Pixel_Clear);
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	85 ec       	ldi	r24, 0xC5	; 197
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	((PUMP_DATA*)p_data)->pump_calib = pump_cal; 
     e6c:	e0 90 74 02 	lds	r14, 0x0274	; 0x800274 <p_data>
     e70:	f0 90 75 02 	lds	r15, 0x0275	; 0x800275 <p_data+0x1>
     e74:	be 01       	movw	r22, r28
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 6d 1b 	call	0x36da	; 0x36da <__floatunsisf>
     e7e:	f7 01       	movw	r30, r14
     e80:	65 83       	std	Z+5, r22	; 0x05
     e82:	76 83       	std	Z+6, r23	; 0x06
     e84:	87 83       	std	Z+7, r24	; 0x07
     e86:	90 87       	std	Z+8, r25	; 0x08
	
	if(press && rotenc_press_old){
     e88:	00 23       	and	r16, r16
     e8a:	c1 f0       	breq	.+48     	; 0xebc <pump_cal_func+0xce>
     e8c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
     e90:	88 23       	and	r24, r24
     e92:	a1 f0       	breq	.+40     	; 0xebc <pump_cal_func+0xce>
			p_func = menu_func;
     e94:	80 e6       	ldi	r24, 0x60	; 96
     e96:	95 e0       	ldi	r25, 0x05	; 5
     e98:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     e9c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			PCD8544_Clear();
     ea0:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
			(*p_func)(0,0);
     ea4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     ea8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	09 95       	icall
			rotenc_press_old = 0;
     eb2:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
			func_item = 0;
     eb6:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
			return;	
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <pump_cal_func+0xd4>
		}
	
	rotenc_press_old = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
	
	
}
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	08 95       	ret

00000ed0 <moist_vol_func>:
		return;
	}
	rotenc_press_old = 1;
}

void moist_vol_func(int8_t val, bool press){
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	16 2f       	mov	r17, r22
	
	uint16_t pump_vol = ((MOIST_SENSOR_DATA*)p_data)->pump_vol;
     ed8:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
     edc:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
     ee0:	c6 81       	ldd	r28, Z+6	; 0x06
     ee2:	d7 81       	ldd	r29, Z+7	; 0x07
	
	if (val){
     ee4:	88 23       	and	r24, r24
     ee6:	b1 f0       	breq	.+44     	; 0xf14 <moist_vol_func+0x44>
		pump_vol += val*10 ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
     ee8:	08 2e       	mov	r0, r24
     eea:	00 0c       	add	r0, r0
     eec:	99 0b       	sbc	r25, r25
     eee:	9c 01       	movw	r18, r24
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	c8 0f       	add	r28, r24
     f06:	d9 1f       	adc	r29, r25
     f08:	c9 3e       	cpi	r28, 0xE9	; 233
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	d8 07       	cpc	r29, r24
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <moist_vol_func+0x44>
     f10:	c8 ee       	ldi	r28, 0xE8	; 232
     f12:	d3 e0       	ldi	r29, 0x03	; 3
			pump_vol = 0;
		}
	}

	// plot
	PCD8544_PutTitle("pump vol");
     f14:	80 eb       	ldi	r24, 0xB0	; 176
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("Vol in ml: ", PCD8544_Row2, PCD8544_Pixel_Clear);
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	89 eb       	ldi	r24, 0xB9	; 185
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	show_4digit_number(pump_vol, PCD8544_Pixel_Clear);
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	64 e0       	ldi	r22, 0x04	; 4
     f34:	85 ec       	ldi	r24, 0xC5	; 197
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	((MOIST_SENSOR_DATA*)p_data)->pump_vol = pump_vol;
     f3c:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
     f40:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
     f44:	d7 83       	std	Z+7, r29	; 0x07
     f46:	c6 83       	std	Z+6, r28	; 0x06
	
	if(press && rotenc_press_old){
     f48:	11 23       	and	r17, r17
     f4a:	c1 f0       	breq	.+48     	; 0xf7c <moist_vol_func+0xac>
     f4c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
     f50:	88 23       	and	r24, r24
     f52:	a1 f0       	breq	.+40     	; 0xf7c <moist_vol_func+0xac>
		p_func = menu_func;
     f54:	80 e6       	ldi	r24, 0x60	; 96
     f56:	95 e0       	ldi	r25, 0x05	; 5
     f58:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     f5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PCD8544_Clear();
     f60:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
     f64:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     f68:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	09 95       	icall
		rotenc_press_old = 0;
     f72:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		func_item = 0;
     f76:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
		return;
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <moist_vol_func+0xb2>
	}	
	rotenc_press_old = 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	08 95       	ret

00000f8a <moist_thres_func>:
	}
	
	rotenc_press_old = 1;
}

void moist_thres_func(int8_t val, bool press){
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	18 2f       	mov	r17, r24
     f98:	06 2f       	mov	r16, r22
	
	uint16_t moist_thres = ((MOIST_SENSOR_DATA*)p_data)->moist_sensor_thres;
     f9a:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
     f9e:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
     fa2:	61 81       	ldd	r22, Z+1	; 0x01
     fa4:	72 81       	ldd	r23, Z+2	; 0x02
     fa6:	83 81       	ldd	r24, Z+3	; 0x03
     fa8:	94 81       	ldd	r25, Z+4	; 0x04
     faa:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fixunssfsi>
     fae:	eb 01       	movw	r28, r22
	
	if (val){
     fb0:	11 23       	and	r17, r17
     fb2:	51 f0       	breq	.+20     	; 0xfc8 <moist_thres_func+0x3e>
		moist_thres += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
     fb4:	c1 2f       	mov	r28, r17
     fb6:	11 0f       	add	r17, r17
     fb8:	dd 0b       	sbc	r29, r29
     fba:	c6 0f       	add	r28, r22
     fbc:	d7 1f       	adc	r29, r23
     fbe:	c5 36       	cpi	r28, 0x65	; 101
     fc0:	d1 05       	cpc	r29, r1
     fc2:	10 f0       	brcs	.+4      	; 0xfc8 <moist_thres_func+0x3e>
     fc4:	c4 e6       	ldi	r28, 0x64	; 100
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
			moist_thres = 0;
		}
	}

	// plot
	PCD8544_PutTitle("pump vol");
     fc8:	80 eb       	ldi	r24, 0xB0	; 176
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("thres in %: ", PCD8544_Row2, PCD8544_Pixel_Clear);
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	62 e0       	ldi	r22, 0x02	; 2
     fd4:	8e ed       	ldi	r24, 0xDE	; 222
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	show_4digit_number(moist_thres, PCD8544_Pixel_Clear);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	64 e0       	ldi	r22, 0x04	; 4
     fe8:	85 ec       	ldi	r24, 0xC5	; 197
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	((MOIST_SENSOR_DATA*)p_data)->moist_sensor_thres = moist_thres;
     ff0:	e0 90 74 02 	lds	r14, 0x0274	; 0x800274 <p_data>
     ff4:	f0 90 75 02 	lds	r15, 0x0275	; 0x800275 <p_data+0x1>
     ff8:	be 01       	movw	r22, r28
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 6d 1b 	call	0x36da	; 0x36da <__floatunsisf>
    1002:	f7 01       	movw	r30, r14
    1004:	61 83       	std	Z+1, r22	; 0x01
    1006:	72 83       	std	Z+2, r23	; 0x02
    1008:	83 83       	std	Z+3, r24	; 0x03
    100a:	94 83       	std	Z+4, r25	; 0x04
	
	if(press && rotenc_press_old){
    100c:	00 23       	and	r16, r16
    100e:	c1 f0       	breq	.+48     	; 0x1040 <moist_thres_func+0xb6>
    1010:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1014:	88 23       	and	r24, r24
    1016:	a1 f0       	breq	.+40     	; 0x1040 <moist_thres_func+0xb6>
		p_func = menu_func;
    1018:	80 e6       	ldi	r24, 0x60	; 96
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1020:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PCD8544_Clear();
    1024:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
    1028:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    102c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	09 95       	icall
		rotenc_press_old = 0;
    1036:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		func_item = 0;
    103a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
		return;
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <moist_thres_func+0xbc>
	}
	rotenc_press_old = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	08 95       	ret

00001054 <pump_day_func>:
	}
	rotenc_press_old = 1;
	
}

void pump_day_func(int8_t val, bool press){
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	d6 2e       	mov	r13, r22
	
	int8_t i;
	if (val){
    1064:	88 23       	and	r24, r24
    1066:	99 f0       	breq	.+38     	; 0x108e <pump_day_func+0x3a>
		func_item += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
    1068:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <func_item>
    106c:	89 0f       	add	r24, r25
		if (func_item < 0) {
    106e:	1a f0       	brmi	.+6      	; 0x1076 <pump_day_func+0x22>

void pump_day_func(int8_t val, bool press){
	
	int8_t i;
	if (val){
		func_item += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
    1070:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
    1074:	03 c0       	rjmp	.+6      	; 0x107c <pump_day_func+0x28>
		if (func_item < 0) {
			func_item = 7;
    1076:	87 e0       	ldi	r24, 0x07	; 7
    1078:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
		}
		func_item = func_item % 8;
    107c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <func_item>
    1080:	87 78       	andi	r24, 0x87	; 135
    1082:	1c f4       	brge	.+6      	; 0x108a <pump_day_func+0x36>
    1084:	81 50       	subi	r24, 0x01	; 1
    1086:	88 6f       	ori	r24, 0xF8	; 248
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
	}
	char pump_day = ((PUMP_DATA*)p_data)->pump_day.Reg;
    108e:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1092:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    1096:	d2 81       	ldd	r29, Z+2	; 0x02
	
	// plot
	PCD8544_PutTitle("pump day"); 
    1098:	8b ee       	ldi	r24, 0xEB	; 235
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_GotoXY(0, Y_ROW1);
    10a0:	6d e0       	ldi	r22, 0x0D	; 13
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	10 e0       	ldi	r17, 0x00	; 0
	for(i = 0 ; i < 8; i++){
		PCD8544_GotoXY(i*12, Y_ROW1);
		if(pump_day & (1 << i)){
    10ae:	ed 2e       	mov	r14, r29
    10b0:	f1 2c       	mov	r15, r1
	
	// plot
	PCD8544_PutTitle("pump day"); 
	PCD8544_GotoXY(0, Y_ROW1);
	for(i = 0 ; i < 8; i++){
		PCD8544_GotoXY(i*12, Y_ROW1);
    10b2:	6d e0       	ldi	r22, 0x0D	; 13
    10b4:	8c 2f       	mov	r24, r28
    10b6:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
		if(pump_day & (1 << i)){
    10ba:	c7 01       	movw	r24, r14
    10bc:	00 2e       	mov	r0, r16
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <pump_day_func+0x70>
    10c0:	95 95       	asr	r25
    10c2:	87 95       	ror	r24
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <pump_day_func+0x6c>
    10c8:	80 ff       	sbrs	r24, 0
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <pump_day_func+0x86>
			PCD8544_PutString("\x02 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	84 ef       	ldi	r24, 0xF4	; 244
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <pump_day_func+0x92>
			} else {
			PCD8544_PutString("\x01 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	87 ef       	ldi	r24, 0xF7	; 247
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    10e6:	0f 5f       	subi	r16, 0xFF	; 255
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	c4 5f       	subi	r28, 0xF4	; 244
	char pump_day = ((PUMP_DATA*)p_data)->pump_day.Reg;
	
	// plot
	PCD8544_PutTitle("pump day"); 
	PCD8544_GotoXY(0, Y_ROW1);
	for(i = 0 ; i < 8; i++){
    10ec:	c0 36       	cpi	r28, 0x60	; 96
    10ee:	09 f7       	brne	.-62     	; 0x10b2 <pump_day_func+0x5e>
			PCD8544_PutString("\x02 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
			} else {
			PCD8544_PutString("\x01 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
		}
	}
	PCD8544_GotoXY(0, Y_ROW2);
    10f0:	66 e1       	ldi	r22, 0x16	; 22
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
	PCD8544_PutString("M T W T F S S", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	8a ef       	ldi	r24, 0xFA	; 250
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	64 e0       	ldi	r22, 0x04	; 4
    1108:	85 ec       	ldi	r24, 0xC5	; 197
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	if(func_item != 7){
    1110:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <func_item>
    1114:	87 30       	cpi	r24, 0x07	; 7
    1116:	09 f4       	brne	.+2      	; 0x111a <pump_day_func+0xc6>
    1118:	60 c0       	rjmp	.+192    	; 0x11da <pump_day_func+0x186>
		PCD8544_PutSub("", PCD8544_Row3, PCD8544_Pixel_Clear);
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	63 e0       	ldi	r22, 0x03	; 3
    111e:	89 ef       	ldi	r24, 0xF9	; 249
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		PCD8544_GotoXY(func_item*2*PCD8544_CHAR5x7_WIDTH, Y_ROW3);
    1126:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <func_item>
    112a:	98 2f       	mov	r25, r24
    112c:	99 0f       	add	r25, r25
    112e:	89 0f       	add	r24, r25
    1130:	6f e1       	ldi	r22, 0x1F	; 31
    1132:	88 0f       	add	r24, r24
    1134:	88 0f       	add	r24, r24
    1136:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
		PCD8544_PutString("\x7D", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
		
		if(press && rotenc_press_old){
    1146:	dd 20       	and	r13, r13
    1148:	09 f4       	brne	.+2      	; 0x114c <pump_day_func+0xf8>
    114a:	6d c0       	rjmp	.+218    	; 0x1226 <pump_day_func+0x1d2>
    114c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <pump_day_func+0x102>
    1154:	68 c0       	rjmp	.+208    	; 0x1226 <pump_day_func+0x1d2>
			pump_day ^= 1 << func_item;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	7c 01       	movw	r14, r24
    115c:	00 90 72 02 	lds	r0, 0x0272	; 0x800272 <func_item>
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <pump_day_func+0x112>
    1162:	ee 0c       	add	r14, r14
    1164:	ff 1c       	adc	r15, r15
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <pump_day_func+0x10e>
    116a:	ed 26       	eor	r14, r29
			((PUMP_DATA*)p_data)->pump_day.Reg = pump_day;
    116c:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1170:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    1174:	e2 82       	std	Z+2, r14	; 0x02
			PCD8544_GotoXY(0, Y_ROW1);
    1176:	6d e0       	ldi	r22, 0x0D	; 13
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
    117e:	c0 e0       	ldi	r28, 0x00	; 0
    1180:	00 e0       	ldi	r16, 0x00	; 0
    1182:	10 e0       	ldi	r17, 0x00	; 0
			for(i = 0 ; i < 7; i++){
				PCD8544_GotoXY(i*12, Y_ROW1);
				if(pump_day & (1 << i)){
    1184:	f1 2c       	mov	r15, r1
		if(press && rotenc_press_old){
			pump_day ^= 1 << func_item;
			((PUMP_DATA*)p_data)->pump_day.Reg = pump_day;
			PCD8544_GotoXY(0, Y_ROW1);
			for(i = 0 ; i < 7; i++){
				PCD8544_GotoXY(i*12, Y_ROW1);
    1186:	6d e0       	ldi	r22, 0x0D	; 13
    1188:	8c 2f       	mov	r24, r28
    118a:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
				if(pump_day & (1 << i)){
    118e:	c7 01       	movw	r24, r14
    1190:	00 2e       	mov	r0, r16
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <pump_day_func+0x144>
    1194:	95 95       	asr	r25
    1196:	87 95       	ror	r24
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <pump_day_func+0x140>
    119c:	80 ff       	sbrs	r24, 0
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <pump_day_func+0x15a>
					PCD8544_PutString("\x02 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	84 ef       	ldi	r24, 0xF4	; 244
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <pump_day_func+0x166>
				} else {
					PCD8544_PutString("\x01 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	87 ef       	ldi	r24, 0xF7	; 247
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    11ba:	0f 5f       	subi	r16, 0xFF	; 255
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	c4 5f       	subi	r28, 0xF4	; 244
		
		if(press && rotenc_press_old){
			pump_day ^= 1 << func_item;
			((PUMP_DATA*)p_data)->pump_day.Reg = pump_day;
			PCD8544_GotoXY(0, Y_ROW1);
			for(i = 0 ; i < 7; i++){
    11c0:	c4 35       	cpi	r28, 0x54	; 84
    11c2:	09 f7       	brne	.-62     	; 0x1186 <pump_day_func+0x132>
					PCD8544_PutString("\x02 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
				} else {
					PCD8544_PutString("\x01 ", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
				}	
			}
			PCD8544_GotoXY(0, Y_ROW2);
    11c4:	66 e1       	ldi	r22, 0x16	; 22
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString("M T W T F S S", PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	8a ef       	ldi	r24, 0xFA	; 250
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    11d8:	26 c0       	rjmp	.+76     	; 0x1226 <pump_day_func+0x1d2>
		}
	} else {
		PCD8544_PutSub("", PCD8544_Row3, PCD8544_Pixel_Clear);
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	63 e0       	ldi	r22, 0x03	; 3
    11de:	89 ef       	ldi	r24, 0xF9	; 249
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	64 e0       	ldi	r22, 0x04	; 4
    11ea:	85 ec       	ldi	r24, 0xC5	; 197
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		if(press && rotenc_press_old){
    11f2:	dd 20       	and	r13, r13
    11f4:	c1 f0       	breq	.+48     	; 0x1226 <pump_day_func+0x1d2>
    11f6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    11fa:	88 23       	and	r24, r24
    11fc:	a1 f0       	breq	.+40     	; 0x1226 <pump_day_func+0x1d2>
			p_func = menu_func;
    11fe:	80 e6       	ldi	r24, 0x60	; 96
    1200:	95 e0       	ldi	r25, 0x05	; 5
    1202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			PCD8544_Clear();
    120a:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
			(*p_func)(0,0);
    120e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1212:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	09 95       	icall
			rotenc_press_old = 0;
    121c:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
			func_item = 0;
    1220:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
			return;	
    1224:	03 c0       	rjmp	.+6      	; 0x122c <pump_day_func+0x1d8>
		}
	}

rotenc_press_old = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	08 95       	ret

0000123c <pump_arm_func>:
	rotenc_press_old = 1;
	
	
}

void pump_arm_func(int8_t val, bool press){
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	d6 2f       	mov	r29, r22
	
	bool pump_arm = ((PUMP_DATA*)p_data)->pump_arm;
    1242:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1246:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    124a:	c1 85       	ldd	r28, Z+9	; 0x09
	
	if (val){
    124c:	88 23       	and	r24, r24
    124e:	19 f0       	breq	.+6      	; 0x1256 <pump_arm_func+0x1a>
		pump_arm = !pump_arm; 
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	c8 27       	eor	r28, r24
		((PUMP_DATA*)p_data)->pump_arm = pump_arm;
    1254:	c1 87       	std	Z+9, r28	; 0x09
	}

	// plot
	PCD8544_PutTitle("pump arm"); 
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("status: ", PCD8544_Row2, PCD8544_Pixel_Clear);
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	83 e1       	ldi	r24, 0x13	; 19
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	if(pump_arm){
    126a:	cc 23       	and	r28, r28
    126c:	39 f0       	breq	.+14     	; 0x127c <pump_arm_func+0x40>
		PCD8544_PutString("on", PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	8c e1       	ldi	r24, 0x1C	; 28
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <pump_arm_func+0x4c>
	} else {
		PCD8544_PutString("off", PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	8f e1       	ldi	r24, 0x1F	; 31
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
	}
	
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	64 e0       	ldi	r22, 0x04	; 4
    128c:	85 ec       	ldi	r24, 0xC5	; 197
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	if(press && rotenc_press_old){
    1294:	dd 23       	and	r29, r29
    1296:	c1 f0       	breq	.+48     	; 0x12c8 <pump_arm_func+0x8c>
    1298:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    129c:	88 23       	and	r24, r24
    129e:	a1 f0       	breq	.+40     	; 0x12c8 <pump_arm_func+0x8c>
			p_func = menu_func;
    12a0:	80 e6       	ldi	r24, 0x60	; 96
    12a2:	95 e0       	ldi	r25, 0x05	; 5
    12a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    12a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			PCD8544_Clear();
    12ac:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
			(*p_func)(0,0);
    12b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    12b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	09 95       	icall
			rotenc_press_old = 0;
    12be:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
			func_item = 0;
    12c2:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
			return;	
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <pump_arm_func+0x92>
		}
		
	rotenc_press_old = 1;	
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <moist_arm_func>:
		return;
	}	
	rotenc_press_old = 1;
}

void moist_arm_func(int8_t val, bool press){
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	d6 2f       	mov	r29, r22
	
	bool pump_arm = ((MOIST_SENSOR_DATA*)p_data)->moist_sensor_arm;
    12da:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    12de:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    12e2:	c5 81       	ldd	r28, Z+5	; 0x05
	
	if (val){
    12e4:	88 23       	and	r24, r24
    12e6:	19 f0       	breq	.+6      	; 0x12ee <moist_arm_func+0x1a>
		pump_arm = !pump_arm;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	c8 27       	eor	r28, r24
		((MOIST_SENSOR_DATA*)p_data)->moist_sensor_arm = pump_arm;
    12ec:	c5 83       	std	Z+5, r28	; 0x05
	}

	// plot
	PCD8544_PutTitle("moist arm");
    12ee:	83 e2       	ldi	r24, 0x23	; 35
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("status: ", PCD8544_Row2, PCD8544_Pixel_Clear);
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	83 e1       	ldi	r24, 0x13	; 19
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	if(pump_arm){
    1302:	cc 23       	and	r28, r28
    1304:	39 f0       	breq	.+14     	; 0x1314 <moist_arm_func+0x40>
		PCD8544_PutString("on", PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	8c e1       	ldi	r24, 0x1C	; 28
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <moist_arm_func+0x4c>
		} else {
		PCD8544_PutString("off", PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	8f e1       	ldi	r24, 0x1F	; 31
    131a:	92 e0       	ldi	r25, 0x02	; 2
    131c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
	}
	
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	64 e0       	ldi	r22, 0x04	; 4
    1324:	85 ec       	ldi	r24, 0xC5	; 197
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	if(press && rotenc_press_old){
    132c:	dd 23       	and	r29, r29
    132e:	c1 f0       	breq	.+48     	; 0x1360 <moist_arm_func+0x8c>
    1330:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1334:	88 23       	and	r24, r24
    1336:	a1 f0       	breq	.+40     	; 0x1360 <moist_arm_func+0x8c>
		p_func = menu_func;
    1338:	80 e6       	ldi	r24, 0x60	; 96
    133a:	95 e0       	ldi	r25, 0x05	; 5
    133c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1340:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PCD8544_Clear();
    1344:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
    1348:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    134c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	09 95       	icall
		rotenc_press_old = 0;
    1356:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		func_item = 0;
    135a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
		return;
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <moist_arm_func+0x92>
	}
	
	rotenc_press_old = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <time_func>:
		return;
	}
	rotenc_press_old = 1;
};

void time_func(int8_t val, bool press){
    136c:	cf 93       	push	r28
    136e:	c6 2f       	mov	r28, r22
	
	if(rotenc_press_old == 0){
    1370:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1374:	81 11       	cpse	r24, r1
    1376:	02 c0       	rjmp	.+4      	; 0x137c <time_func+0x10>
		PCD8544_Clear();
    1378:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
	}
	
	// print Menu Title
	PCD8544_PutTitle("Time");
    137c:	8d e2       	ldi	r24, 0x2D	; 45
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	82 e3       	ldi	r24, 0x32	; 50
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	88 e3       	ldi	r24, 0x38	; 56
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	63 e0       	ldi	r22, 0x03	; 3
    13a0:	8e e3       	ldi	r24, 0x3E	; 62
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	64 e0       	ldi	r22, 0x04	; 4
    13ac:	85 ec       	ldi	r24, 0xC5	; 197
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	PCD8544_GotoXY(X_ROW1+25, Y_ROW1); show_time();
    13b4:	6d e0       	ldi	r22, 0x0D	; 13
    13b6:	87 e2       	ldi	r24, 0x27	; 39
    13b8:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
    13bc:	0e 94 3f 1a 	call	0x347e	; 0x347e <show_time>
	PCD8544_GotoXY(X_ROW2+25, Y_ROW2); show_date();
    13c0:	66 e1       	ldi	r22, 0x16	; 22
    13c2:	87 e2       	ldi	r24, 0x27	; 39
    13c4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
    13c8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <show_date>
	PCD8544_GotoXY(X_ROW3+25, Y_ROW3); PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    13cc:	6f e1       	ldi	r22, 0x1F	; 31
    13ce:	87 e2       	ldi	r24, 0x27	; 39
    13d0:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
    13d4:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	8b 5a       	subi	r24, 0xAB	; 171
    13e8:	9e 4f       	sbci	r25, 0xFE	; 254
    13ea:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
	PCD8544_Refresh();
    13ee:	0e 94 44 12 	call	0x2488	; 0x2488 <PCD8544_Refresh>
	
	if (press && rotenc_press_old){
    13f2:	cc 23       	and	r28, r28
    13f4:	c1 f0       	breq	.+48     	; 0x1426 <time_func+0xba>
    13f6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    13fa:	88 23       	and	r24, r24
    13fc:	a1 f0       	breq	.+40     	; 0x1426 <time_func+0xba>
		p_func = menu_func;
    13fe:	80 e6       	ldi	r24, 0x60	; 96
    1400:	95 e0       	ldi	r25, 0x05	; 5
    1402:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1406:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PCD8544_Clear();
    140a:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		rotenc_press_old = 0;
    140e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		rotenc_press = 0;
    1412:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <rotenc_press>
		(*p_func)(0,0);
    1416:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    141a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	09 95       	icall
		return;
    1424:	03 c0       	rjmp	.+6      	; 0x142c <time_func+0xc0>
	}
	rotenc_press_old = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <pump_time_func>:

void pump_time_func(int8_t val, bool press) {
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	c8 2f       	mov	r28, r24
    1436:	d6 2f       	mov	r29, r22
	
	if(rotenc_press_old == 0){
    1438:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    143c:	81 11       	cpse	r24, r1
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <pump_time_func+0x14>
			PCD8544_Clear();	
    1440:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
	}

	int8_t temp = 0;

	// If rot-enc was turned:
	if (val && !func_setting_active){
    1444:	cc 23       	and	r28, r28
    1446:	e1 f0       	breq	.+56     	; 0x1480 <pump_time_func+0x50>
    1448:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    144c:	81 11       	cpse	r24, r1
    144e:	18 c0       	rjmp	.+48     	; 0x1480 <pump_time_func+0x50>
		func_item += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
    1450:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <func_item>
    1454:	8c 0f       	add	r24, r28
		if (func_item < 0) {
    1456:	1a f0       	brmi	.+6      	; 0x145e <pump_time_func+0x2e>

	int8_t temp = 0;

	// If rot-enc was turned:
	if (val && !func_setting_active){
		func_item += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
    1458:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <pump_time_func+0x34>
		if (func_item < 0) {
			func_item = 2;
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
		}
		func_item = func_item % 3;
    1464:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <func_item>
    1468:	86 e5       	ldi	r24, 0x56	; 86
    146a:	98 02       	muls	r25, r24
    146c:	81 2d       	mov	r24, r1
    146e:	11 24       	eor	r1, r1
    1470:	97 fd       	sbrc	r25, 7
    1472:	83 95       	inc	r24
    1474:	28 2f       	mov	r18, r24
    1476:	22 0f       	add	r18, r18
    1478:	82 0f       	add	r24, r18
    147a:	98 1b       	sub	r25, r24
    147c:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <func_item>
	} 
	
	// print Menu Title
	PCD8544_PutTitle("set time");	
    1480:	83 e4       	ldi	r24, 0x43	; 67
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>

	switch (func_item) {
    1488:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <func_item>
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	09 f4       	brne	.+2      	; 0x1492 <pump_time_func+0x62>
    1490:	6a c0       	rjmp	.+212    	; 0x1566 <pump_time_func+0x136>
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	09 f4       	brne	.+2      	; 0x1498 <pump_time_func+0x68>
    1496:	c3 c0       	rjmp	.+390    	; 0x161e <pump_time_func+0x1ee>
    1498:	81 11       	cpse	r24, r1
    149a:	fe c0       	rjmp	.+508    	; 0x1698 <pump_time_func+0x268>
		case 0: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    149c:	dd 23       	and	r29, r29
    149e:	29 f0       	breq	.+10     	; 0x14aa <pump_time_func+0x7a>
    14a0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    14a4:	81 11       	cpse	r24, r1
    14a6:	fc c0       	rjmp	.+504    	; 0x16a0 <pump_time_func+0x270>
    14a8:	38 c0       	rjmp	.+112    	; 0x151a <pump_time_func+0xea>
    14aa:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    14ae:	88 23       	and	r24, r24
    14b0:	a1 f1       	breq	.+104    	; 0x151a <pump_time_func+0xea>
    14b2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    14b6:	88 23       	and	r24, r24
    14b8:	81 f1       	breq	.+96     	; 0x151a <pump_time_func+0xea>
					func_setting = ((PUMP_DATA*)(p_data))->pump_hour;
    14ba:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    14be:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    14c2:	80 81       	ld	r24, Z
    14c4:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
	
				if(val){
    14c8:	cc 23       	and	r28, r28
    14ca:	21 f1       	breq	.+72     	; 0x1514 <pump_time_func+0xe4>
					func_setting += val;
    14cc:	c8 0f       	add	r28, r24
					if(func_setting < 0){ func_setting = 23;}
    14ce:	1a f0       	brmi	.+6      	; 0x14d6 <pump_time_func+0xa6>

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
					func_setting = ((PUMP_DATA*)(p_data))->pump_hour;
	
				if(val){
					func_setting += val;
    14d0:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <pump_time_func+0xac>
					if(func_setting < 0){ func_setting = 23;}
    14d6:	87 e1       	ldi	r24, 0x17	; 23
    14d8:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					func_setting = func_setting % 24;
    14dc:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <func_setting>
    14e0:	8b e2       	ldi	r24, 0x2B	; 43
    14e2:	98 02       	muls	r25, r24
    14e4:	81 2d       	mov	r24, r1
    14e6:	11 24       	eor	r1, r1
    14e8:	85 95       	asr	r24
    14ea:	85 95       	asr	r24
    14ec:	97 fd       	sbrc	r25, 7
    14ee:	83 95       	inc	r24
    14f0:	28 e1       	ldi	r18, 0x18	; 24
    14f2:	82 9f       	mul	r24, r18
    14f4:	90 19       	sub	r25, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <func_setting>
					((PUMP_DATA*)(p_data))->pump_hour = func_setting;
    14fc:	90 83       	st	Z, r25
				}
				if (press && func_setting_active) {
    14fe:	dd 23       	and	r29, r29
    1500:	49 f0       	breq	.+18     	; 0x1514 <pump_time_func+0xe4>
    1502:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1506:	88 23       	and	r24, r24
    1508:	29 f0       	breq	.+10     	; 0x1514 <pump_time_func+0xe4>
					func_setting_active = false;
    150a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    150e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    1512:	c2 c0       	rjmp	.+388    	; 0x1698 <pump_time_func+0x268>
				}
				func_setting_active = true;	
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
		
		// plot	
		PCD8544_PutSub("Time:", PCD8544_Row2, PCD8544_Pixel_Clear);
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	82 e3       	ldi	r24, 0x32	; 50
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		PCD8544_GotoXY(X_ROW2+25, Y_ROW2);
    1526:	66 e1       	ldi	r22, 0x16	; 22
    1528:	87 e2       	ldi	r24, 0x27	; 39
    152a:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
		show_2digit_number(((PUMP_DATA*)(p_data))->pump_hour , PCD8544_Pixel_Set);
    152e:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1532:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	80 81       	ld	r24, Z
    153a:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
		PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	61 e0       	ldi	r22, 0x01	; 1
    1542:	8a e3       	ldi	r24, 0x3A	; 58
    1544:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
		show_2digit_number(((PUMP_DATA*)(p_data))->pump_min , PCD8544_Pixel_Clear);
    1548:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    154c:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	81 81       	ldd	r24, Z+1	; 0x01
    1554:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
		PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);		
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	64 e0       	ldi	r22, 0x04	; 4
    155c:	85 ec       	ldi	r24, 0xC5	; 197
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		break;
    1564:	99 c0       	rjmp	.+306    	; 0x1698 <pump_time_func+0x268>
		}
		case 1: {
			
			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    1566:	dd 23       	and	r29, r29
    1568:	29 f0       	breq	.+10     	; 0x1574 <pump_time_func+0x144>
    156a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    156e:	81 11       	cpse	r24, r1
    1570:	a1 c0       	rjmp	.+322    	; 0x16b4 <pump_time_func+0x284>
    1572:	2f c0       	rjmp	.+94     	; 0x15d2 <pump_time_func+0x1a2>
    1574:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1578:	88 23       	and	r24, r24
    157a:	59 f1       	breq	.+86     	; 0x15d2 <pump_time_func+0x1a2>
    157c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1580:	88 23       	and	r24, r24
    1582:	39 f1       	breq	.+78     	; 0x15d2 <pump_time_func+0x1a2>
					func_setting = ((PUMP_DATA*)(p_data))->pump_min;
    1584:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1588:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    158c:	81 81       	ldd	r24, Z+1	; 0x01
    158e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    1592:	cc 23       	and	r28, r28
    1594:	d9 f0       	breq	.+54     	; 0x15cc <pump_time_func+0x19c>
					func_setting += val;
    1596:	c8 0f       	add	r28, r24
					if(func_setting < 0){ func_setting = 59;}
    1598:	1a f0       	brmi	.+6      	; 0x15a0 <pump_time_func+0x170>
			
			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
					func_setting = ((PUMP_DATA*)(p_data))->pump_min;
				
				if(val){
					func_setting += val;
    159a:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <pump_time_func+0x176>
					if(func_setting < 0){ func_setting = 59;}
    15a0:	8b e3       	ldi	r24, 0x3B	; 59
    15a2:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					func_setting = func_setting % 60;
    15a6:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <func_setting>
    15aa:	6c e3       	ldi	r22, 0x3C	; 60
    15ac:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__divmodqi4>
    15b0:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <func_setting>
					((PUMP_DATA*)(p_data))->pump_min = func_setting;
    15b4:	91 83       	std	Z+1, r25	; 0x01
				}
				if (press && func_setting_active) {
    15b6:	dd 23       	and	r29, r29
    15b8:	49 f0       	breq	.+18     	; 0x15cc <pump_time_func+0x19c>
    15ba:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    15be:	88 23       	and	r24, r24
    15c0:	29 f0       	breq	.+10     	; 0x15cc <pump_time_func+0x19c>
					func_setting_active = false;
    15c2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    15c6:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    15ca:	66 c0       	rjmp	.+204    	; 0x1698 <pump_time_func+0x268>
				}
				func_setting_active = true;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
		
		// plot
		PCD8544_PutSub("Time:", PCD8544_Row2, PCD8544_Pixel_Clear);
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	62 e0       	ldi	r22, 0x02	; 2
    15d6:	82 e3       	ldi	r24, 0x32	; 50
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		PCD8544_GotoXY(X_ROW2+25, Y_ROW2);
    15de:	66 e1       	ldi	r22, 0x16	; 22
    15e0:	87 e2       	ldi	r24, 0x27	; 39
    15e2:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
		show_2digit_number(((PUMP_DATA*)(p_data))->pump_hour , PCD8544_Pixel_Clear);
    15e6:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    15ea:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
		PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    15f6:	41 e0       	ldi	r20, 0x01	; 1
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	8a e3       	ldi	r24, 0x3A	; 58
    15fc:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
		show_2digit_number(((PUMP_DATA*)(p_data))->pump_min , PCD8544_Pixel_Set);
    1600:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1604:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	81 81       	ldd	r24, Z+1	; 0x01
    160c:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
		PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	64 e0       	ldi	r22, 0x04	; 4
    1614:	85 ec       	ldi	r24, 0xC5	; 197
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
		break;
    161c:	3d c0       	rjmp	.+122    	; 0x1698 <pump_time_func+0x268>
		}
		
		case 2: {
			// plot
			PCD8544_PutSub("Time:", PCD8544_Row2, PCD8544_Pixel_Clear);
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	82 e3       	ldi	r24, 0x32	; 50
    1624:	92 e0       	ldi	r25, 0x02	; 2
    1626:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2);
    162a:	66 e1       	ldi	r22, 0x16	; 22
    162c:	87 e2       	ldi	r24, 0x27	; 39
    162e:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(((PUMP_DATA*)(p_data))->pump_hour , PCD8544_Pixel_Clear);
    1632:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1636:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	8a e3       	ldi	r24, 0x3A	; 58
    1648:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(((PUMP_DATA*)(p_data))->pump_min , PCD8544_Pixel_Clear);
    164c:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    1650:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	81 81       	ldd	r24, Z+1	; 0x01
    1658:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	64 e0       	ldi	r22, 0x04	; 4
    1660:	85 ec       	ldi	r24, 0xC5	; 197
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			
			if (press && rotenc_press_old){
    1668:	dd 23       	and	r29, r29
    166a:	b1 f0       	breq	.+44     	; 0x1698 <pump_time_func+0x268>
    166c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1670:	88 23       	and	r24, r24
    1672:	91 f0       	breq	.+36     	; 0x1698 <pump_time_func+0x268>
				p_func = menu_func;
    1674:	80 e6       	ldi	r24, 0x60	; 96
    1676:	95 e0       	ldi	r25, 0x05	; 5
    1678:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    167c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				PCD8544_Clear();
    1680:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
				(*p_func)(0,0);
    1684:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1688:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	09 95       	icall
				rotenc_press_old = 0;
    1692:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
				return;
    1696:	18 c0       	rjmp	.+48     	; 0x16c8 <pump_time_func+0x298>
			}		
		break;
		}				
	}
	rotenc_press_old = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <pump_time_func+0x298>

	switch (func_item) {
		case 0: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
					func_setting = ((PUMP_DATA*)(p_data))->pump_hour;
    16a0:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    16a4:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    16a8:	80 81       	ld	r24, Z
    16aa:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
	
				if(val){
    16ae:	c1 11       	cpse	r28, r1
    16b0:	0d cf       	rjmp	.-486    	; 0x14cc <pump_time_func+0x9c>
    16b2:	27 cf       	rjmp	.-434    	; 0x1502 <pump_time_func+0xd2>
		break;
		}
		case 1: {
			
			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
					func_setting = ((PUMP_DATA*)(p_data))->pump_min;
    16b4:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    16b8:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    16c2:	c1 11       	cpse	r28, r1
    16c4:	68 cf       	rjmp	.-304    	; 0x1596 <pump_time_func+0x166>
    16c6:	79 cf       	rjmp	.-270    	; 0x15ba <pump_time_func+0x18a>
		break;
		}				
	}
	rotenc_press_old = 1;
	
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <set_time_func>:

void set_time_func(int8_t val, bool press) {
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	c8 2f       	mov	r28, r24
    16d4:	d6 2f       	mov	r29, r22
	
	if(rotenc_press_old == 0){
    16d6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    16da:	81 11       	cpse	r24, r1
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <set_time_func+0x14>
		PCD8544_Clear();
    16de:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
	}

	int8_t temp = 0;

	// If rot-enc was turned:
	if (val && !func_setting_active){
    16e2:	cc 23       	and	r28, r28
    16e4:	09 f1       	breq	.+66     	; 0x1728 <set_time_func+0x5a>
    16e6:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    16ea:	81 11       	cpse	r24, r1
    16ec:	1d c0       	rjmp	.+58     	; 0x1728 <set_time_func+0x5a>
		func_item += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
    16ee:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <func_item>
    16f2:	8c 0f       	add	r24, r28
		if (func_item < 0) {
    16f4:	1a f0       	brmi	.+6      	; 0x16fc <set_time_func+0x2e>

	int8_t temp = 0;

	// If rot-enc was turned:
	if (val && !func_setting_active){
		func_item += val ;	// val contains the number of pos changes of rot enc. The currently selected item (func_item) is updated by this value
    16f6:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <set_time_func+0x34>
		if (func_item < 0) {
			func_item = 6;
    16fc:	86 e0       	ldi	r24, 0x06	; 6
    16fe:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <func_item>
		}
		func_item = func_item % 7;
    1702:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <func_item>
    1706:	83 e9       	ldi	r24, 0x93	; 147
    1708:	98 02       	muls	r25, r24
    170a:	81 2d       	mov	r24, r1
    170c:	11 24       	eor	r1, r1
    170e:	89 0f       	add	r24, r25
    1710:	85 95       	asr	r24
    1712:	85 95       	asr	r24
    1714:	97 fd       	sbrc	r25, 7
    1716:	83 95       	inc	r24
    1718:	28 2f       	mov	r18, r24
    171a:	22 0f       	add	r18, r18
    171c:	22 0f       	add	r18, r18
    171e:	22 0f       	add	r18, r18
    1720:	28 1b       	sub	r18, r24
    1722:	92 1b       	sub	r25, r18
    1724:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <func_item>
	}
	

	

	switch (func_item) {
    1728:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <func_item>
    172c:	8e 2f       	mov	r24, r30
    172e:	ee 0f       	add	r30, r30
    1730:	99 0b       	sbc	r25, r25
    1732:	aa 0b       	sbc	r26, r26
    1734:	bb 0b       	sbc	r27, r27
    1736:	87 30       	cpi	r24, 0x07	; 7
    1738:	91 05       	cpc	r25, r1
    173a:	08 f0       	brcs	.+2      	; 0x173e <set_time_func+0x70>
    173c:	52 c4       	rjmp	.+2212   	; 0x1fe2 <set_time_func+0x914>
    173e:	fc 01       	movw	r30, r24
    1740:	ec 5c       	subi	r30, 0xCC	; 204
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__tablejump2__>
		case 0: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    1748:	dd 23       	and	r29, r29
    174a:	29 f0       	breq	.+10     	; 0x1756 <set_time_func+0x88>
    174c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1750:	81 11       	cpse	r24, r1
    1752:	4b c4       	rjmp	.+2198   	; 0x1fea <set_time_func+0x91c>
    1754:	36 c0       	rjmp	.+108    	; 0x17c2 <set_time_func+0xf4>
    1756:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    175a:	88 23       	and	r24, r24
    175c:	91 f1       	breq	.+100    	; 0x17c2 <set_time_func+0xf4>
    175e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1762:	88 23       	and	r24, r24
    1764:	71 f1       	breq	.+92     	; 0x17c2 <set_time_func+0xf4>
				func_setting = gHOUR;
    1766:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    176a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    176e:	cc 23       	and	r28, r28
    1770:	29 f1       	breq	.+74     	; 0x17bc <set_time_func+0xee>
					func_setting += val;
    1772:	c8 0f       	add	r28, r24
					if(func_setting < 0){ func_setting = 23;}
    1774:	1a f0       	brmi	.+6      	; 0x177c <set_time_func+0xae>

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gHOUR;
				
				if(val){
					func_setting += val;
    1776:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <set_time_func+0xb4>
					if(func_setting < 0){ func_setting = 23;}
    177c:	87 e1       	ldi	r24, 0x17	; 23
    177e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					func_setting = func_setting % 24;
    1782:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <func_setting>
    1786:	8b e2       	ldi	r24, 0x2B	; 43
    1788:	98 02       	muls	r25, r24
    178a:	81 2d       	mov	r24, r1
    178c:	11 24       	eor	r1, r1
    178e:	85 95       	asr	r24
    1790:	85 95       	asr	r24
    1792:	97 fd       	sbrc	r25, 7
    1794:	83 95       	inc	r24
    1796:	28 e1       	ldi	r18, 0x18	; 24
    1798:	82 9f       	mul	r24, r18
    179a:	90 19       	sub	r25, r0
    179c:	11 24       	eor	r1, r1
    179e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <func_setting>
					gHOUR = func_setting;
    17a2:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <gHOUR>
				}
				if (press && func_setting_active) {
    17a6:	dd 23       	and	r29, r29
    17a8:	49 f0       	breq	.+18     	; 0x17bc <set_time_func+0xee>
    17aa:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    17ae:	88 23       	and	r24, r24
    17b0:	29 f0       	breq	.+10     	; 0x17bc <set_time_func+0xee>
					func_setting_active = false;
    17b2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    17b6:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    17ba:	13 c4       	rjmp	.+2086   	; 0x1fe2 <set_time_func+0x914>
				}
				func_setting_active = true;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
			
			// plot
				// print Menu Title
			PCD8544_PutTitle("set time");
    17c2:	83 e4       	ldi	r24, 0x43	; 67
    17c4:	92 e0       	ldi	r25, 0x02	; 2
    17c6:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	82 e3       	ldi	r24, 0x32	; 50
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	88 e3       	ldi	r24, 0x38	; 56
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	63 e0       	ldi	r22, 0x03	; 3
    17e6:	8e e3       	ldi	r24, 0x3E	; 62
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	64 e0       	ldi	r22, 0x04	; 4
    17f2:	85 ec       	ldi	r24, 0xC5	; 197
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    17fa:	6d e0       	ldi	r22, 0x0D	; 13
    17fc:	87 e2       	ldi	r24, 0x27	; 39
    17fe:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Set);
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1808:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	8a e3       	ldi	r24, 0x3A	; 58
    1812:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    181c:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1820:	66 e1       	ldi	r22, 0x16	; 22
    1822:	87 e2       	ldi	r24, 0x27	; 39
    1824:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    182e:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	8a e3       	ldi	r24, 0x3A	; 58
    1838:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1842:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	8a e3       	ldi	r24, 0x3A	; 58
    184c:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1856:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    185a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3);
    185e:	6f e1       	ldi	r22, 0x1F	; 31
    1860:	87 e2       	ldi	r24, 0x27	; 39
    1862:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1866:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	8b 5a       	subi	r24, 0xAB	; 171
    187a:	9e 4f       	sbci	r25, 0xFE	; 254
    187c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	85 ec       	ldi	r24, 0xC5	; 197
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			break;
    188c:	aa c3       	rjmp	.+1876   	; 0x1fe2 <set_time_func+0x914>
		}
		case 1: {
			
			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    188e:	dd 23       	and	r29, r29
    1890:	29 f0       	breq	.+10     	; 0x189c <set_time_func+0x1ce>
    1892:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1896:	81 11       	cpse	r24, r1
    1898:	af c3       	rjmp	.+1886   	; 0x1ff8 <set_time_func+0x92a>
    189a:	2d c0       	rjmp	.+90     	; 0x18f6 <set_time_func+0x228>
    189c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    18a0:	88 23       	and	r24, r24
    18a2:	49 f1       	breq	.+82     	; 0x18f6 <set_time_func+0x228>
    18a4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    18a8:	88 23       	and	r24, r24
    18aa:	29 f1       	breq	.+74     	; 0x18f6 <set_time_func+0x228>
				func_setting = gMINUTE;
    18ac:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    18b0:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    18b4:	cc 23       	and	r28, r28
    18b6:	e1 f0       	breq	.+56     	; 0x18f0 <set_time_func+0x222>
					func_setting += val;
    18b8:	c8 0f       	add	r28, r24
					if(func_setting < 0){ func_setting = 59;}
    18ba:	1a f0       	brmi	.+6      	; 0x18c2 <set_time_func+0x1f4>
			
			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gMINUTE;
				
				if(val){
					func_setting += val;
    18bc:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <set_time_func+0x1fa>
					if(func_setting < 0){ func_setting = 59;}
    18c2:	8b e3       	ldi	r24, 0x3B	; 59
    18c4:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					func_setting = func_setting % 60;
    18c8:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <func_setting>
    18cc:	6c e3       	ldi	r22, 0x3C	; 60
    18ce:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__divmodqi4>
    18d2:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <func_setting>
					gMINUTE = func_setting;
    18d6:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <gMINUTE>
				}
				if (press && func_setting_active) {
    18da:	dd 23       	and	r29, r29
    18dc:	49 f0       	breq	.+18     	; 0x18f0 <set_time_func+0x222>
    18de:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    18e2:	88 23       	and	r24, r24
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <set_time_func+0x222>
					func_setting_active = false;
    18e6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    18ea:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    18ee:	79 c3       	rjmp	.+1778   	; 0x1fe2 <set_time_func+0x914>
				}
				func_setting_active = true;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
			
			// plot
			PCD8544_PutTitle("set time");
    18f6:	83 e4       	ldi	r24, 0x43	; 67
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	82 e3       	ldi	r24, 0x32	; 50
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	62 e0       	ldi	r22, 0x02	; 2
    190e:	88 e3       	ldi	r24, 0x38	; 56
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	63 e0       	ldi	r22, 0x03	; 3
    191a:	8e e3       	ldi	r24, 0x3E	; 62
    191c:	92 e0       	ldi	r25, 0x02	; 2
    191e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	64 e0       	ldi	r22, 0x04	; 4
    1926:	85 ec       	ldi	r24, 0xC5	; 197
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    192e:	6d e0       	ldi	r22, 0x0D	; 13
    1930:	87 e2       	ldi	r24, 0x27	; 39
    1932:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Clear);
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    193c:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	8a e3       	ldi	r24, 0x3A	; 58
    1946:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE , PCD8544_Pixel_Set);
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1950:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1954:	66 e1       	ldi	r22, 0x16	; 22
    1956:	87 e2       	ldi	r24, 0x27	; 39
    1958:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    1962:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	8a e3       	ldi	r24, 0x3A	; 58
    196c:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1976:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	8a e3       	ldi	r24, 0x3A	; 58
    1980:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    198a:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    198e:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3);
    1992:	6f e1       	ldi	r22, 0x1F	; 31
    1994:	87 e2       	ldi	r24, 0x27	; 39
    1996:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    199a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	8b 5a       	subi	r24, 0xAB	; 171
    19ae:	9e 4f       	sbci	r25, 0xFE	; 254
    19b0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	64 e0       	ldi	r22, 0x04	; 4
    19b8:	85 ec       	ldi	r24, 0xC5	; 197
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			break;
    19c0:	10 c3       	rjmp	.+1568   	; 0x1fe2 <set_time_func+0x914>
		}
		
		case 2: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    19c2:	dd 23       	and	r29, r29
    19c4:	29 f0       	breq	.+10     	; 0x19d0 <set_time_func+0x302>
    19c6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    19ca:	81 11       	cpse	r24, r1
    19cc:	31 c3       	rjmp	.+1634   	; 0x2030 <set_time_func+0x962>
    19ce:	39 c0       	rjmp	.+114    	; 0x1a42 <set_time_func+0x374>
    19d0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    19d4:	88 23       	and	r24, r24
    19d6:	a9 f1       	breq	.+106    	; 0x1a42 <set_time_func+0x374>
    19d8:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    19dc:	81 11       	cpse	r24, r1
    19de:	38 c3       	rjmp	.+1648   	; 0x2050 <set_time_func+0x982>
    19e0:	30 c0       	rjmp	.+96     	; 0x1a42 <set_time_func+0x374>
				func_setting = gDAY;
				uint8_t length;
				length = month_length(gYEAR, (uint8_t)gMONTH);
				
				if(val){
					func_setting += val;
    19e2:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <func_setting>
    19e6:	c2 0f       	add	r28, r18
					if(func_setting < 1){ func_setting = length;}
    19e8:	1c 16       	cp	r1, r28
    19ea:	1c f4       	brge	.+6      	; 0x19f2 <set_time_func+0x324>
				func_setting = gDAY;
				uint8_t length;
				length = month_length(gYEAR, (uint8_t)gMONTH);
				
				if(val){
					func_setting += val;
    19ec:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <set_time_func+0x328>
					if(func_setting < 1){ func_setting = length;}
    19f2:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					func_setting = func_setting % (length+1);
    19f6:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <func_setting>
    19fa:	02 2e       	mov	r0, r18
    19fc:	00 0c       	add	r0, r0
    19fe:	33 0b       	sbc	r19, r19
    1a00:	bc 01       	movw	r22, r24
    1a02:	77 27       	eor	r23, r23
    1a04:	6f 5f       	subi	r22, 0xFF	; 255
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255
    1a08:	c9 01       	movw	r24, r18
    1a0a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__divmodhi4>
					if(func_setting == 0){func_setting = 1;}
    1a0e:	88 23       	and	r24, r24
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <set_time_func+0x34a>
				length = month_length(gYEAR, (uint8_t)gMONTH);
				
				if(val){
					func_setting += val;
					if(func_setting < 1){ func_setting = length;}
					func_setting = func_setting % (length+1);
    1a12:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <set_time_func+0x350>
					if(func_setting == 0){func_setting = 1;}
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					gDAY = func_setting;
    1a1e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <func_setting>
    1a22:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <gDAY>
				}
				if (press && func_setting_active) {
    1a26:	dd 23       	and	r29, r29
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <set_time_func+0x36e>
    1a2a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1a2e:	88 23       	and	r24, r24
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <set_time_func+0x36e>
					func_setting_active = false;
    1a32:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    1a36:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    1a3a:	d3 c2       	rjmp	.+1446   	; 0x1fe2 <set_time_func+0x914>
				}
				func_setting_active = true;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
			
			// plot
			PCD8544_PutTitle("set time");
    1a42:	83 e4       	ldi	r24, 0x43	; 67
    1a44:	92 e0       	ldi	r25, 0x02	; 2
    1a46:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	82 e3       	ldi	r24, 0x32	; 50
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	62 e0       	ldi	r22, 0x02	; 2
    1a5a:	88 e3       	ldi	r24, 0x38	; 56
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	8e e3       	ldi	r24, 0x3E	; 62
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	64 e0       	ldi	r22, 0x04	; 4
    1a72:	85 ec       	ldi	r24, 0xC5	; 197
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    1a7a:	6d e0       	ldi	r22, 0x0D	; 13
    1a7c:	87 e2       	ldi	r24, 0x27	; 39
    1a7e:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Clear);
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1a88:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	8a e3       	ldi	r24, 0x3A	; 58
    1a92:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1a9c:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1aa0:	66 e1       	ldi	r22, 0x16	; 22
    1aa2:	87 e2       	ldi	r24, 0x27	; 39
    1aa4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Set);
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    1aae:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	8a e3       	ldi	r24, 0x3A	; 58
    1ab8:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1ac2:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	8a e3       	ldi	r24, 0x3A	; 58
    1acc:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1ad6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    1ada:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3); 
    1ade:	6f e1       	ldi	r22, 0x1F	; 31
    1ae0:	87 e2       	ldi	r24, 0x27	; 39
    1ae2:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1ae6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	8b 5a       	subi	r24, 0xAB	; 171
    1afa:	9e 4f       	sbci	r25, 0xFE	; 254
    1afc:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	64 e0       	ldi	r22, 0x04	; 4
    1b04:	85 ec       	ldi	r24, 0xC5	; 197
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			break;
    1b0c:	6a c2       	rjmp	.+1236   	; 0x1fe2 <set_time_func+0x914>
		}
		
		case 3: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    1b0e:	dd 23       	and	r29, r29
    1b10:	29 f0       	breq	.+10     	; 0x1b1c <set_time_func+0x44e>
    1b12:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1b16:	81 11       	cpse	r24, r1
    1b18:	76 c2       	rjmp	.+1260   	; 0x2006 <set_time_func+0x938>
    1b1a:	3b c0       	rjmp	.+118    	; 0x1b92 <set_time_func+0x4c4>
    1b1c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1b20:	88 23       	and	r24, r24
    1b22:	b9 f1       	breq	.+110    	; 0x1b92 <set_time_func+0x4c4>
    1b24:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1b28:	88 23       	and	r24, r24
    1b2a:	99 f1       	breq	.+102    	; 0x1b92 <set_time_func+0x4c4>
				func_setting = gMONTH;
    1b2c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1b30:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    1b34:	cc 23       	and	r28, r28
    1b36:	51 f1       	breq	.+84     	; 0x1b8c <set_time_func+0x4be>
					func_setting += val;
    1b38:	c8 0f       	add	r28, r24
					if(func_setting < 1){ func_setting = 12;}
    1b3a:	1c 16       	cp	r1, r28
    1b3c:	24 f0       	brlt	.+8      	; 0x1b46 <set_time_func+0x478>
    1b3e:	8c e0       	ldi	r24, 0x0C	; 12
    1b40:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <set_time_func+0x4a0>
					func_setting = func_setting % (13);
    1b46:	8f e4       	ldi	r24, 0x4F	; 79
    1b48:	c8 02       	muls	r28, r24
    1b4a:	81 2d       	mov	r24, r1
    1b4c:	11 24       	eor	r1, r1
    1b4e:	85 95       	asr	r24
    1b50:	85 95       	asr	r24
    1b52:	c7 fd       	sbrc	r28, 7
    1b54:	83 95       	inc	r24
    1b56:	9d e0       	ldi	r25, 0x0D	; 13
    1b58:	89 9f       	mul	r24, r25
    1b5a:	c0 19       	sub	r28, r0
    1b5c:	11 24       	eor	r1, r1
					if(func_setting == 0){func_setting = 1;}
    1b5e:	cc 23       	and	r28, r28
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <set_time_func+0x49a>
				func_setting = gMONTH;
				
				if(val){
					func_setting += val;
					if(func_setting < 1){ func_setting = 12;}
					func_setting = func_setting % (13);
    1b62:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <set_time_func+0x4a0>
					if(func_setting == 0){func_setting = 1;}
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					gMONTH = func_setting;
    1b6e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <func_setting>
    1b72:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <gMONTH>
				}
				if (press && func_setting_active) {
    1b76:	dd 23       	and	r29, r29
    1b78:	49 f0       	breq	.+18     	; 0x1b8c <set_time_func+0x4be>
    1b7a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1b7e:	88 23       	and	r24, r24
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <set_time_func+0x4be>
					func_setting_active = false;
    1b82:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    1b86:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    1b8a:	2b c2       	rjmp	.+1110   	; 0x1fe2 <set_time_func+0x914>
				}
				func_setting_active = true;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
			
			// plot
			PCD8544_PutTitle("set time");
    1b92:	83 e4       	ldi	r24, 0x43	; 67
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	82 e3       	ldi	r24, 0x32	; 50
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	88 e3       	ldi	r24, 0x38	; 56
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	63 e0       	ldi	r22, 0x03	; 3
    1bb6:	8e e3       	ldi	r24, 0x3E	; 62
    1bb8:	92 e0       	ldi	r25, 0x02	; 2
    1bba:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	64 e0       	ldi	r22, 0x04	; 4
    1bc2:	85 ec       	ldi	r24, 0xC5	; 197
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    1bca:	6d e0       	ldi	r22, 0x0D	; 13
    1bcc:	87 e2       	ldi	r24, 0x27	; 39
    1bce:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Clear);
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1bd8:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	8a e3       	ldi	r24, 0x3A	; 58
    1be2:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1bec:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1bf0:	66 e1       	ldi	r22, 0x16	; 22
    1bf2:	87 e2       	ldi	r24, 0x27	; 39
    1bf4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    1bfe:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	61 e0       	ldi	r22, 0x01	; 1
    1c06:	8a e3       	ldi	r24, 0x3A	; 58
    1c08:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Set);
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1c12:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	8a e3       	ldi	r24, 0x3A	; 58
    1c1c:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1c26:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    1c2a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3); 
    1c2e:	6f e1       	ldi	r22, 0x1F	; 31
    1c30:	87 e2       	ldi	r24, 0x27	; 39
    1c32:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1c36:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	8b 5a       	subi	r24, 0xAB	; 171
    1c4a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c4c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	64 e0       	ldi	r22, 0x04	; 4
    1c54:	85 ec       	ldi	r24, 0xC5	; 197
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			break;
    1c5c:	c2 c1       	rjmp	.+900    	; 0x1fe2 <set_time_func+0x914>
		}
		
		case 4: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    1c5e:	dd 23       	and	r29, r29
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <set_time_func+0x59e>
    1c62:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1c66:	81 11       	cpse	r24, r1
    1c68:	d5 c1       	rjmp	.+938    	; 0x2014 <set_time_func+0x946>
    1c6a:	2e c0       	rjmp	.+92     	; 0x1cc8 <set_time_func+0x5fa>
    1c6c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1c70:	88 23       	and	r24, r24
    1c72:	51 f1       	breq	.+84     	; 0x1cc8 <set_time_func+0x5fa>
    1c74:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1c78:	88 23       	and	r24, r24
    1c7a:	31 f1       	breq	.+76     	; 0x1cc8 <set_time_func+0x5fa>
				func_setting = gYEAR;
    1c7c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1c80:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    1c84:	cc 23       	and	r28, r28
    1c86:	e9 f0       	breq	.+58     	; 0x1cc2 <set_time_func+0x5f4>
					func_setting += val;
    1c88:	c8 0f       	add	r28, r24
					if(func_setting < 1){ func_setting = 2000;}
    1c8a:	1c 16       	cp	r1, r28
    1c8c:	1c f4       	brge	.+6      	; 0x1c94 <set_time_func+0x5c6>

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gYEAR;
				
				if(val){
					func_setting += val;
    1c8e:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <set_time_func+0x5cc>
					if(func_setting < 1){ func_setting = 2000;}
    1c94:	80 ed       	ldi	r24, 0xD0	; 208
    1c96:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
						if(func_setting > 9999){ func_setting = 2000;}
					gYEAR = func_setting;
    1c9a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <func_setting>
    1c9e:	08 2e       	mov	r0, r24
    1ca0:	00 0c       	add	r0, r0
    1ca2:	99 0b       	sbc	r25, r25
    1ca4:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <gYEAR+0x1>
    1ca8:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <gYEAR>
				}
				if (press && func_setting_active) {
    1cac:	dd 23       	and	r29, r29
    1cae:	49 f0       	breq	.+18     	; 0x1cc2 <set_time_func+0x5f4>
    1cb0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1cb4:	88 23       	and	r24, r24
    1cb6:	29 f0       	breq	.+10     	; 0x1cc2 <set_time_func+0x5f4>
					func_setting_active = false;
    1cb8:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    1cbc:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    1cc0:	90 c1       	rjmp	.+800    	; 0x1fe2 <set_time_func+0x914>
				}
				func_setting_active = true;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
			
			// plot
			PCD8544_PutTitle("set time");
    1cc8:	83 e4       	ldi	r24, 0x43	; 67
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	82 e3       	ldi	r24, 0x32	; 50
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	88 e3       	ldi	r24, 0x38	; 56
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	63 e0       	ldi	r22, 0x03	; 3
    1cec:	8e e3       	ldi	r24, 0x3E	; 62
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	85 ec       	ldi	r24, 0xC5	; 197
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    1d00:	6d e0       	ldi	r22, 0x0D	; 13
    1d02:	87 e2       	ldi	r24, 0x27	; 39
    1d04:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Clear);
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1d0e:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	8a e3       	ldi	r24, 0x3A	; 58
    1d18:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1d22:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1d26:	66 e1       	ldi	r22, 0x16	; 22
    1d28:	87 e2       	ldi	r24, 0x27	; 39
    1d2a:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    1d34:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	8a e3       	ldi	r24, 0x3A	; 58
    1d3e:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1d48:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	8a e3       	ldi	r24, 0x3A	; 58
    1d52:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Set);
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1d5c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    1d60:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3); 
    1d64:	6f e1       	ldi	r22, 0x1F	; 31
    1d66:	87 e2       	ldi	r24, 0x27	; 39
    1d68:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1d6c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	8b 5a       	subi	r24, 0xAB	; 171
    1d80:	9e 4f       	sbci	r25, 0xFE	; 254
    1d82:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	64 e0       	ldi	r22, 0x04	; 4
    1d8a:	85 ec       	ldi	r24, 0xC5	; 197
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			break;
    1d92:	27 c1       	rjmp	.+590    	; 0x1fe2 <set_time_func+0x914>
		}
		
		case 5: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
    1d94:	dd 23       	and	r29, r29
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <set_time_func+0x6d4>
    1d98:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1d9c:	81 11       	cpse	r24, r1
    1d9e:	41 c1       	rjmp	.+642    	; 0x2022 <set_time_func+0x954>
    1da0:	39 c0       	rjmp	.+114    	; 0x1e14 <set_time_func+0x746>
    1da2:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1da6:	88 23       	and	r24, r24
    1da8:	a9 f1       	breq	.+106    	; 0x1e14 <set_time_func+0x746>
    1daa:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1dae:	88 23       	and	r24, r24
    1db0:	89 f1       	breq	.+98     	; 0x1e14 <set_time_func+0x746>
				func_setting = WeekDay;
    1db2:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    1db6:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    1dba:	cc 23       	and	r28, r28
    1dbc:	41 f1       	breq	.+80     	; 0x1e0e <set_time_func+0x740>
					func_setting += val;
    1dbe:	c8 0f       	add	r28, r24
					if(func_setting < 0){ func_setting = 6;}
    1dc0:	1a f0       	brmi	.+6      	; 0x1dc8 <set_time_func+0x6fa>

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = WeekDay;
				
				if(val){
					func_setting += val;
    1dc2:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <func_setting>
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <set_time_func+0x700>
					if(func_setting < 0){ func_setting = 6;}
    1dc8:	86 e0       	ldi	r24, 0x06	; 6
    1dca:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
					func_setting = func_setting % (7);
    1dce:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <func_setting>
    1dd2:	83 e9       	ldi	r24, 0x93	; 147
    1dd4:	98 02       	muls	r25, r24
    1dd6:	81 2d       	mov	r24, r1
    1dd8:	11 24       	eor	r1, r1
    1dda:	89 0f       	add	r24, r25
    1ddc:	85 95       	asr	r24
    1dde:	85 95       	asr	r24
    1de0:	97 fd       	sbrc	r25, 7
    1de2:	83 95       	inc	r24
    1de4:	28 2f       	mov	r18, r24
    1de6:	22 0f       	add	r18, r18
    1de8:	22 0f       	add	r18, r18
    1dea:	22 0f       	add	r18, r18
    1dec:	28 1b       	sub	r18, r24
    1dee:	92 1b       	sub	r25, r18
    1df0:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <func_setting>
					WeekDay = func_setting;
    1df4:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <WeekDay>
				}
				if (press && func_setting_active) {
    1df8:	dd 23       	and	r29, r29
    1dfa:	49 f0       	breq	.+18     	; 0x1e0e <set_time_func+0x740>
    1dfc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <func_setting_active>
    1e00:	88 23       	and	r24, r24
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <set_time_func+0x740>
					func_setting_active = false;
    1e04:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
					func_setting = 0;
    1e08:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <func_setting>
					break;
    1e0c:	ea c0       	rjmp	.+468    	; 0x1fe2 <set_time_func+0x914>
				}
				func_setting_active = true;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <func_setting_active>
			}
			
			// plot
			PCD8544_PutTitle("set time");
    1e14:	83 e4       	ldi	r24, 0x43	; 67
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	82 e3       	ldi	r24, 0x32	; 50
    1e22:	92 e0       	ldi	r25, 0x02	; 2
    1e24:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	88 e3       	ldi	r24, 0x38	; 56
    1e2e:	92 e0       	ldi	r25, 0x02	; 2
    1e30:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	8e e3       	ldi	r24, 0x3E	; 62
    1e3a:	92 e0       	ldi	r25, 0x02	; 2
    1e3c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	64 e0       	ldi	r22, 0x04	; 4
    1e44:	85 ec       	ldi	r24, 0xC5	; 197
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    1e4c:	6d e0       	ldi	r22, 0x0D	; 13
    1e4e:	87 e2       	ldi	r24, 0x27	; 39
    1e50:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Clear);
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1e5a:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	8a e3       	ldi	r24, 0x3A	; 58
    1e64:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1e6e:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1e72:	66 e1       	ldi	r22, 0x16	; 22
    1e74:	87 e2       	ldi	r24, 0x27	; 39
    1e76:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    1e80:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	8a e3       	ldi	r24, 0x3A	; 58
    1e8a:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1e94:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	8a e3       	ldi	r24, 0x3A	; 58
    1e9e:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1ea8:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    1eac:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3); 
    1eb0:	6f e1       	ldi	r22, 0x1F	; 31
    1eb2:	87 e2       	ldi	r24, 0x27	; 39
    1eb4:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1eb8:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	8b 5a       	subi	r24, 0xAB	; 171
    1ecc:	9e 4f       	sbci	r25, 0xFE	; 254
    1ece:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Clear);
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	85 ec       	ldi	r24, 0xC5	; 197
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			break;
    1ede:	81 c0       	rjmp	.+258    	; 0x1fe2 <set_time_func+0x914>
		}
		
		case 6: {
			// plot
			PCD8544_PutTitle("set time");
    1ee0:	83 e4       	ldi	r24, 0x43	; 67
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
			PCD8544_PutSub("Time:", PCD8544_Row1, PCD8544_Pixel_Clear);
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	82 e3       	ldi	r24, 0x32	; 50
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Date:", PCD8544_Row2, PCD8544_Pixel_Clear);
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	62 e0       	ldi	r22, 0x02	; 2
    1ef8:	88 e3       	ldi	r24, 0x38	; 56
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("Day:", PCD8544_Row3, PCD8544_Pixel_Clear);
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	63 e0       	ldi	r22, 0x03	; 3
    1f04:	8e e3       	ldi	r24, 0x3E	; 62
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	64 e0       	ldi	r22, 0x04	; 4
    1f10:	85 ec       	ldi	r24, 0xC5	; 197
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			PCD8544_GotoXY(X_ROW1+25, Y_ROW1);
    1f18:	6d e0       	ldi	r22, 0x0D	; 13
    1f1a:	87 e2       	ldi	r24, 0x27	; 39
    1f1c:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gHOUR , PCD8544_Pixel_Clear);
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1f26:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	61 e0       	ldi	r22, 0x01	; 1
    1f2e:	8a e3       	ldi	r24, 0x3A	; 58
    1f30:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1f3a:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_GotoXY(X_ROW2+25, Y_ROW2); 
    1f3e:	66 e1       	ldi	r22, 0x16	; 22
    1f40:	87 e2       	ldi	r24, 0x27	; 39
    1f42:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    1f4c:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	8a e3       	ldi	r24, 0x3A	; 58
    1f56:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    1f60:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
			PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	8a e3       	ldi	r24, 0x3A	; 58
    1f6a:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
			show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    1f74:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    1f78:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
			PCD8544_GotoXY(X_ROW3+25, Y_ROW3); 
    1f7c:	6f e1       	ldi	r22, 0x1F	; 31
    1f7e:	87 e2       	ldi	r24, 0x27	; 39
    1f80:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>
			PCD8544_PutString(WeekDay_s[WeekDay], PCD8544_Pixel_Clear, PCD8544_FontSize_3x5);
    1f84:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	8b 5a       	subi	r24, 0xAB	; 171
    1f98:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9a:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
			PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	64 e0       	ldi	r22, 0x04	; 4
    1fa2:	85 ec       	ldi	r24, 0xC5	; 197
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
			
			if (press && rotenc_press_old){
    1faa:	dd 23       	and	r29, r29
    1fac:	d1 f0       	breq	.+52     	; 0x1fe2 <set_time_func+0x914>
    1fae:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    1fb2:	88 23       	and	r24, r24
    1fb4:	b1 f0       	breq	.+44     	; 0x1fe2 <set_time_func+0x914>
				p_func = menu_func;
    1fb6:	80 e6       	ldi	r24, 0x60	; 96
    1fb8:	95 e0       	ldi	r25, 0x05	; 5
    1fba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1fbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				PCD8544_Clear();
    1fc2:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
				func_setting_active = 0;
    1fc6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <func_setting_active>
				rotenc_press_old = 0;
    1fca:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
				rotenc_press = 0;
    1fce:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <rotenc_press>
				(*p_func)(0,0);
    1fd2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1fd6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	09 95       	icall
				return;
    1fe0:	48 c0       	rjmp	.+144    	; 0x2072 <set_time_func+0x9a4>
			}
			break;
		}
	}
	rotenc_press_old = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
    1fe8:	44 c0       	rjmp	.+136    	; 0x2072 <set_time_func+0x9a4>

	switch (func_item) {
		case 0: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gHOUR;
    1fea:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    1fee:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    1ff2:	c1 11       	cpse	r28, r1
    1ff4:	be cb       	rjmp	.-2180   	; 0x1772 <set_time_func+0xa4>
    1ff6:	d9 cb       	rjmp	.-2126   	; 0x17aa <set_time_func+0xdc>
			break;
		}
		case 1: {
			
			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gMINUTE;
    1ff8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    1ffc:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    2000:	c1 11       	cpse	r28, r1
    2002:	5a cc       	rjmp	.-1868   	; 0x18b8 <set_time_func+0x1ea>
    2004:	6c cc       	rjmp	.-1832   	; 0x18de <set_time_func+0x210>
		}
		
		case 3: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gMONTH;
    2006:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    200a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    200e:	c1 11       	cpse	r28, r1
    2010:	93 cd       	rjmp	.-1242   	; 0x1b38 <set_time_func+0x46a>
    2012:	b3 cd       	rjmp	.-1178   	; 0x1b7a <set_time_func+0x4ac>
		}
		
		case 4: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gYEAR;
    2014:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    2018:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    201c:	c1 11       	cpse	r28, r1
    201e:	34 ce       	rjmp	.-920    	; 0x1c88 <set_time_func+0x5ba>
    2020:	47 ce       	rjmp	.-882    	; 0x1cb0 <set_time_func+0x5e2>
		}
		
		case 5: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = WeekDay;
    2022:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    2026:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				
				if(val){
    202a:	c1 11       	cpse	r28, r1
    202c:	c8 ce       	rjmp	.-624    	; 0x1dbe <set_time_func+0x6f0>
    202e:	e6 ce       	rjmp	.-564    	; 0x1dfc <set_time_func+0x72e>
		}
		
		case 2: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gDAY;
    2030:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    2034:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				uint8_t length;
				length = month_length(gYEAR, (uint8_t)gMONTH);
    2038:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <gMONTH>
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    2042:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    2046:	0e 94 3c 04 	call	0x878	; 0x878 <month_length>
				
				if(val){
    204a:	c1 11       	cpse	r28, r1
    204c:	ca cc       	rjmp	.-1644   	; 0x19e2 <set_time_func+0x314>
    204e:	ed cc       	rjmp	.-1574   	; 0x1a2a <set_time_func+0x35c>
		}
		
		case 2: {

			if ((press && rotenc_press_old) || (rotenc_press_old && func_setting_active)){
				func_setting = gDAY;
    2050:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    2054:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <func_setting>
				uint8_t length;
				length = month_length(gYEAR, (uint8_t)gMONTH);
    2058:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <gMONTH>
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    2062:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    2066:	0e 94 3c 04 	call	0x878	; 0x878 <month_length>
				
				if(val){
    206a:	cc 23       	and	r28, r28
    206c:	09 f4       	brne	.+2      	; 0x2070 <set_time_func+0x9a2>
    206e:	e6 cc       	rjmp	.-1588   	; 0x1a3c <set_time_func+0x36e>
    2070:	b8 cc       	rjmp	.-1680   	; 0x19e2 <set_time_func+0x314>
			break;
		}
	}
	rotenc_press_old = 1;
	
}
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	08 95       	ret

00002078 <moist_level_func>:
		}
		
	rotenc_press_old = 1;	
}

void moist_level_func(int8_t val, bool press){
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	c6 2f       	mov	r28, r22
	
	uint8_t sensor_nr;
	uint8_t moisture;
	float temp;
	sensor_nr = ((MOIST_SENSOR_DATA*)p_data)->moist_sensor_nr;
    207e:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    2082:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
	moisture = moist_sensor_read(sensor_nr);
    2086:	80 81       	ld	r24, Z
    2088:	0e 94 8a 11 	call	0x2314	; 0x2314 <moist_sensor_read>
    208c:	d8 2f       	mov	r29, r24
	
	// plot
	PCD8544_PutTitle("moist level");
    208e:	8c e4       	ldi	r24, 0x4C	; 76
    2090:	92 e0       	ldi	r25, 0x02	; 2
    2092:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	PCD8544_PutSub("level in %: ", PCD8544_Row2, PCD8544_Pixel_Clear);
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	88 e5       	ldi	r24, 0x58	; 88
    209c:	92 e0       	ldi	r25, 0x02	; 2
    209e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	show_4digit_number(moisture, PCD8544_Pixel_Clear);
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	8d 2f       	mov	r24, r29
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	64 e0       	ldi	r22, 0x04	; 4
    20b0:	85 ec       	ldi	r24, 0xC5	; 197
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	
	if(press && rotenc_press_old){
    20b8:	cc 23       	and	r28, r28
    20ba:	c1 f0       	breq	.+48     	; 0x20ec <moist_level_func+0x74>
    20bc:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    20c0:	88 23       	and	r24, r24
    20c2:	a1 f0       	breq	.+40     	; 0x20ec <moist_level_func+0x74>
		p_func = menu_func;
    20c4:	80 e6       	ldi	r24, 0x60	; 96
    20c6:	95 e0       	ldi	r25, 0x05	; 5
    20c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    20cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PCD8544_Clear();
    20d0:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
    20d4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    20d8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	09 95       	icall
		rotenc_press_old = 0;
    20e2:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		func_item = 0;
    20e6:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
		return;
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <moist_level_func+0x7a>
	}
	
	rotenc_press_old = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
	
	
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	08 95       	ret

000020f8 <moist_eeprom_func>:

void moist_eeprom_func(int8_t val, bool press){
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	16 2f       	mov	r17, r22
	
	PCD8544_SetArea(13, 33, 5, 75, PCD8544_Pixel_Clear);
    2106:	00 e0       	ldi	r16, 0x00	; 0
    2108:	2b e4       	ldi	r18, 0x4B	; 75
    210a:	45 e0       	ldi	r20, 0x05	; 5
    210c:	61 e2       	ldi	r22, 0x21	; 33
    210e:	8d e0       	ldi	r24, 0x0D	; 13
    2110:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_Refresh();
    2114:	0e 94 44 12 	call	0x2488	; 0x2488 <PCD8544_Refresh>
	uint16_t offset = 0;
	uint8_t data;
	int16_t idx;
	uint8_t i;
	uint16_t j;
	sensor_nr = ((MOIST_SENSOR_DATA*)p_data)->moist_sensor_nr;
    2118:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <p_data>
    211c:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <p_data+0x1>
    2120:	c0 81       	ld	r28, Z
	idx= eeprom_read_byte(&eeprom_idx);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <eeprom_read_byte>
    212a:	90 e0       	ldi	r25, 0x00	; 0
	
	
	if(idx > 70){offset = idx - 69;}
    212c:	87 34       	cpi	r24, 0x47	; 71
    212e:	91 05       	cpc	r25, r1
    2130:	1c f0       	brlt	.+6      	; 0x2138 <moist_eeprom_func+0x40>
    2132:	85 54       	subi	r24, 0x45	; 69
    2134:	91 09       	sbc	r25, r1
    2136:	02 c0       	rjmp	.+4      	; 0x213c <moist_eeprom_func+0x44>
void moist_eeprom_func(int8_t val, bool press){
	
	PCD8544_SetArea(13, 33, 5, 75, PCD8544_Pixel_Clear);
	PCD8544_Refresh();
	uint8_t sensor_nr;
	uint16_t offset = 0;
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	2c 2f       	mov	r18, r28
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	21 50       	subi	r18, 0x01	; 1
    2142:	31 09       	sbc	r19, r1
    2144:	46 e9       	ldi	r20, 0x96	; 150
    2146:	42 9f       	mul	r20, r18
    2148:	70 01       	movw	r14, r0
    214a:	43 9f       	mul	r20, r19
    214c:	f0 0c       	add	r15, r0
    214e:	11 24       	eor	r1, r1
    2150:	8e 0d       	add	r24, r14
    2152:	9f 1d       	adc	r25, r15
    2154:	9c 01       	movw	r18, r24
    2156:	2f 5f       	subi	r18, 0xFF	; 255
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	79 01       	movw	r14, r18
    215c:	c6 e0       	ldi	r28, 0x06	; 6
	
	for(i= 0; i < 70; i++){
		j = i + offset;
		data = eeprom_read_byte(&(eeprom_moisture_array[sensor_nr-1][j]));
		data =  (int) data * MOIST_FACTOR_PLOT;
		PCD8544_DrawLine(5+i+1, 33-data, 5+i+1, 33, PCD8544_Pixel_Set);
    215e:	d1 e2       	ldi	r29, 0x21	; 33
	
	if(idx > 70){offset = idx - 69;}
	
	for(i= 0; i < 70; i++){
		j = i + offset;
		data = eeprom_read_byte(&(eeprom_moisture_array[sensor_nr-1][j]));
    2160:	c7 01       	movw	r24, r14
    2162:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <eeprom_read_byte>
		data =  (int) data * MOIST_FACTOR_PLOT;
    2166:	68 2f       	mov	r22, r24
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 6f 1b 	call	0x36de	; 0x36de <__floatsisf>
    2172:	2d ec       	ldi	r18, 0xCD	; 205
    2174:	3c ec       	ldi	r19, 0xCC	; 204
    2176:	4c e4       	ldi	r20, 0x4C	; 76
    2178:	5e e3       	ldi	r21, 0x3E	; 62
    217a:	0e 94 1f 1c 	call	0x383e	; 0x383e <__mulsf3>
		PCD8544_DrawLine(5+i+1, 33-data, 5+i+1, 33, PCD8544_Pixel_Set);
    217e:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fixunssfsi>
    2182:	3d 2f       	mov	r19, r29
    2184:	36 1b       	sub	r19, r22
    2186:	63 2f       	mov	r22, r19
    2188:	01 e0       	ldi	r16, 0x01	; 1
    218a:	2d 2f       	mov	r18, r29
    218c:	4c 2f       	mov	r20, r28
    218e:	8c 2f       	mov	r24, r28
    2190:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	e8 1a       	sub	r14, r24
    2198:	f8 0a       	sbc	r15, r24
    219a:	cf 5f       	subi	r28, 0xFF	; 255
	idx= eeprom_read_byte(&eeprom_idx);
	
	
	if(idx > 70){offset = idx - 69;}
	
	for(i= 0; i < 70; i++){
    219c:	cc 34       	cpi	r28, 0x4C	; 76
    219e:	01 f7       	brne	.-64     	; 0x2160 <moist_eeprom_func+0x68>
		
	}
	
	
	// plot
	PCD8544_PutTitle("moist ee");
    21a0:	85 e6       	ldi	r24, 0x65	; 101
    21a2:	92 e0       	ldi	r25, 0x02	; 2
    21a4:	0e 94 79 15 	call	0x2af2	; 0x2af2 <PCD8544_PutTitle>
	
	//Draw coordinate system
	PCD8544_DrawLine(5, 33, 75, 33, PCD8544_Pixel_Set);
    21a8:	21 e2       	ldi	r18, 0x21	; 33
    21aa:	4b e4       	ldi	r20, 0x4B	; 75
    21ac:	61 e2       	ldi	r22, 0x21	; 33
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5, 13, 5, 33, PCD8544_Pixel_Set);
    21b4:	21 e2       	ldi	r18, 0x21	; 33
    21b6:	45 e0       	ldi	r20, 0x05	; 5
    21b8:	6d e0       	ldi	r22, 0x0D	; 13
    21ba:	85 e0       	ldi	r24, 0x05	; 5
    21bc:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	
	//Draw y label
	PCD8544_DrawLine(3, 13, 5, 13, PCD8544_Pixel_Set);
    21c0:	2d e0       	ldi	r18, 0x0D	; 13
    21c2:	45 e0       	ldi	r20, 0x05	; 5
    21c4:	6d e0       	ldi	r22, 0x0D	; 13
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(4, 13+5, 5, 13+5, PCD8544_Pixel_Set);
    21cc:	22 e1       	ldi	r18, 0x12	; 18
    21ce:	45 e0       	ldi	r20, 0x05	; 5
    21d0:	62 e1       	ldi	r22, 0x12	; 18
    21d2:	84 e0       	ldi	r24, 0x04	; 4
    21d4:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(3, 13+10, 5, 13+10, PCD8544_Pixel_Set);
    21d8:	27 e1       	ldi	r18, 0x17	; 23
    21da:	45 e0       	ldi	r20, 0x05	; 5
    21dc:	67 e1       	ldi	r22, 0x17	; 23
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(4, 13+15, 5, 13+15, PCD8544_Pixel_Set);
    21e4:	2c e1       	ldi	r18, 0x1C	; 28
    21e6:	45 e0       	ldi	r20, 0x05	; 5
    21e8:	6c e1       	ldi	r22, 0x1C	; 28
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(3, 13+20, 5, 13+20, PCD8544_Pixel_Set);
    21f0:	21 e2       	ldi	r18, 0x21	; 33
    21f2:	45 e0       	ldi	r20, 0x05	; 5
    21f4:	61 e2       	ldi	r22, 0x21	; 33
    21f6:	83 e0       	ldi	r24, 0x03	; 3
    21f8:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	
	//Draw x label
	PCD8544_DrawLine(5, 33, 5, 33, PCD8544_Pixel_Set);
    21fc:	21 e2       	ldi	r18, 0x21	; 33
    21fe:	45 e0       	ldi	r20, 0x05	; 5
    2200:	61 e2       	ldi	r22, 0x21	; 33
    2202:	85 e0       	ldi	r24, 0x05	; 5
    2204:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+7, 33, 5+7, 35, PCD8544_Pixel_Set);
    2208:	23 e2       	ldi	r18, 0x23	; 35
    220a:	4c e0       	ldi	r20, 0x0C	; 12
    220c:	61 e2       	ldi	r22, 0x21	; 33
    220e:	8c e0       	ldi	r24, 0x0C	; 12
    2210:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+14, 33, 5+14, 35, PCD8544_Pixel_Set);
    2214:	23 e2       	ldi	r18, 0x23	; 35
    2216:	43 e1       	ldi	r20, 0x13	; 19
    2218:	61 e2       	ldi	r22, 0x21	; 33
    221a:	83 e1       	ldi	r24, 0x13	; 19
    221c:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+21, 33, 5+21, 35, PCD8544_Pixel_Set);
    2220:	23 e2       	ldi	r18, 0x23	; 35
    2222:	4a e1       	ldi	r20, 0x1A	; 26
    2224:	61 e2       	ldi	r22, 0x21	; 33
    2226:	8a e1       	ldi	r24, 0x1A	; 26
    2228:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+28, 33, 5+28, 35, PCD8544_Pixel_Set);
    222c:	23 e2       	ldi	r18, 0x23	; 35
    222e:	41 e2       	ldi	r20, 0x21	; 33
    2230:	61 e2       	ldi	r22, 0x21	; 33
    2232:	81 e2       	ldi	r24, 0x21	; 33
    2234:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+35, 33, 5+35, 35, PCD8544_Pixel_Set);
    2238:	23 e2       	ldi	r18, 0x23	; 35
    223a:	48 e2       	ldi	r20, 0x28	; 40
    223c:	61 e2       	ldi	r22, 0x21	; 33
    223e:	88 e2       	ldi	r24, 0x28	; 40
    2240:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+42, 33, 5+42, 35, PCD8544_Pixel_Set);
    2244:	23 e2       	ldi	r18, 0x23	; 35
    2246:	4f e2       	ldi	r20, 0x2F	; 47
    2248:	61 e2       	ldi	r22, 0x21	; 33
    224a:	8f e2       	ldi	r24, 0x2F	; 47
    224c:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+49, 33, 5+49, 35, PCD8544_Pixel_Set);
    2250:	23 e2       	ldi	r18, 0x23	; 35
    2252:	46 e3       	ldi	r20, 0x36	; 54
    2254:	61 e2       	ldi	r22, 0x21	; 33
    2256:	86 e3       	ldi	r24, 0x36	; 54
    2258:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+56, 33, 5+56, 35, PCD8544_Pixel_Set);
    225c:	23 e2       	ldi	r18, 0x23	; 35
    225e:	4d e3       	ldi	r20, 0x3D	; 61
    2260:	61 e2       	ldi	r22, 0x21	; 33
    2262:	8d e3       	ldi	r24, 0x3D	; 61
    2264:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+63, 33, 5+63, 35, PCD8544_Pixel_Set);
    2268:	23 e2       	ldi	r18, 0x23	; 35
    226a:	44 e4       	ldi	r20, 0x44	; 68
    226c:	61 e2       	ldi	r22, 0x21	; 33
    226e:	84 e4       	ldi	r24, 0x44	; 68
    2270:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	PCD8544_DrawLine(5+70, 33, 5+70, 35, PCD8544_Pixel_Set);
    2274:	23 e2       	ldi	r18, 0x23	; 35
    2276:	4b e4       	ldi	r20, 0x4B	; 75
    2278:	61 e2       	ldi	r22, 0x21	; 33
    227a:	8b e4       	ldi	r24, 0x4B	; 75
    227c:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	
	PCD8544_PutSub("\x3C\x2D" "back", PCD8544_Row4, PCD8544_Pixel_Set);
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	64 e0       	ldi	r22, 0x04	; 4
    2284:	85 ec       	ldi	r24, 0xC5	; 197
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	0e 94 84 16 	call	0x2d08	; 0x2d08 <PCD8544_PutSub>
	
	
	if(press && rotenc_press_old){
    228c:	11 23       	and	r17, r17
    228e:	c1 f0       	breq	.+48     	; 0x22c0 <moist_eeprom_func+0x1c8>
    2290:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <rotenc_press_old>
    2294:	88 23       	and	r24, r24
    2296:	a1 f0       	breq	.+40     	; 0x22c0 <moist_eeprom_func+0x1c8>
		p_func = menu_func;
    2298:	80 e6       	ldi	r24, 0x60	; 96
    229a:	95 e0       	ldi	r25, 0x05	; 5
    229c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    22a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PCD8544_Clear();
    22a4:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
		(*p_func)(0,0);
    22a8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    22ac:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	09 95       	icall
		rotenc_press_old = 0;
    22b6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <rotenc_press_old>
		func_item = 0;
    22ba:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <func_item>
		return;
    22be:	03 c0       	rjmp	.+6      	; 0x22c6 <moist_eeprom_func+0x1ce>
	}
	rotenc_press_old = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <rotenc_press_old>
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	ef 90       	pop	r14
    22d2:	08 95       	ret

000022d4 <moist_sensor_init>:
uint8_t EEMEM eeprom_idx = 0;
bool moist_sensor_busy = false;

void moist_sensor_init(){
	
	SENSOR_DDR &= ~(1 << SENSOR1_PIN) & ~(1 << SENSOR2_PIN) & ~(1 << SENSOR3_PIN);	//set SENSOR Pins as inputs
    22d4:	87 b1       	in	r24, 0x07	; 7
    22d6:	87 7c       	andi	r24, 0xC7	; 199
    22d8:	87 b9       	out	0x07, r24	; 7
	SENSOR_PORT &= ~(1 << SENSOR1_PIN) & ~(1 << SENSOR2_PIN) & ~(1 << SENSOR3_PIN);	 //activate internal pullups
    22da:	88 b1       	in	r24, 0x08	; 8
    22dc:	87 7c       	andi	r24, 0xC7	; 199
    22de:	88 b9       	out	0x08, r24	; 8
	
	//ADC init
	ADMUX = (1 << REFS0);
    22e0:	80 e4       	ldi	r24, 0x40	; 64
    22e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0);
    22e6:	ea e7       	ldi	r30, 0x7A	; 122
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	85 60       	ori	r24, 0x05	; 5
    22ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
    22f0:	80 81       	ld	r24, Z
    22f2:	80 68       	ori	r24, 0x80	; 128
    22f4:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
    22f6:	80 81       	ld	r24, Z
    22f8:	80 64       	ori	r24, 0x40	; 64
    22fa:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)){
    22fc:	80 81       	ld	r24, Z
    22fe:	86 ff       	sbrs	r24, 6
    2300:	08 c0       	rjmp	.+16     	; 0x2312 <moist_sensor_init+0x3e>
		(void) ADC;
    2302:	a8 e7       	ldi	r26, 0x78	; 120
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	8d 91       	ld	r24, X+
    2308:	9c 91       	ld	r25, X
    230a:	11 97       	sbiw	r26, 0x01	; 1
	ADMUX = (1 << REFS0);
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0);
	ADCSRA |= (1 << ADEN);
	
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC)){
    230c:	80 81       	ld	r24, Z
    230e:	86 fd       	sbrc	r24, 6
    2310:	fa cf       	rjmp	.-12     	; 0x2306 <moist_sensor_init+0x32>
    2312:	08 95       	ret

00002314 <moist_sensor_read>:
// ADC single measurement, returns 10Bit value
uint8_t moist_sensor_read( uint8_t channel){
	uint16_t temp1;
	uint8_t  temp2;
	
	ADMUX = (ADMUX & ~(0x1F)) | ((channel+2) & 0x1F);
    2314:	ec e7       	ldi	r30, 0x7C	; 124
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	90 81       	ld	r25, Z
    231a:	8e 5f       	subi	r24, 0xFE	; 254
    231c:	8f 71       	andi	r24, 0x1F	; 31
    231e:	90 7e       	andi	r25, 0xE0	; 224
    2320:	98 2b       	or	r25, r24
    2322:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC);
    2324:	ea e7       	ldi	r30, 0x7A	; 122
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	80 64       	ori	r24, 0x40	; 64
    232c:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {   // wait for the conversion to finish
    232e:	80 81       	ld	r24, Z
    2330:	86 fd       	sbrc	r24, 6
    2332:	fd cf       	rjmp	.-6      	; 0x232e <moist_sensor_read+0x1a>
	}
	temp1 = ADC;
    2334:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2338:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	temp2 = (int)(temp1 * MOIST_FACTOR);
	
	return temp2;
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 6d 1b 	call	0x36da	; 0x36da <__floatunsisf>
    2344:	27 e2       	ldi	r18, 0x27	; 39
    2346:	31 e3       	ldi	r19, 0x31	; 49
    2348:	48 ec       	ldi	r20, 0xC8	; 200
    234a:	5d e3       	ldi	r21, 0x3D	; 61
    234c:	0e 94 1f 1c 	call	0x383e	; 0x383e <__mulsf3>
    2350:	0e 94 37 1b 	call	0x366e	; 0x366e <__fixsfsi>
    2354:	86 2f       	mov	r24, r22
	
}
    2356:	08 95       	ret

00002358 <moist_sensor_read_save>:

void moist_sensor_read_save(){
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
	uint8_t i;
	uint8_t idx;
	uint8_t temp2;
	if((gHOUR == 12) && (gMINUTE == 0) && (gSECOND == 1) && !(moist_sensor_busy) ){
    2360:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    2364:	8c 30       	cpi	r24, 0x0C	; 12
    2366:	c9 f5       	brne	.+114    	; 0x23da <moist_sensor_read_save+0x82>
    2368:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    236c:	81 11       	cpse	r24, r1
    236e:	35 c0       	rjmp	.+106    	; 0x23da <moist_sensor_read_save+0x82>
    2370:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	59 f5       	brne	.+86     	; 0x23ce <moist_sensor_read_save+0x76>
    2378:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <moist_sensor_busy>
    237c:	81 11       	cpse	r24, r1
    237e:	27 c0       	rjmp	.+78     	; 0x23ce <moist_sensor_read_save+0x76>
		moist_sensor_busy = true;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <moist_sensor_busy>
		idx = eeprom_read_byte(&eeprom_idx);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <eeprom_read_byte>
    238e:	d8 2f       	mov	r29, r24
    2390:	08 2f       	mov	r16, r24
    2392:	10 e0       	ldi	r17, 0x00	; 0
    2394:	0f 5f       	subi	r16, 0xFF	; 255
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i = 0; i <= 2; i++){
    2398:	c0 e0       	ldi	r28, 0x00	; 0
			
			temp2 = moist_sensor_read(i+1);
    239a:	cf 5f       	subi	r28, 0xFF	; 255
    239c:	8c 2f       	mov	r24, r28
    239e:	0e 94 8a 11 	call	0x2314	; 0x2314 <moist_sensor_read>
			eeprom_update_byte(&(eeprom_moisture_array[i][idx]), temp2);
    23a2:	68 2f       	mov	r22, r24
    23a4:	c8 01       	movw	r24, r16
    23a6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_update_byte>
    23aa:	0a 56       	subi	r16, 0x6A	; 106
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t idx;
	uint8_t temp2;
	if((gHOUR == 12) && (gMINUTE == 0) && (gSECOND == 1) && !(moist_sensor_busy) ){
		moist_sensor_busy = true;
		idx = eeprom_read_byte(&eeprom_idx);
		for(i = 0; i <= 2; i++){
    23ae:	c3 30       	cpi	r28, 0x03	; 3
    23b0:	a1 f7       	brne	.-24     	; 0x239a <moist_sensor_read_save+0x42>
			
			temp2 = moist_sensor_read(i+1);
			eeprom_update_byte(&(eeprom_moisture_array[i][idx]), temp2);
		}
		eeprom_write_byte(&eeprom_idx, idx+1);
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	6d 0f       	add	r22, r29
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <eeprom_write_byte>
	}
	
	if((gHOUR == 12) && (gMINUTE == 0) && (gSECOND == 2)){
    23be:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    23c2:	8c 30       	cpi	r24, 0x0C	; 12
    23c4:	51 f4       	brne	.+20     	; 0x23da <moist_sensor_read_save+0x82>
    23c6:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    23ca:	81 11       	cpse	r24, r1
    23cc:	06 c0       	rjmp	.+12     	; 0x23da <moist_sensor_read_save+0x82>
    23ce:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	11 f4       	brne	.+4      	; 0x23da <moist_sensor_read_save+0x82>
		moist_sensor_busy = false;
    23d6:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <moist_sensor_busy>
	}
	
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	08 95       	ret

000023e4 <PCD8544_InitIO>:
        PCD8544_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);

        PCD8544_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
        PCD8544_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
    }
}
    23e4:	20 9a       	sbi	0x04, 0	; 4
    23e6:	22 9a       	sbi	0x04, 2	; 4
    23e8:	57 9a       	sbi	0x0a, 7	; 10
    23ea:	21 9a       	sbi	0x04, 1	; 4
    23ec:	2a 9a       	sbi	0x05, 2	; 5
    23ee:	29 9a       	sbi	0x05, 1	; 5
    23f0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <spi_MasterInit>
    23f4:	08 95       	ret

000023f6 <PCD8544_send>:
    23f6:	2a 98       	cbi	0x05, 2	; 5
    23f8:	0e 94 d6 18 	call	0x31ac	; 0x31ac <spi_MasterTransmit>
    23fc:	2a 9a       	sbi	0x05, 2	; 5
    23fe:	08 95       	ret

00002400 <PCD8544_Delay>:
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	00 d0       	rcall	.+0      	; 0x2406 <PCD8544_Delay+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <PCD8544_Delay+0x8>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	ab 01       	movw	r20, r22
    240e:	bc 01       	movw	r22, r24
    2410:	19 82       	std	Y+1, r1	; 0x01
    2412:	1a 82       	std	Y+2, r1	; 0x02
    2414:	1b 82       	std	Y+3, r1	; 0x03
    2416:	1c 82       	std	Y+4, r1	; 0x04
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	ab 81       	ldd	r26, Y+3	; 0x03
    241e:	bc 81       	ldd	r27, Y+4	; 0x04
    2420:	84 17       	cp	r24, r20
    2422:	95 07       	cpc	r25, r21
    2424:	a6 07       	cpc	r26, r22
    2426:	b7 07       	cpc	r27, r23
    2428:	a0 f4       	brcc	.+40     	; 0x2452 <PCD8544_Delay+0x52>
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	ab 81       	ldd	r26, Y+3	; 0x03
    2430:	bc 81       	ldd	r27, Y+4	; 0x04
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	a1 1d       	adc	r26, r1
    2436:	b1 1d       	adc	r27, r1
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	ab 83       	std	Y+3, r26	; 0x03
    243e:	bc 83       	std	Y+4, r27	; 0x04
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	ab 81       	ldd	r26, Y+3	; 0x03
    2446:	bc 81       	ldd	r27, Y+4	; 0x04
    2448:	84 17       	cp	r24, r20
    244a:	95 07       	cpc	r25, r21
    244c:	a6 07       	cpc	r26, r22
    244e:	b7 07       	cpc	r27, r23
    2450:	60 f3       	brcs	.-40     	; 0x242a <PCD8544_Delay+0x2a>
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <PCD8544_Write>:
    2460:	88 23       	and	r24, r24
    2462:	21 f0       	breq	.+8      	; 0x246c <PCD8544_Write+0xc>
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	19 f4       	brne	.+6      	; 0x246e <PCD8544_Write+0xe>
    2468:	28 9a       	sbi	0x05, 0	; 5
    246a:	01 c0       	rjmp	.+2      	; 0x246e <PCD8544_Write+0xe>
    246c:	28 98       	cbi	0x05, 0	; 5
    246e:	86 2f       	mov	r24, r22
    2470:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <PCD8544_send>
    2474:	08 95       	ret

00002476 <PCD8544_Home>:
    2476:	60 e8       	ldi	r22, 0x80	; 128
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    247e:	60 e4       	ldi	r22, 0x40	; 64
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    2486:	08 95       	ret

00002488 <PCD8544_Refresh>:
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	c1 2c       	mov	r12, r1
    249a:	d1 2c       	mov	r13, r1
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	d0 e0       	ldi	r29, 0x00	; 0
    24a2:	79 01       	movw	r14, r18
    24a4:	88 e0       	ldi	r24, 0x08	; 8
    24a6:	e8 0e       	add	r14, r24
    24a8:	f1 1c       	adc	r15, r1
    24aa:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <PCD8544_UpdateYmin>
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	e8 16       	cp	r14, r24
    24b2:	f9 06       	cpc	r15, r25
    24b4:	34 f1       	brlt	.+76     	; 0x2502 <PCD8544_Refresh+0x7a>
    24b6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <PCD8544_UpdateYmax>
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	82 17       	cp	r24, r18
    24be:	93 07       	cpc	r25, r19
    24c0:	44 f1       	brlt	.+80     	; 0x2512 <PCD8544_Refresh+0x8a>
    24c2:	6d 2f       	mov	r22, r29
    24c4:	60 64       	ori	r22, 0x40	; 64
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    24cc:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <PCD8544_UpdateXmin>
    24d0:	60 68       	ori	r22, 0x80	; 128
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    24d8:	c0 91 7b 02 	lds	r28, 0x027B	; 0x80027b <PCD8544_UpdateXmin>
    24dc:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <PCD8544_UpdateXmax>
    24e0:	8c 17       	cp	r24, r28
    24e2:	78 f0       	brcs	.+30     	; 0x2502 <PCD8544_Refresh+0x7a>
    24e4:	86 01       	movw	r16, r12
    24e6:	09 57       	subi	r16, 0x79	; 121
    24e8:	1d 4f       	sbci	r17, 0xFD	; 253
    24ea:	f8 01       	movw	r30, r16
    24ec:	ec 0f       	add	r30, r28
    24ee:	f1 1d       	adc	r31, r1
    24f0:	60 81       	ld	r22, Z
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    24f8:	cf 5f       	subi	r28, 0xFF	; 255
    24fa:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <PCD8544_UpdateXmax>
    24fe:	8c 17       	cp	r24, r28
    2500:	a0 f7       	brcc	.-24     	; 0x24ea <PCD8544_Refresh+0x62>
    2502:	df 5f       	subi	r29, 0xFF	; 255
    2504:	84 e5       	ldi	r24, 0x54	; 84
    2506:	c8 0e       	add	r12, r24
    2508:	d1 1c       	adc	r13, r1
    250a:	97 01       	movw	r18, r14
    250c:	20 33       	cpi	r18, 0x30	; 48
    250e:	31 05       	cpc	r19, r1
    2510:	41 f6       	brne	.-112    	; 0x24a2 <PCD8544_Refresh+0x1a>
    2512:	83 e5       	ldi	r24, 0x53	; 83
    2514:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <PCD8544_UpdateXmin>
    2518:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <PCD8544_UpdateXmax>
    251c:	8f e2       	ldi	r24, 0x2F	; 47
    251e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <PCD8544_UpdateYmin>
    2522:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <PCD8544_UpdateYmax>
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	df 90       	pop	r13
    2534:	cf 90       	pop	r12
    2536:	08 95       	ret

00002538 <PCD8544_SetArea>:
    2538:	5f 92       	push	r5
    253a:	6f 92       	push	r6
    253c:	7f 92       	push	r7
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	30 ed       	ldi	r19, 0xD0	; 208
    2558:	36 0f       	add	r19, r22
    255a:	96 2f       	mov	r25, r22
    255c:	e1 2c       	mov	r14, r1
    255e:	f1 2c       	mov	r15, r1
    2560:	c8 e0       	ldi	r28, 0x08	; 8
    2562:	d0 e0       	ldi	r29, 0x00	; 0
    2564:	c8 2e       	mov	r12, r24
    2566:	d1 2c       	mov	r13, r1
    2568:	a6 2e       	mov	r10, r22
    256a:	b1 2c       	mov	r11, r1
    256c:	46 01       	movw	r8, r12
    256e:	58 e0       	ldi	r21, 0x08	; 8
    2570:	85 0e       	add	r8, r21
    2572:	91 1c       	adc	r9, r1
    2574:	0f 2e       	mov	r0, r31
    2576:	f7 e0       	ldi	r31, 0x07	; 7
    2578:	6f 2e       	mov	r6, r31
    257a:	f0 2d       	mov	r31, r0
    257c:	a1 e0       	ldi	r26, 0x01	; 1
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	78 2e       	mov	r7, r24
    2582:	76 1a       	sub	r7, r22
    2584:	cc 15       	cp	r28, r12
    2586:	dd 05       	cpc	r29, r13
    2588:	0c f4       	brge	.+2      	; 0x258c <PCD8544_SetArea+0x54>
    258a:	46 c0       	rjmp	.+140    	; 0x2618 <PCD8544_SetArea+0xe0>
    258c:	be 01       	movw	r22, r28
    258e:	68 50       	subi	r22, 0x08	; 8
    2590:	71 09       	sbc	r23, r1
    2592:	a6 16       	cp	r10, r22
    2594:	b7 06       	cpc	r11, r23
    2596:	0c f4       	brge	.+2      	; 0x259a <PCD8544_SetArea+0x62>
    2598:	4f c0       	rjmp	.+158    	; 0x2638 <PCD8544_SetArea+0x100>
    259a:	b4 01       	movw	r22, r8
    259c:	6c 1b       	sub	r22, r28
    259e:	7d 0b       	sbc	r23, r29
    25a0:	0a f4       	brpl	.+2      	; 0x25a4 <PCD8544_SetArea+0x6c>
    25a2:	42 c0       	rjmp	.+132    	; 0x2628 <PCD8544_SetArea+0xf0>
    25a4:	57 2d       	mov	r21, r7
    25a6:	59 0f       	add	r21, r25
    25a8:	b5 01       	movw	r22, r10
    25aa:	6c 1b       	sub	r22, r28
    25ac:	7d 0b       	sbc	r23, r29
    25ae:	16 16       	cp	r1, r22
    25b0:	17 06       	cpc	r1, r23
    25b2:	14 f0       	brlt	.+4      	; 0x25b8 <PCD8544_SetArea+0x80>
    25b4:	e9 2f       	mov	r30, r25
    25b6:	01 c0       	rjmp	.+2      	; 0x25ba <PCD8544_SetArea+0x82>
    25b8:	e6 2d       	mov	r30, r6
    25ba:	e5 17       	cp	r30, r21
    25bc:	18 f4       	brcc	.+6      	; 0x25c4 <PCD8544_SetArea+0x8c>
    25be:	0f c0       	rjmp	.+30     	; 0x25de <PCD8544_SetArea+0xa6>
    25c0:	e6 2d       	mov	r30, r6
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	bd 01       	movw	r22, r26
    25c8:	05 2e       	mov	r0, r21
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <PCD8544_SetArea+0x98>
    25cc:	66 0f       	add	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <PCD8544_SetArea+0x94>
    25d4:	86 2b       	or	r24, r22
    25d6:	5f 5f       	subi	r21, 0xFF	; 255
    25d8:	e5 17       	cp	r30, r21
    25da:	a8 f7       	brcc	.-22     	; 0x25c6 <PCD8544_SetArea+0x8e>
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <PCD8544_SetArea+0xa8>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	24 17       	cp	r18, r20
    25e2:	d0 f0       	brcs	.+52     	; 0x2618 <PCD8544_SetArea+0xe0>
    25e4:	b7 01       	movw	r22, r14
    25e6:	54 2f       	mov	r21, r20
    25e8:	18 2f       	mov	r17, r24
    25ea:	10 95       	com	r17
    25ec:	00 23       	and	r16, r16
    25ee:	49 f0       	breq	.+18     	; 0x2602 <PCD8544_SetArea+0xca>
    25f0:	fb 01       	movw	r30, r22
    25f2:	e5 0f       	add	r30, r21
    25f4:	f1 1d       	adc	r31, r1
    25f6:	e9 57       	subi	r30, 0x79	; 121
    25f8:	fd 4f       	sbci	r31, 0xFD	; 253
    25fa:	50 80       	ld	r5, Z
    25fc:	58 2a       	or	r5, r24
    25fe:	50 82       	st	Z, r5
    2600:	08 c0       	rjmp	.+16     	; 0x2612 <PCD8544_SetArea+0xda>
    2602:	fb 01       	movw	r30, r22
    2604:	e5 0f       	add	r30, r21
    2606:	f1 1d       	adc	r31, r1
    2608:	e9 57       	subi	r30, 0x79	; 121
    260a:	fd 4f       	sbci	r31, 0xFD	; 253
    260c:	50 80       	ld	r5, Z
    260e:	51 22       	and	r5, r17
    2610:	50 82       	st	Z, r5
    2612:	5f 5f       	subi	r21, 0xFF	; 255
    2614:	25 17       	cp	r18, r21
    2616:	50 f7       	brcc	.-44     	; 0x25ec <PCD8544_SetArea+0xb4>
    2618:	28 96       	adiw	r28, 0x08	; 8
    261a:	84 e5       	ldi	r24, 0x54	; 84
    261c:	e8 0e       	add	r14, r24
    261e:	f1 1c       	adc	r15, r1
    2620:	98 50       	subi	r25, 0x08	; 8
    2622:	93 13       	cpse	r25, r19
    2624:	af cf       	rjmp	.-162    	; 0x2584 <PCD8544_SetArea+0x4c>
    2626:	08 c0       	rjmp	.+16     	; 0x2638 <PCD8544_SetArea+0x100>
    2628:	b5 01       	movw	r22, r10
    262a:	6c 1b       	sub	r22, r28
    262c:	7d 0b       	sbc	r23, r29
    262e:	16 16       	cp	r1, r22
    2630:	17 06       	cpc	r1, r23
    2632:	34 f2       	brlt	.-116    	; 0x25c0 <PCD8544_SetArea+0x88>
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	be cf       	rjmp	.-132    	; 0x25b4 <PCD8544_SetArea+0x7c>
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	9f 90       	pop	r9
    264e:	8f 90       	pop	r8
    2650:	7f 90       	pop	r7
    2652:	6f 90       	pop	r6
    2654:	5f 90       	pop	r5
    2656:	08 95       	ret

00002658 <PCD8544_UpdateArea>:
    2658:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <PCD8544_UpdateXmin>
    265c:	89 17       	cp	r24, r25
    265e:	10 f4       	brcc	.+4      	; 0x2664 <PCD8544_UpdateArea+0xc>
    2660:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <PCD8544_UpdateXmin>
    2664:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <PCD8544_UpdateXmax>
    2668:	84 17       	cp	r24, r20
    266a:	10 f4       	brcc	.+4      	; 0x2670 <PCD8544_UpdateArea+0x18>
    266c:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <PCD8544_UpdateXmax>
    2670:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <PCD8544_UpdateYmin>
    2674:	68 17       	cp	r22, r24
    2676:	10 f4       	brcc	.+4      	; 0x267c <PCD8544_UpdateArea+0x24>
    2678:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <PCD8544_UpdateYmin>
    267c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <PCD8544_UpdateYmax>
    2680:	82 17       	cp	r24, r18
    2682:	10 f4       	brcc	.+4      	; 0x2688 <PCD8544_UpdateArea+0x30>
    2684:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <PCD8544_UpdateYmax>
    2688:	08 95       	ret

0000268a <PCD8544_DrawPixel>:
    268a:	84 35       	cpi	r24, 0x54	; 84
    268c:	e0 f5       	brcc	.+120    	; 0x2706 <PCD8544_DrawPixel+0x7c>
    268e:	60 33       	cpi	r22, 0x30	; 48
    2690:	d0 f5       	brcc	.+116    	; 0x2706 <PCD8544_DrawPixel+0x7c>
    2692:	44 23       	and	r20, r20
    2694:	d1 f0       	breq	.+52     	; 0x26ca <PCD8544_DrawPixel+0x40>
    2696:	e8 2f       	mov	r30, r24
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	96 2f       	mov	r25, r22
    269c:	96 95       	lsr	r25
    269e:	96 95       	lsr	r25
    26a0:	96 95       	lsr	r25
    26a2:	24 e5       	ldi	r18, 0x54	; 84
    26a4:	92 9f       	mul	r25, r18
    26a6:	e0 0d       	add	r30, r0
    26a8:	f1 1d       	adc	r31, r1
    26aa:	11 24       	eor	r1, r1
    26ac:	e9 57       	subi	r30, 0x79	; 121
    26ae:	fd 4f       	sbci	r31, 0xFD	; 253
    26b0:	96 2f       	mov	r25, r22
    26b2:	97 70       	andi	r25, 0x07	; 7
    26b4:	21 e0       	ldi	r18, 0x01	; 1
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <PCD8544_DrawPixel+0x34>
    26ba:	22 0f       	add	r18, r18
    26bc:	33 1f       	adc	r19, r19
    26be:	9a 95       	dec	r25
    26c0:	e2 f7       	brpl	.-8      	; 0x26ba <PCD8544_DrawPixel+0x30>
    26c2:	90 81       	ld	r25, Z
    26c4:	29 2b       	or	r18, r25
    26c6:	20 83       	st	Z, r18
    26c8:	1a c0       	rjmp	.+52     	; 0x26fe <PCD8544_DrawPixel+0x74>
    26ca:	e8 2f       	mov	r30, r24
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	96 2f       	mov	r25, r22
    26d0:	96 95       	lsr	r25
    26d2:	96 95       	lsr	r25
    26d4:	96 95       	lsr	r25
    26d6:	24 e5       	ldi	r18, 0x54	; 84
    26d8:	92 9f       	mul	r25, r18
    26da:	e0 0d       	add	r30, r0
    26dc:	f1 1d       	adc	r31, r1
    26de:	11 24       	eor	r1, r1
    26e0:	e9 57       	subi	r30, 0x79	; 121
    26e2:	fd 4f       	sbci	r31, 0xFD	; 253
    26e4:	96 2f       	mov	r25, r22
    26e6:	97 70       	andi	r25, 0x07	; 7
    26e8:	21 e0       	ldi	r18, 0x01	; 1
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <PCD8544_DrawPixel+0x68>
    26ee:	22 0f       	add	r18, r18
    26f0:	33 1f       	adc	r19, r19
    26f2:	9a 95       	dec	r25
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <PCD8544_DrawPixel+0x64>
    26f6:	20 95       	com	r18
    26f8:	90 81       	ld	r25, Z
    26fa:	29 23       	and	r18, r25
    26fc:	20 83       	st	Z, r18
    26fe:	26 2f       	mov	r18, r22
    2700:	48 2f       	mov	r20, r24
    2702:	0e 94 2c 13 	call	0x2658	; 0x2658 <PCD8544_UpdateArea>
    2706:	08 95       	ret

00002708 <PCD8544_Clear>:
    2708:	0e 94 3b 12 	call	0x2476	; 0x2476 <PCD8544_Home>
    270c:	e7 e8       	ldi	r30, 0x87	; 135
    270e:	f2 e0       	ldi	r31, 0x02	; 2
    2710:	8f e7       	ldi	r24, 0x7F	; 127
    2712:	94 e0       	ldi	r25, 0x04	; 4
    2714:	11 92       	st	Z+, r1
    2716:	e8 17       	cp	r30, r24
    2718:	f9 07       	cpc	r31, r25
    271a:	e1 f7       	brne	.-8      	; 0x2714 <PCD8544_Clear+0xc>
    271c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <PCD8544_x>
    2720:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <PCD8544_y>
    2724:	2f e2       	ldi	r18, 0x2F	; 47
    2726:	43 e5       	ldi	r20, 0x53	; 83
    2728:	60 e0       	ldi	r22, 0x00	; 0
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	0e 94 2c 13 	call	0x2658	; 0x2658 <PCD8544_UpdateArea>
    2730:	0e 94 44 12 	call	0x2488	; 0x2488 <PCD8544_Refresh>
    2734:	08 95       	ret

00002736 <PCD8544_Init>:
    2736:	cf 93       	push	r28
    2738:	c8 2f       	mov	r28, r24
    273a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <PCD8544_InitIO>
    273e:	5f 98       	cbi	0x0b, 7	; 11
    2740:	64 e6       	ldi	r22, 0x64	; 100
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 00 12 	call	0x2400	; 0x2400 <PCD8544_Delay>
    274c:	5f 9a       	sbi	0x0b, 7	; 11
    274e:	61 e2       	ldi	r22, 0x21	; 33
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    2756:	64 e1       	ldi	r22, 0x14	; 20
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    275e:	cc 23       	and	r28, r28
    2760:	0c f4       	brge	.+2      	; 0x2764 <PCD8544_Init+0x2e>
    2762:	cf e7       	ldi	r28, 0x7F	; 127
    2764:	6c 2f       	mov	r22, r28
    2766:	60 68       	ori	r22, 0x80	; 128
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    276e:	60 e2       	ldi	r22, 0x20	; 32
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    2776:	6c e0       	ldi	r22, 0x0C	; 12
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    277e:	0e 94 3b 12 	call	0x2476	; 0x2476 <PCD8544_Home>
    2782:	6c e0       	ldi	r22, 0x0C	; 12
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	0e 94 30 12 	call	0x2460	; 0x2460 <PCD8544_Write>
    278a:	0e 94 84 13 	call	0x2708	; 0x2708 <PCD8544_Clear>
    278e:	cf 91       	pop	r28
    2790:	08 95       	ret

00002792 <PCD8544_GotoXY>:
    2792:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
    2796:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <PCD8544_y>
    279a:	08 95       	ret

0000279c <PCD8544_Putc>:
    279c:	3f 92       	push	r3
    279e:	4f 92       	push	r4
    27a0:	5f 92       	push	r5
    27a2:	7f 92       	push	r7
    27a4:	8f 92       	push	r8
    27a6:	9f 92       	push	r9
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	00 d0       	rcall	.+0      	; 0x27be <PCD8544_Putc+0x22>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <PCD8544_Putc+0x24>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	38 2e       	mov	r3, r24
    27c6:	16 2f       	mov	r17, r22
    27c8:	04 2f       	mov	r16, r20
    27ca:	41 30       	cpi	r20, 0x01	; 1
    27cc:	29 f0       	breq	.+10     	; 0x27d8 <PCD8544_Putc+0x3c>
    27ce:	86 e0       	ldi	r24, 0x06	; 6
    27d0:	68 94       	set
    27d2:	77 24       	eor	r7, r7
    27d4:	73 f8       	bld	r7, 3
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <PCD8544_Putc+0x46>
    27d8:	84 e0       	ldi	r24, 0x04	; 4
    27da:	0f 2e       	mov	r0, r31
    27dc:	f6 e0       	ldi	r31, 0x06	; 6
    27de:	7f 2e       	mov	r7, r31
    27e0:	f0 2d       	mov	r31, r0
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    27ea:	a9 01       	movw	r20, r18
    27ec:	48 0f       	add	r20, r24
    27ee:	51 1d       	adc	r21, r1
    27f0:	45 35       	cpi	r20, 0x55	; 85
    27f2:	51 05       	cpc	r21, r1
    27f4:	3c f0       	brlt	.+14     	; 0x2804 <PCD8544_Putc+0x68>
    27f6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    27fa:	87 0d       	add	r24, r7
    27fc:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2800:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <PCD8544_x>
    2804:	b9 01       	movw	r22, r18
    2806:	61 50       	subi	r22, 0x01	; 1
    2808:	71 09       	sbc	r23, r1
    280a:	7a 83       	std	Y+2, r23	; 0x02
    280c:	69 83       	std	Y+1, r22	; 0x01
    280e:	e0 e0       	ldi	r30, 0x00	; 0
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	51 2c       	mov	r5, r1
    2814:	83 2d       	mov	r24, r3
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9c 01       	movw	r18, r24
    281a:	20 52       	subi	r18, 0x20	; 32
    281c:	31 09       	sbc	r19, r1
    281e:	69 01       	movw	r12, r18
    2820:	cc 0c       	add	r12, r12
    2822:	dd 1c       	adc	r13, r13
    2824:	2c 0d       	add	r18, r12
    2826:	3d 1d       	adc	r19, r13
    2828:	a9 01       	movw	r20, r18
    282a:	44 0f       	add	r20, r20
    282c:	55 1f       	adc	r21, r21
    282e:	ba 01       	movw	r22, r20
    2830:	68 52       	subi	r22, 0x28	; 40
    2832:	7a 4f       	sbci	r23, 0xFA	; 250
    2834:	5b 01       	movw	r10, r22
    2836:	a9 01       	movw	r20, r18
    2838:	46 56       	subi	r20, 0x66	; 102
    283a:	5b 4f       	sbci	r21, 0xFB	; 251
    283c:	6a 01       	movw	r12, r20
    283e:	7c 01       	movw	r14, r24
    2840:	ee 0c       	add	r14, r14
    2842:	ff 1c       	adc	r15, r15
    2844:	8e 0d       	add	r24, r14
    2846:	9f 1d       	adc	r25, r15
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	bc 01       	movw	r22, r24
    284e:	62 5e       	subi	r22, 0xE2	; 226
    2850:	77 4f       	sbci	r23, 0xF7	; 247
    2852:	7b 01       	movw	r14, r22
    2854:	7f e1       	ldi	r23, 0x1F	; 31
    2856:	73 15       	cp	r23, r3
    2858:	30 f0       	brcs	.+12     	; 0x2866 <PCD8544_Putc+0xca>
    285a:	01 11       	cpse	r16, r1
    285c:	0d c0       	rjmp	.+26     	; 0x2878 <PCD8544_Putc+0xdc>
    285e:	ee 0d       	add	r30, r14
    2860:	ff 1d       	adc	r31, r15
    2862:	44 90       	lpm	r4, Z
    2864:	09 c0       	rjmp	.+18     	; 0x2878 <PCD8544_Putc+0xdc>
    2866:	01 30       	cpi	r16, 0x01	; 1
    2868:	21 f4       	brne	.+8      	; 0x2872 <PCD8544_Putc+0xd6>
    286a:	ec 0d       	add	r30, r12
    286c:	fd 1d       	adc	r31, r13
    286e:	44 90       	lpm	r4, Z
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <PCD8544_Putc+0xdc>
    2872:	ea 0d       	add	r30, r10
    2874:	fb 1d       	adc	r31, r11
    2876:	44 90       	lpm	r4, Z
    2878:	77 20       	and	r7, r7
    287a:	81 f1       	breq	.+96     	; 0x28dc <PCD8544_Putc+0x140>
    287c:	81 2c       	mov	r8, r1
    287e:	91 2c       	mov	r9, r1
    2880:	84 2d       	mov	r24, r4
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
    2888:	11 30       	cpi	r17, 0x01	; 1
    288a:	89 f4       	brne	.+34     	; 0x28ae <PCD8544_Putc+0x112>
    288c:	4b 81       	ldd	r20, Y+3	; 0x03
    288e:	5c 81       	ldd	r21, Y+4	; 0x04
    2890:	08 2c       	mov	r0, r8
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <PCD8544_Putc+0xfc>
    2894:	55 95       	asr	r21
    2896:	47 95       	ror	r20
    2898:	0a 94       	dec	r0
    289a:	e2 f7       	brpl	.-8      	; 0x2894 <PCD8544_Putc+0xf8>
    289c:	41 70       	andi	r20, 0x01	; 1
    289e:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <PCD8544_y>
    28a2:	68 0d       	add	r22, r8
    28a4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    28a8:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    28ac:	12 c0       	rjmp	.+36     	; 0x28d2 <PCD8544_Putc+0x136>
    28ae:	4b 81       	ldd	r20, Y+3	; 0x03
    28b0:	5c 81       	ldd	r21, Y+4	; 0x04
    28b2:	08 2c       	mov	r0, r8
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <PCD8544_Putc+0x11e>
    28b6:	55 95       	asr	r21
    28b8:	47 95       	ror	r20
    28ba:	0a 94       	dec	r0
    28bc:	e2 f7       	brpl	.-8      	; 0x28b6 <PCD8544_Putc+0x11a>
    28be:	91 e0       	ldi	r25, 0x01	; 1
    28c0:	49 27       	eor	r20, r25
    28c2:	41 70       	andi	r20, 0x01	; 1
    28c4:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <PCD8544_y>
    28c8:	68 0d       	add	r22, r8
    28ca:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    28ce:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    28d2:	2f ef       	ldi	r18, 0xFF	; 255
    28d4:	82 1a       	sub	r8, r18
    28d6:	92 0a       	sbc	r9, r18
    28d8:	87 14       	cp	r8, r7
    28da:	b0 f2       	brcs	.-84     	; 0x2888 <PCD8544_Putc+0xec>
    28dc:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	98 0f       	add	r25, r24
    28e4:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <PCD8544_x>
    28e8:	53 94       	inc	r5
    28ea:	e5 2d       	mov	r30, r5
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	49 81       	ldd	r20, Y+1	; 0x01
    28f0:	5a 81       	ldd	r21, Y+2	; 0x02
    28f2:	e4 17       	cp	r30, r20
    28f4:	f5 07       	cpc	r31, r21
    28f6:	0c f4       	brge	.+2      	; 0x28fa <PCD8544_Putc+0x15e>
    28f8:	ad cf       	rjmp	.-166    	; 0x2854 <PCD8544_Putc+0xb8>
    28fa:	8e 5f       	subi	r24, 0xFE	; 254
    28fc:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
    291a:	af 90       	pop	r10
    291c:	9f 90       	pop	r9
    291e:	8f 90       	pop	r8
    2920:	7f 90       	pop	r7
    2922:	5f 90       	pop	r5
    2924:	4f 90       	pop	r4
    2926:	3f 90       	pop	r3
    2928:	08 95       	ret

0000292a <PCD8544_Puts>:
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	ec 01       	movw	r28, r24
    2934:	88 81       	ld	r24, Y
    2936:	88 23       	and	r24, r24
    2938:	51 f0       	breq	.+20     	; 0x294e <PCD8544_Puts+0x24>
    293a:	04 2f       	mov	r16, r20
    293c:	16 2f       	mov	r17, r22
    293e:	21 96       	adiw	r28, 0x01	; 1
    2940:	40 2f       	mov	r20, r16
    2942:	61 2f       	mov	r22, r17
    2944:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
    2948:	89 91       	ld	r24, Y+
    294a:	81 11       	cpse	r24, r1
    294c:	f9 cf       	rjmp	.-14     	; 0x2940 <PCD8544_Puts+0x16>
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	1f 91       	pop	r17
    2954:	0f 91       	pop	r16
    2956:	08 95       	ret

00002958 <PCD8544_Puts_f>:
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	fc 01       	movw	r30, r24
    2962:	84 91       	lpm	r24, Z
    2964:	88 23       	and	r24, r24
    2966:	69 f0       	breq	.+26     	; 0x2982 <PCD8544_Puts_f+0x2a>
    2968:	04 2f       	mov	r16, r20
    296a:	16 2f       	mov	r17, r22
    296c:	ef 01       	movw	r28, r30
    296e:	21 96       	adiw	r28, 0x01	; 1
    2970:	40 2f       	mov	r20, r16
    2972:	61 2f       	mov	r22, r17
    2974:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
    2978:	fe 01       	movw	r30, r28
    297a:	21 96       	adiw	r28, 0x01	; 1
    297c:	85 91       	lpm	r24, Z+
    297e:	81 11       	cpse	r24, r1
    2980:	f7 cf       	rjmp	.-18     	; 0x2970 <PCD8544_Puts_f+0x18>
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	08 95       	ret

0000298c <PCD8544_DrawLine>:
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	d8 2f       	mov	r29, r24
    29a4:	c6 2f       	mov	r28, r22
    29a6:	f4 2e       	mov	r15, r20
    29a8:	12 2f       	mov	r17, r18
    29aa:	48 17       	cp	r20, r24
    29ac:	10 f4       	brcc	.+4      	; 0x29b2 <PCD8544_DrawLine+0x26>
    29ae:	d4 2f       	mov	r29, r20
    29b0:	f8 2e       	mov	r15, r24
    29b2:	1c 17       	cp	r17, r28
    29b4:	18 f4       	brcc	.+6      	; 0x29bc <PCD8544_DrawLine+0x30>
    29b6:	8c 2f       	mov	r24, r28
    29b8:	c1 2f       	mov	r28, r17
    29ba:	18 2f       	mov	r17, r24
    29bc:	8f 2d       	mov	r24, r15
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	8d 1b       	sub	r24, r29
    29c2:	91 09       	sbc	r25, r1
    29c4:	49 f4       	brne	.+18     	; 0x29d8 <PCD8544_DrawLine+0x4c>
    29c6:	40 2f       	mov	r20, r16
    29c8:	6c 2f       	mov	r22, r28
    29ca:	8d 2f       	mov	r24, r29
    29cc:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    29d0:	cf 5f       	subi	r28, 0xFF	; 255
    29d2:	1c 17       	cp	r17, r28
    29d4:	c0 f7       	brcc	.-16     	; 0x29c6 <PCD8544_DrawLine+0x3a>
    29d6:	5a c0       	rjmp	.+180    	; 0x2a8c <PCD8544_DrawLine+0x100>
    29d8:	21 2f       	mov	r18, r17
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	2c 1b       	sub	r18, r28
    29de:	31 09       	sbc	r19, r1
    29e0:	49 f4       	brne	.+18     	; 0x29f4 <PCD8544_DrawLine+0x68>
    29e2:	40 2f       	mov	r20, r16
    29e4:	6c 2f       	mov	r22, r28
    29e6:	8d 2f       	mov	r24, r29
    29e8:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    29ec:	df 5f       	subi	r29, 0xFF	; 255
    29ee:	fd 16       	cp	r15, r29
    29f0:	c0 f7       	brcc	.-16     	; 0x29e2 <PCD8544_DrawLine+0x56>
    29f2:	4c c0       	rjmp	.+152    	; 0x2a8c <PCD8544_DrawLine+0x100>
    29f4:	28 17       	cp	r18, r24
    29f6:	39 07       	cpc	r19, r25
    29f8:	24 f5       	brge	.+72     	; 0x2a42 <PCD8544_DrawLine+0xb6>
    29fa:	59 01       	movw	r10, r18
    29fc:	aa 0c       	add	r10, r10
    29fe:	bb 1c       	adc	r11, r11
    2a00:	65 01       	movw	r12, r10
    2a02:	c8 1a       	sub	r12, r24
    2a04:	d9 0a       	sbc	r13, r25
    2a06:	df 15       	cp	r29, r15
    2a08:	b1 f0       	breq	.+44     	; 0x2a36 <PCD8544_DrawLine+0xaa>
    2a0a:	28 1b       	sub	r18, r24
    2a0c:	39 0b       	sbc	r19, r25
    2a0e:	49 01       	movw	r8, r18
    2a10:	88 0c       	add	r8, r8
    2a12:	99 1c       	adc	r9, r9
    2a14:	40 2f       	mov	r20, r16
    2a16:	6c 2f       	mov	r22, r28
    2a18:	8d 2f       	mov	r24, r29
    2a1a:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    2a1e:	df 5f       	subi	r29, 0xFF	; 255
    2a20:	1c 14       	cp	r1, r12
    2a22:	1d 04       	cpc	r1, r13
    2a24:	24 f4       	brge	.+8      	; 0x2a2e <PCD8544_DrawLine+0xa2>
    2a26:	cf 5f       	subi	r28, 0xFF	; 255
    2a28:	c8 0c       	add	r12, r8
    2a2a:	d9 1c       	adc	r13, r9
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <PCD8544_DrawLine+0xa6>
    2a2e:	ca 0c       	add	r12, r10
    2a30:	db 1c       	adc	r13, r11
    2a32:	fd 12       	cpse	r15, r29
    2a34:	ef cf       	rjmp	.-34     	; 0x2a14 <PCD8544_DrawLine+0x88>
    2a36:	40 2f       	mov	r20, r16
    2a38:	6c 2f       	mov	r22, r28
    2a3a:	8f 2d       	mov	r24, r15
    2a3c:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    2a40:	25 c0       	rjmp	.+74     	; 0x2a8c <PCD8544_DrawLine+0x100>
    2a42:	6c 01       	movw	r12, r24
    2a44:	cc 0c       	add	r12, r12
    2a46:	dd 1c       	adc	r13, r13
    2a48:	c2 1a       	sub	r12, r18
    2a4a:	d3 0a       	sbc	r13, r19
    2a4c:	c1 17       	cp	r28, r17
    2a4e:	c9 f0       	breq	.+50     	; 0x2a82 <PCD8544_DrawLine+0xf6>
    2a50:	59 01       	movw	r10, r18
    2a52:	a8 1a       	sub	r10, r24
    2a54:	b9 0a       	sbc	r11, r25
    2a56:	aa 0c       	add	r10, r10
    2a58:	bb 1c       	adc	r11, r11
    2a5a:	49 01       	movw	r8, r18
    2a5c:	88 0c       	add	r8, r8
    2a5e:	99 1c       	adc	r9, r9
    2a60:	40 2f       	mov	r20, r16
    2a62:	6c 2f       	mov	r22, r28
    2a64:	8d 2f       	mov	r24, r29
    2a66:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    2a6a:	cf 5f       	subi	r28, 0xFF	; 255
    2a6c:	1c 14       	cp	r1, r12
    2a6e:	1d 04       	cpc	r1, r13
    2a70:	24 f4       	brge	.+8      	; 0x2a7a <PCD8544_DrawLine+0xee>
    2a72:	df 5f       	subi	r29, 0xFF	; 255
    2a74:	ca 0c       	add	r12, r10
    2a76:	db 1c       	adc	r13, r11
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <PCD8544_DrawLine+0xf2>
    2a7a:	c8 0c       	add	r12, r8
    2a7c:	d9 1c       	adc	r13, r9
    2a7e:	1c 13       	cpse	r17, r28
    2a80:	ef cf       	rjmp	.-34     	; 0x2a60 <PCD8544_DrawLine+0xd4>
    2a82:	40 2f       	mov	r20, r16
    2a84:	61 2f       	mov	r22, r17
    2a86:	8d 2f       	mov	r24, r29
    2a88:	0e 94 45 13 	call	0x268a	; 0x268a <PCD8544_DrawPixel>
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	bf 90       	pop	r11
    2a9c:	af 90       	pop	r10
    2a9e:	9f 90       	pop	r9
    2aa0:	8f 90       	pop	r8
    2aa2:	08 95       	ret

00002aa4 <PCD8544_PutTitle_f>:

void PCD8544_PutTitle_f(const __flash char *c){
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	cf 93       	push	r28
    2aac:	7c 01       	movw	r14, r24
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2aae:	ce e0       	ldi	r28, 0x0E	; 14
    2ab0:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2ab4:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <PCD8544_y>

void PCD8544_PutTitle_f(const __flash char *c){
	
	// Set Title
	PCD8544_GotoXY(X_ROW0, Y_ROW0);	// Go to Pixel x=0, y=0 position on the LCD display
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + ROW_HEIGHT, X_ROW0, X_ROW0 + ROW_LENGTH, 0);	// Clear previous content in that row
    2ab8:	00 e0       	ldi	r16, 0x00	; 0
    2aba:	20 e4       	ldi	r18, 0x40	; 64
    2abc:	4e e0       	ldi	r20, 0x0E	; 14
    2abe:	69 e0       	ldi	r22, 0x09	; 9
    2ac0:	8e ef       	ldi	r24, 0xFE	; 254
    2ac2:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_Puts_f(c, PCD8544_Pixel_Set, PCD8544_FontSize_5x7); // Print data with Pixel Set mode and Fontsize of 5x7px
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	61 e0       	ldi	r22, 0x01	; 1
    2aca:	c7 01       	movw	r24, r14
    2acc:	0e 94 ac 14 	call	0x2958	; 0x2958 <PCD8544_Puts_f>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2ad0:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2ad4:	89 e0       	ldi	r24, 0x09	; 9
    2ad6:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + ROW_HEIGHT, X_ROW0, X_ROW0 + ROW_LENGTH, 0);	// Clear previous content in that row
	PCD8544_Puts_f(c, PCD8544_Pixel_Set, PCD8544_FontSize_5x7); // Print data with Pixel Set mode and Fontsize of 5x7px
	
	// Draw Separation Line
	PCD8544_GotoXY(X_LINE, Y_LINE);
	PCD8544_DrawLine(PCD8544_x, PCD8544_y, PCD8544_x + ROW_LENGTH, PCD8544_y, PCD8544_Pixel_Set);
    2ada:	01 e0       	ldi	r16, 0x01	; 1
    2adc:	29 e0       	ldi	r18, 0x09	; 9
    2ade:	40 e4       	ldi	r20, 0x40	; 64
    2ae0:	69 e0       	ldi	r22, 0x09	; 9
    2ae2:	8e e0       	ldi	r24, 0x0E	; 14
    2ae4:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
	
}
    2ae8:	cf 91       	pop	r28
    2aea:	0f 91       	pop	r16
    2aec:	ff 90       	pop	r15
    2aee:	ef 90       	pop	r14
    2af0:	08 95       	ret

00002af2 <PCD8544_PutTitle>:

void PCD8544_PutTitle(char *c){
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	cf 93       	push	r28
    2afa:	7c 01       	movw	r14, r24
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2afc:	ce e0       	ldi	r28, 0x0E	; 14
    2afe:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2b02:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <PCD8544_y>

void PCD8544_PutTitle(char *c){
	
	// Set Title
	PCD8544_GotoXY(X_ROW0, Y_ROW0);	// Go to Pixel x=0, y=0 position on the LCD display
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + ROW_HEIGHT, X_ROW0, X_ROW0 + ROW_LENGTH, 0);	// Clear previous content in that row
    2b06:	00 e0       	ldi	r16, 0x00	; 0
    2b08:	20 e4       	ldi	r18, 0x40	; 64
    2b0a:	4e e0       	ldi	r20, 0x0E	; 14
    2b0c:	69 e0       	ldi	r22, 0x09	; 9
    2b0e:	8e ef       	ldi	r24, 0xFE	; 254
    2b10:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_Puts(c, PCD8544_Pixel_Set, PCD8544_FontSize_5x7); // Print data with Pixel Set mode and Fontsize of 5x7px
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	61 e0       	ldi	r22, 0x01	; 1
    2b18:	c7 01       	movw	r24, r14
    2b1a:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2b1e:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2b22:	89 e0       	ldi	r24, 0x09	; 9
    2b24:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + ROW_HEIGHT, X_ROW0, X_ROW0 + ROW_LENGTH, 0);	// Clear previous content in that row
	PCD8544_Puts(c, PCD8544_Pixel_Set, PCD8544_FontSize_5x7); // Print data with Pixel Set mode and Fontsize of 5x7px
	
	// Draw Separation Line
	PCD8544_GotoXY(X_LINE, Y_LINE);
	PCD8544_DrawLine(PCD8544_x, PCD8544_y, PCD8544_x + ROW_LENGTH, PCD8544_y, PCD8544_Pixel_Set);
    2b28:	01 e0       	ldi	r16, 0x01	; 1
    2b2a:	29 e0       	ldi	r18, 0x09	; 9
    2b2c:	40 e4       	ldi	r20, 0x40	; 64
    2b2e:	69 e0       	ldi	r22, 0x09	; 9
    2b30:	8e e0       	ldi	r24, 0x0E	; 14
    2b32:	0e 94 c6 14 	call	0x298c	; 0x298c <PCD8544_DrawLine>
}
    2b36:	cf 91       	pop	r28
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	08 95       	ret

00002b40 <PCD8544_PutString_f>:
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + PCD8544_CHAR3x5_HEIGHT, 0, PCD8544_WIDTH, PCD8544_Pixel_Clear);
	PCD8544_PutString(c, color, PCD8544_FontSize_3x5);	
}


void PCD8544_PutString_f(const __flash char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size){
    2b40:	ef 92       	push	r14
    2b42:	ff 92       	push	r15
    2b44:	0f 93       	push	r16
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	7c 01       	movw	r14, r24
    2b4c:	d6 2f       	mov	r29, r22
    2b4e:	c4 2f       	mov	r28, r20
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    2b50:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <__strlen_P>
	size_t length = strlen_P(c);
	
	if(size == PCD8544_FontSize_3x5){
    2b54:	c1 30       	cpi	r28, 0x01	; 1
    2b56:	f9 f4       	brne	.+62     	; 0x2b96 <PCD8544_PutString_f+0x56>
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR3x5_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR3x5_WIDTH*length, color);
    2b58:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <PCD8544_x>
    2b5c:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <PCD8544_y>
    2b60:	01 e0       	ldi	r16, 0x01	; 1
    2b62:	d1 11       	cpse	r29, r1
    2b64:	01 c0       	rjmp	.+2      	; 0x2b68 <PCD8544_PutString_f+0x28>
    2b66:	00 e0       	ldi	r16, 0x00	; 0
    2b68:	28 2f       	mov	r18, r24
    2b6a:	22 0f       	add	r18, r18
    2b6c:	22 0f       	add	r18, r18
    2b6e:	24 0f       	add	r18, r20
    2b70:	66 e0       	ldi	r22, 0x06	; 6
    2b72:	69 0f       	add	r22, r25
    2b74:	8e ef       	ldi	r24, 0xFE	; 254
    2b76:	89 0f       	add	r24, r25
    2b78:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2b7c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	size_t length = strlen_P(c);
	
	if(size == PCD8544_FontSize_3x5){
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR3x5_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR3x5_WIDTH*length, color);
		PCD8544_GotoXY(PCD8544_x+1, PCD8544_y);
		PCD8544_Puts_f(c, !color, PCD8544_FontSize_3x5);
    2b86:	61 e0       	ldi	r22, 0x01	; 1
    2b88:	d1 11       	cpse	r29, r1
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	c7 01       	movw	r24, r14
    2b90:	0e 94 ac 14 	call	0x2958	; 0x2958 <PCD8544_Puts_f>
    2b94:	21 c0       	rjmp	.+66     	; 0x2bd8 <PCD8544_PutString_f+0x98>
	} 
	else if(size == PCD8544_FontSize_5x7) {
    2b96:	c1 11       	cpse	r28, r1
    2b98:	1f c0       	rjmp	.+62     	; 0x2bd8 <PCD8544_PutString_f+0x98>
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR5x7_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR5x7_WIDTH*length, color);
    2b9a:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <PCD8544_x>
    2b9e:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <PCD8544_y>
    2ba2:	01 e0       	ldi	r16, 0x01	; 1
    2ba4:	d1 11       	cpse	r29, r1
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <PCD8544_PutString_f+0x6a>
    2ba8:	00 e0       	ldi	r16, 0x00	; 0
    2baa:	28 2f       	mov	r18, r24
    2bac:	22 0f       	add	r18, r18
    2bae:	28 0f       	add	r18, r24
    2bb0:	22 0f       	add	r18, r18
    2bb2:	24 0f       	add	r18, r20
    2bb4:	68 e0       	ldi	r22, 0x08	; 8
    2bb6:	69 0f       	add	r22, r25
    2bb8:	8e ef       	ldi	r24, 0xFE	; 254
    2bba:	89 0f       	add	r24, r25
    2bbc:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2bc0:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
		PCD8544_Puts_f(c, !color, PCD8544_FontSize_3x5);
	} 
	else if(size == PCD8544_FontSize_5x7) {
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR5x7_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR5x7_WIDTH*length, color);
		PCD8544_GotoXY(PCD8544_x+1, PCD8544_y);
		PCD8544_Puts_f(c, !color, PCD8544_FontSize_5x7);	
    2bca:	61 e0       	ldi	r22, 0x01	; 1
    2bcc:	d1 11       	cpse	r29, r1
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	c7 01       	movw	r24, r14
    2bd4:	0e 94 ac 14 	call	0x2958	; 0x2958 <PCD8544_Puts_f>
	}
	
}
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	08 95       	ret

00002be4 <PCD8544_PutSub_f>:
	// Draw Separation Line
	PCD8544_GotoXY(X_LINE, Y_LINE);
	PCD8544_DrawLine(PCD8544_x, PCD8544_y, PCD8544_x + ROW_LENGTH, PCD8544_y, PCD8544_Pixel_Set);
}

void PCD8544_PutSub_f(const __flash char *c, PCD8544_SubMenuRow_t row, PCD8544_Pixel_t color){
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	ec 01       	movw	r28, r24
    2bee:	14 2f       	mov	r17, r20
	
	switch(row){
    2bf0:	62 30       	cpi	r22, 0x02	; 2
    2bf2:	81 f0       	breq	.+32     	; 0x2c14 <PCD8544_PutSub_f+0x30>
    2bf4:	18 f4       	brcc	.+6      	; 0x2bfc <PCD8544_PutSub_f+0x18>
    2bf6:	61 30       	cpi	r22, 0x01	; 1
    2bf8:	31 f0       	breq	.+12     	; 0x2c06 <PCD8544_PutSub_f+0x22>
    2bfa:	20 c0       	rjmp	.+64     	; 0x2c3c <PCD8544_PutSub_f+0x58>
    2bfc:	63 30       	cpi	r22, 0x03	; 3
    2bfe:	89 f0       	breq	.+34     	; 0x2c22 <PCD8544_PutSub_f+0x3e>
    2c00:	64 30       	cpi	r22, 0x04	; 4
    2c02:	b1 f0       	breq	.+44     	; 0x2c30 <PCD8544_PutSub_f+0x4c>
    2c04:	1b c0       	rjmp	.+54     	; 0x2c3c <PCD8544_PutSub_f+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2c06:	8e e0       	ldi	r24, 0x0E	; 14
    2c08:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2c0c:	8d e0       	ldi	r24, 0x0D	; 13
    2c0e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <PCD8544_PutSub_f+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2c14:	8e e0       	ldi	r24, 0x0E	; 14
    2c16:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2c1a:	86 e1       	ldi	r24, 0x16	; 22
    2c1c:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2c20:	0d c0       	rjmp	.+26     	; 0x2c3c <PCD8544_PutSub_f+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2c22:	8e e0       	ldi	r24, 0x0E	; 14
    2c24:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2c28:	8f e1       	ldi	r24, 0x1F	; 31
    2c2a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2c2e:	06 c0       	rjmp	.+12     	; 0x2c3c <PCD8544_PutSub_f+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2c30:	8e e0       	ldi	r24, 0x0E	; 14
    2c32:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2c36:	88 e2       	ldi	r24, 0x28	; 40
    2c38:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
		case 2: PCD8544_GotoXY(X_ROW2, Y_ROW2);break;
		case 3: PCD8544_GotoXY(X_ROW3, Y_ROW3);break;
		case 4: PCD8544_GotoXY(X_ROW4, Y_ROW4);break;
	}
	
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + PCD8544_CHAR3x5_HEIGHT, 0, PCD8544_WIDTH, PCD8544_Pixel_Clear);
    2c3c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    2c40:	66 e0       	ldi	r22, 0x06	; 6
    2c42:	68 0f       	add	r22, r24
    2c44:	00 e0       	ldi	r16, 0x00	; 0
    2c46:	24 e5       	ldi	r18, 0x54	; 84
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	82 50       	subi	r24, 0x02	; 2
    2c4c:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_PutString_f(c, color, PCD8544_FontSize_3x5);	
    2c50:	41 e0       	ldi	r20, 0x01	; 1
    2c52:	61 2f       	mov	r22, r17
    2c54:	ce 01       	movw	r24, r28
    2c56:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <PCD8544_PutString_f>
}
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	08 95       	ret

00002c64 <PCD8544_PutString>:
		PCD8544_Puts_f(c, !color, PCD8544_FontSize_5x7);	
	}
	
}

void PCD8544_PutString(char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size){
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	ec 01       	movw	r28, r24
    2c6e:	16 2f       	mov	r17, r22
	size_t length = strlen(c);
    2c70:	fc 01       	movw	r30, r24
    2c72:	01 90       	ld	r0, Z+
    2c74:	00 20       	and	r0, r0
    2c76:	e9 f7       	brne	.-6      	; 0x2c72 <PCD8544_PutString+0xe>
    2c78:	31 97       	sbiw	r30, 0x01	; 1
    2c7a:	e8 1b       	sub	r30, r24
    2c7c:	f9 0b       	sbc	r31, r25
	
	if(size == PCD8544_FontSize_3x5){
    2c7e:	41 30       	cpi	r20, 0x01	; 1
    2c80:	f1 f4       	brne	.+60     	; 0x2cbe <PCD8544_PutString+0x5a>
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR3x5_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR3x5_WIDTH*length, color);
    2c82:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <PCD8544_x>
    2c86:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    2c8a:	01 e0       	ldi	r16, 0x01	; 1
    2c8c:	61 11       	cpse	r22, r1
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <PCD8544_PutString+0x2e>
    2c90:	00 e0       	ldi	r16, 0x00	; 0
    2c92:	ee 0f       	add	r30, r30
    2c94:	ee 0f       	add	r30, r30
    2c96:	2e 2f       	mov	r18, r30
    2c98:	24 0f       	add	r18, r20
    2c9a:	66 e0       	ldi	r22, 0x06	; 6
    2c9c:	68 0f       	add	r22, r24
    2c9e:	82 50       	subi	r24, 0x02	; 2
    2ca0:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2ca4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    2ca8:	8f 5f       	subi	r24, 0xFF	; 255
    2caa:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	size_t length = strlen(c);
	
	if(size == PCD8544_FontSize_3x5){
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR3x5_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR3x5_WIDTH*length, color);
		PCD8544_GotoXY(PCD8544_x+1, PCD8544_y);
		PCD8544_Puts(c, !color, PCD8544_FontSize_3x5);
    2cae:	61 e0       	ldi	r22, 0x01	; 1
    2cb0:	11 11       	cpse	r17, r1
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	41 e0       	ldi	r20, 0x01	; 1
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
    2cbc:	20 c0       	rjmp	.+64     	; 0x2cfe <PCD8544_PutString+0x9a>
	} 
	else if(size == PCD8544_FontSize_5x7) {
    2cbe:	41 11       	cpse	r20, r1
    2cc0:	1e c0       	rjmp	.+60     	; 0x2cfe <PCD8544_PutString+0x9a>
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR5x7_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR5x7_WIDTH*length, color);
    2cc2:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <PCD8544_x>
    2cc6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    2cca:	01 e0       	ldi	r16, 0x01	; 1
    2ccc:	61 11       	cpse	r22, r1
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <PCD8544_PutString+0x6e>
    2cd0:	00 e0       	ldi	r16, 0x00	; 0
    2cd2:	2e 2f       	mov	r18, r30
    2cd4:	22 0f       	add	r18, r18
    2cd6:	2e 0f       	add	r18, r30
    2cd8:	22 0f       	add	r18, r18
    2cda:	24 0f       	add	r18, r20
    2cdc:	68 e0       	ldi	r22, 0x08	; 8
    2cde:	68 0f       	add	r22, r24
    2ce0:	82 50       	subi	r24, 0x02	; 2
    2ce2:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2ce6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    2cea:	8f 5f       	subi	r24, 0xFF	; 255
    2cec:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
		PCD8544_Puts(c, !color, PCD8544_FontSize_3x5);
	} 
	else if(size == PCD8544_FontSize_5x7) {
		PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR5x7_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR5x7_WIDTH*length, color);
		PCD8544_GotoXY(PCD8544_x+1, PCD8544_y);
		PCD8544_Puts(c, !color, PCD8544_FontSize_5x7);	
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	11 11       	cpse	r17, r1
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	0e 94 95 14 	call	0x292a	; 0x292a <PCD8544_Puts>
	}
	
}
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	08 95       	ret

00002d08 <PCD8544_PutSub>:
	
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + PCD8544_CHAR3x5_HEIGHT, 0, PCD8544_WIDTH, PCD8544_Pixel_Clear);
	PCD8544_PutString_f(c, color, PCD8544_FontSize_3x5);	
}

void PCD8544_PutSub(char *c, PCD8544_SubMenuRow_t row, PCD8544_Pixel_t color){
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	ec 01       	movw	r28, r24
    2d12:	14 2f       	mov	r17, r20
	
	switch(row){
    2d14:	62 30       	cpi	r22, 0x02	; 2
    2d16:	81 f0       	breq	.+32     	; 0x2d38 <PCD8544_PutSub+0x30>
    2d18:	18 f4       	brcc	.+6      	; 0x2d20 <PCD8544_PutSub+0x18>
    2d1a:	61 30       	cpi	r22, 0x01	; 1
    2d1c:	31 f0       	breq	.+12     	; 0x2d2a <PCD8544_PutSub+0x22>
    2d1e:	20 c0       	rjmp	.+64     	; 0x2d60 <PCD8544_PutSub+0x58>
    2d20:	63 30       	cpi	r22, 0x03	; 3
    2d22:	89 f0       	breq	.+34     	; 0x2d46 <PCD8544_PutSub+0x3e>
    2d24:	64 30       	cpi	r22, 0x04	; 4
    2d26:	b1 f0       	breq	.+44     	; 0x2d54 <PCD8544_PutSub+0x4c>
    2d28:	1b c0       	rjmp	.+54     	; 0x2d60 <PCD8544_PutSub+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2d2a:	8e e0       	ldi	r24, 0x0E	; 14
    2d2c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2d30:	8d e0       	ldi	r24, 0x0D	; 13
    2d32:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <PCD8544_PutSub+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2d38:	8e e0       	ldi	r24, 0x0E	; 14
    2d3a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2d3e:	86 e1       	ldi	r24, 0x16	; 22
    2d40:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2d44:	0d c0       	rjmp	.+26     	; 0x2d60 <PCD8544_PutSub+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2d46:	8e e0       	ldi	r24, 0x0E	; 14
    2d48:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2d4c:	8f e1       	ldi	r24, 0x1F	; 31
    2d4e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
    2d52:	06 c0       	rjmp	.+12     	; 0x2d60 <PCD8544_PutSub+0x58>
		PCD8544_UpdateYmax = yMax;
	}
}

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
	PCD8544_x = x;
    2d54:	8e e0       	ldi	r24, 0x0E	; 14
    2d56:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <PCD8544_x>
	PCD8544_y = y;
    2d5a:	88 e2       	ldi	r24, 0x28	; 40
    2d5c:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <PCD8544_y>
		case 2: PCD8544_GotoXY(X_ROW2, Y_ROW2);break;
		case 3: PCD8544_GotoXY(X_ROW3, Y_ROW3);break;
		case 4: PCD8544_GotoXY(X_ROW4, Y_ROW4);break;
	}
	
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y + PCD8544_CHAR3x5_HEIGHT, 0, PCD8544_WIDTH, PCD8544_Pixel_Clear);
    2d60:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    2d64:	66 e0       	ldi	r22, 0x06	; 6
    2d66:	68 0f       	add	r22, r24
    2d68:	00 e0       	ldi	r16, 0x00	; 0
    2d6a:	24 e5       	ldi	r18, 0x54	; 84
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	82 50       	subi	r24, 0x02	; 2
    2d70:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_PutString(c, color, PCD8544_FontSize_3x5);	
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	61 2f       	mov	r22, r17
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0e 94 32 16 	call	0x2c64	; 0x2c64 <PCD8544_PutString>
}
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	08 95       	ret

00002d88 <PCD8544_Powersave>:
}


void PCD8544_Powersave(){
	
	if(gPowerSaveTimer == LCD_TIMEOUT_SEC){
    2d88:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <gPowerSaveTimer>
    2d8c:	8c 33       	cpi	r24, 0x3C	; 60
    2d8e:	19 f4       	brne	.+6      	; 0x2d96 <PCD8544_Powersave+0xe>
		if(PCD8544_BL_PORT & (1 << PCD8544_BL_PIN)){
    2d90:	29 9b       	sbis	0x05, 1	; 5
    2d92:	07 c0       	rjmp	.+14     	; 0x2da2 <PCD8544_Powersave+0x1a>
			PCD8544_BL_LOW;
    2d94:	29 98       	cbi	0x05, 1	; 5
		}
	}
	if(gPowerSaveTimer < LCD_TIMEOUT_SEC){
    2d96:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <gPowerSaveTimer>
    2d9a:	8c 33       	cpi	r24, 0x3C	; 60
    2d9c:	10 f4       	brcc	.+4      	; 0x2da2 <PCD8544_Powersave+0x1a>
		if(!(PCD8544_BL_PORT & (1 << PCD8544_BL_PIN))){
    2d9e:	29 9b       	sbis	0x05, 1	; 5
			PCD8544_BL_HIGH;
    2da0:	29 9a       	sbi	0x05, 1	; 5
    2da2:	08 95       	ret

00002da4 <pump_init>:



void pump_init()
{
	PORTC |= (1 << PUMP1_PIN) | (1 << PUMP2_PIN) | (1 << PUMP3_PIN);
    2da4:	88 b1       	in	r24, 0x08	; 8
    2da6:	87 60       	ori	r24, 0x07	; 7
    2da8:	88 b9       	out	0x08, r24	; 8
	PUMP_DDR |= (1 << PUMP1_PIN) | (1 << PUMP2_PIN) | (1 << PUMP3_PIN);
    2daa:	87 b1       	in	r24, 0x07	; 7
    2dac:	87 60       	ori	r24, 0x07	; 7
    2dae:	87 b9       	out	0x07, r24	; 7
    2db0:	08 95       	ret

00002db2 <pump_switch>:
	
	
}

void pump_switch(uint8_t pump, bool pump_sw){
	pump_sw = !pump_sw;
    2db2:	91 e0       	ldi	r25, 0x01	; 1
    2db4:	96 27       	eor	r25, r22
	
	switch(pump){
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	49 f0       	breq	.+18     	; 0x2dcc <pump_switch+0x1a>
    2dba:	83 30       	cpi	r24, 0x03	; 3
    2dbc:	69 f0       	breq	.+26     	; 0x2dd8 <pump_switch+0x26>
    2dbe:	81 30       	cpi	r24, 0x01	; 1
    2dc0:	89 f4       	brne	.+34     	; 0x2de4 <pump_switch+0x32>
		case 1: PORTC = (PORTC & ~(1 << PUMP1_PIN)) | (pump_sw << PUMP1_PIN);break;
    2dc2:	68 b1       	in	r22, 0x08	; 8
    2dc4:	6e 7f       	andi	r22, 0xFE	; 254
    2dc6:	96 2b       	or	r25, r22
    2dc8:	98 b9       	out	0x08, r25	; 8
    2dca:	08 95       	ret
		case 2: PORTC = (PORTC & ~(1 << PUMP2_PIN)) | (pump_sw << PUMP2_PIN);break;
    2dcc:	68 b1       	in	r22, 0x08	; 8
    2dce:	6d 7f       	andi	r22, 0xFD	; 253
    2dd0:	99 0f       	add	r25, r25
    2dd2:	96 2b       	or	r25, r22
    2dd4:	98 b9       	out	0x08, r25	; 8
    2dd6:	08 95       	ret
		case 3: PORTC = (PORTC & ~(1 << PUMP3_PIN)) | (pump_sw << PUMP3_PIN);break;
    2dd8:	68 b1       	in	r22, 0x08	; 8
    2dda:	6b 7f       	andi	r22, 0xFB	; 251
    2ddc:	99 0f       	add	r25, r25
    2dde:	99 0f       	add	r25, r25
    2de0:	96 2b       	or	r25, r22
    2de2:	98 b9       	out	0x08, r25	; 8
    2de4:	08 95       	ret

00002de6 <pump_timer_watering>:
		}
		
}


void pump_timer_watering(){
    2de6:	8f 92       	push	r8
    2de8:	9f 92       	push	r9
    2dea:	bf 92       	push	r11
    2dec:	cf 92       	push	r12
    2dee:	df 92       	push	r13
    2df0:	ef 92       	push	r14
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
	
	unsigned char weekday_bin = 1 << WeekDay;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	6c 01       	movw	r12, r24
    2e02:	00 90 87 04 	lds	r0, 0x0487	; 0x800487 <WeekDay>
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <pump_timer_watering+0x26>
    2e08:	cc 0c       	add	r12, r12
    2e0a:	dd 1c       	adc	r13, r13
    2e0c:	0a 94       	dec	r0
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <pump_timer_watering+0x22>
    2e10:	0e e2       	ldi	r16, 0x2E	; 46
    2e12:	11 e0       	ldi	r17, 0x01	; 1
    2e14:	dd 24       	eor	r13, r13
    2e16:	d3 94       	inc	r13
	// --------------------------------
	// ---------- PUMP1 ---------------
	// --------------------------------
	uint8_t water_min = 0;
	uint16_t water_sec = 0;
	uint8_t stoptime_hour = 0;
    2e18:	f1 2c       	mov	r15, r1
	uint8_t i;
	
	// --------------------------------
	// ---------- PUMP1 ---------------
	// --------------------------------
	uint8_t water_min = 0;
    2e1a:	e1 2c       	mov	r14, r1
	
	for (i = 0; i < 3; i++){
		// start pump1
		if(pump_data_array[i]->pump_arm){
			if((pump_data_array[i]->pump_hour == gHOUR) && (pump_data_array[i]->pump_min == gMINUTE) && (gSECOND == 0) && (pump_data_array[i]->pump_day.Reg & weekday_bin) && (pump_data_array[i]->pump_active == 0)){
				pump_data_array[i]->pump_active = true;
    2e1c:	bb 24       	eor	r11, r11
    2e1e:	b3 94       	inc	r11
    2e20:	48 01       	movw	r8, r16
	uint8_t stoptime_sec = 0;
	
	
	for (i = 0; i < 3; i++){
		// start pump1
		if(pump_data_array[i]->pump_arm){
    2e22:	f8 01       	movw	r30, r16
    2e24:	c0 81       	ld	r28, Z
    2e26:	d1 81       	ldd	r29, Z+1	; 0x01
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	88 23       	and	r24, r24
    2e2c:	c9 f0       	breq	.+50     	; 0x2e60 <pump_timer_watering+0x7a>
			if((pump_data_array[i]->pump_hour == gHOUR) && (pump_data_array[i]->pump_min == gMINUTE) && (gSECOND == 0) && (pump_data_array[i]->pump_day.Reg & weekday_bin) && (pump_data_array[i]->pump_active == 0)){
    2e2e:	98 81       	ld	r25, Y
    2e30:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    2e34:	98 13       	cpse	r25, r24
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <pump_timer_watering+0x7a>
    2e38:	99 81       	ldd	r25, Y+1	; 0x01
    2e3a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    2e3e:	98 13       	cpse	r25, r24
    2e40:	0f c0       	rjmp	.+30     	; 0x2e60 <pump_timer_watering+0x7a>
    2e42:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    2e46:	81 11       	cpse	r24, r1
    2e48:	0b c0       	rjmp	.+22     	; 0x2e60 <pump_timer_watering+0x7a>
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	8c 21       	and	r24, r12
    2e4e:	41 f0       	breq	.+16     	; 0x2e60 <pump_timer_watering+0x7a>
    2e50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e52:	81 11       	cpse	r24, r1
    2e54:	0b c0       	rjmp	.+22     	; 0x2e6c <pump_timer_watering+0x86>
				pump_data_array[i]->pump_active = true;
    2e56:	ba 86       	std	Y+10, r11	; 0x0a
				pump_switch(i+1, true);			
    2e58:	6b 2d       	mov	r22, r11
    2e5a:	8d 2d       	mov	r24, r13
    2e5c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <pump_switch>
			}	
		}
		
		//stop pump1
		if(pump_data_array[i]->pump_active){
    2e60:	f4 01       	movw	r30, r8
    2e62:	c0 81       	ld	r28, Z
    2e64:	d1 81       	ldd	r29, Z+1	; 0x01
    2e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e68:	88 23       	and	r24, r24
    2e6a:	c1 f1       	breq	.+112    	; 0x2edc <pump_timer_watering+0xf6>
			temp = pump_data_array[i]->pump_vol / pump_data_array[i]->pump_calib * 60; //watering time in sec
			water_sec = (int)temp; // round to int to get seconds
    2e6c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e6e:	7c 81       	ldd	r23, Y+4	; 0x04
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 6d 1b 	call	0x36da	; 0x36da <__floatunsisf>
    2e78:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e7c:	4f 81       	ldd	r20, Y+7	; 0x07
    2e7e:	58 85       	ldd	r21, Y+8	; 0x08
    2e80:	0e 94 c5 1a 	call	0x358a	; 0x358a <__divsf3>
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e7       	ldi	r20, 0x70	; 112
    2e8a:	52 e4       	ldi	r21, 0x42	; 66
    2e8c:	0e 94 1f 1c 	call	0x383e	; 0x383e <__mulsf3>
    2e90:	0e 94 37 1b 	call	0x366e	; 0x366e <__fixsfsi>
			while(water_sec >= 60){
    2e94:	6c 33       	cpi	r22, 0x3C	; 60
    2e96:	71 05       	cpc	r23, r1
    2e98:	30 f0       	brcs	.+12     	; 0x2ea6 <pump_timer_watering+0xc0>
				water_min++;
    2e9a:	e3 94       	inc	r14
				water_sec -= 60;
    2e9c:	6c 53       	subi	r22, 0x3C	; 60
    2e9e:	71 09       	sbc	r23, r1
		
		//stop pump1
		if(pump_data_array[i]->pump_active){
			temp = pump_data_array[i]->pump_vol / pump_data_array[i]->pump_calib * 60; //watering time in sec
			water_sec = (int)temp; // round to int to get seconds
			while(water_sec >= 60){
    2ea0:	6c 33       	cpi	r22, 0x3C	; 60
    2ea2:	71 05       	cpc	r23, r1
    2ea4:	d0 f7       	brcc	.-12     	; 0x2e9a <pump_timer_watering+0xb4>
				water_min++;
				water_sec -= 60;
			}
			
			stoptime_sec = water_sec; // calculate the stop time as the pump_time + watering_time
			stoptime_min = pump_data_array[i]->pump_min + water_min;
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	8e 0d       	add	r24, r14
			while(stoptime_min >= 60){
    2eaa:	8c 33       	cpi	r24, 0x3C	; 60
    2eac:	20 f0       	brcs	.+8      	; 0x2eb6 <pump_timer_watering+0xd0>
				stoptime_hour++;
    2eae:	f3 94       	inc	r15
				stoptime_min -= 60;
    2eb0:	8c 53       	subi	r24, 0x3C	; 60
				water_sec -= 60;
			}
			
			stoptime_sec = water_sec; // calculate the stop time as the pump_time + watering_time
			stoptime_min = pump_data_array[i]->pump_min + water_min;
			while(stoptime_min >= 60){
    2eb2:	8c 33       	cpi	r24, 0x3C	; 60
    2eb4:	e0 f7       	brcc	.-8      	; 0x2eae <pump_timer_watering+0xc8>
				stoptime_hour++;
				stoptime_min -= 60;
			}
			stoptime_hour += pump_data_array[i]->pump_hour;
    2eb6:	98 81       	ld	r25, Y
    2eb8:	f9 0e       	add	r15, r25
			
			if((stoptime_hour == gHOUR) && (stoptime_min == gMINUTE) && (stoptime_sec == gSECOND)){		// if the stop time is reached then stop watering
    2eba:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <gHOUR>
    2ebe:	f9 12       	cpse	r15, r25
    2ec0:	0d c0       	rjmp	.+26     	; 0x2edc <pump_timer_watering+0xf6>
    2ec2:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <gMINUTE>
    2ec6:	98 13       	cpse	r25, r24
    2ec8:	09 c0       	rjmp	.+18     	; 0x2edc <pump_timer_watering+0xf6>
    2eca:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    2ece:	86 13       	cpse	r24, r22
    2ed0:	05 c0       	rjmp	.+10     	; 0x2edc <pump_timer_watering+0xf6>
				pump_data_array[i]->pump_active = false;		// set the pump active status to low
    2ed2:	1a 86       	std	Y+10, r1	; 0x0a
				pump_switch(i+1, false);				// stop the pump
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	8d 2d       	mov	r24, r13
    2ed8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <pump_switch>
    2edc:	d3 94       	inc	r13
    2ede:	0e 5f       	subi	r16, 0xFE	; 254
    2ee0:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t stoptime_hour = 0;
	uint8_t stoptime_min = 0;
	uint8_t stoptime_sec = 0;
	
	
	for (i = 0; i < 3; i++){
    2ee2:	f4 e0       	ldi	r31, 0x04	; 4
    2ee4:	df 12       	cpse	r13, r31
    2ee6:	9c cf       	rjmp	.-200    	; 0x2e20 <pump_timer_watering+0x3a>
				pump_data_array[i]->pump_active = false;		// set the pump active status to low
				pump_switch(i+1, false);				// stop the pump
			}	
		}
	}
};
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	cf 90       	pop	r12
    2ef8:	bf 90       	pop	r11
    2efa:	9f 90       	pop	r9
    2efc:	8f 90       	pop	r8
    2efe:	08 95       	ret

00002f00 <pump_moist_sensor_watering>:


void pump_moist_sensor_watering(){
    2f00:	4f 92       	push	r4
    2f02:	5f 92       	push	r5
    2f04:	6f 92       	push	r6
    2f06:	7f 92       	push	r7
    2f08:	8f 92       	push	r8
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	04 e0       	ldi	r16, 0x04	; 4
    2f22:	11 e0       	ldi	r17, 0x01	; 1
    2f24:	0f 2e       	mov	r0, r31
    2f26:	fe e2       	ldi	r31, 0x2E	; 46
    2f28:	ef 2e       	mov	r14, r31
    2f2a:	f1 e0       	ldi	r31, 0x01	; 1
    2f2c:	ff 2e       	mov	r15, r31
    2f2e:	f0 2d       	mov	r31, r0
    2f30:	66 24       	eor	r6, r6
    2f32:	63 94       	inc	r6
	uint8_t water_min = 0;
	uint16_t water_sec = 0;
	uint8_t stoptime_hour = 0;
	uint8_t stoptime_min = 0;
    2f34:	c0 e0       	ldi	r28, 0x00	; 0


void pump_moist_sensor_watering(){
	uint8_t water_min = 0;
	uint16_t water_sec = 0;
	uint8_t stoptime_hour = 0;
    2f36:	d0 e0       	ldi	r29, 0x00	; 0
	}
};


void pump_moist_sensor_watering(){
	uint8_t water_min = 0;
    2f38:	71 2c       	mov	r7, r1
			stoptime_hour += moist_data_array[i]->pump_hour;
			
			if((stoptime_hour == gHOUR) && (stoptime_min == gMINUTE) && (stoptime_sec == gSECOND)){		// if the stop time is reached then stop watering
				pump_data_array[i]->pump_active = false;		// set the pump active status to low
				pump_switch(i+1, false);				// stop the pump
				moist_data_array[i]->pump_block = true;
    2f3a:	55 24       	eor	r5, r5
    2f3c:	53 94       	inc	r5
    2f3e:	58 01       	movw	r10, r16
	uint8_t i;
	
	for (i = 0; i < 3; i++){
		
		// check if moisture value is below moist threshold. If yes then start the pump
		if (moist_data_array[i]->moist_sensor_arm && !pump_data_array[i]->pump_active && !moist_data_array[i]->pump_block){
    2f40:	d8 01       	movw	r26, r16
    2f42:	ed 91       	ld	r30, X+
    2f44:	fc 91       	ld	r31, X
    2f46:	85 81       	ldd	r24, Z+5	; 0x05
    2f48:	88 23       	and	r24, r24
    2f4a:	a1 f1       	breq	.+104    	; 0x2fb4 <pump_moist_sensor_watering+0xb4>
    2f4c:	d7 01       	movw	r26, r14
    2f4e:	cd 90       	ld	r12, X+
    2f50:	dc 90       	ld	r13, X
    2f52:	d6 01       	movw	r26, r12
    2f54:	1a 96       	adiw	r26, 0x0a	; 10
    2f56:	8c 91       	ld	r24, X
    2f58:	81 11       	cpse	r24, r1
    2f5a:	34 c0       	rjmp	.+104    	; 0x2fc4 <pump_moist_sensor_watering+0xc4>
    2f5c:	83 85       	ldd	r24, Z+11	; 0x0b
    2f5e:	81 11       	cpse	r24, r1
    2f60:	b4 c0       	rjmp	.+360    	; 0x30ca <pump_moist_sensor_watering+0x1ca>
			data = moist_sensor_read(moist_data_array[i]->moist_sensor_nr);
    2f62:	80 81       	ld	r24, Z
    2f64:	0e 94 8a 11 	call	0x2314	; 0x2314 <moist_sensor_read>
			if (data <= moist_data_array[i]->moist_sensor_thres){
    2f68:	f8 01       	movw	r30, r16
    2f6a:	c0 80       	ld	r12, Z
    2f6c:	d1 80       	ldd	r13, Z+1	; 0x01
    2f6e:	68 2f       	mov	r22, r24
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 6f 1b 	call	0x36de	; 0x36de <__floatsisf>
    2f7a:	d6 01       	movw	r26, r12
    2f7c:	11 96       	adiw	r26, 0x01	; 1
    2f7e:	2d 91       	ld	r18, X+
    2f80:	3d 91       	ld	r19, X+
    2f82:	4d 91       	ld	r20, X+
    2f84:	5c 91       	ld	r21, X
    2f86:	14 97       	sbiw	r26, 0x04	; 4
    2f88:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__cmpsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	94 f0       	brlt	.+36     	; 0x2fb4 <pump_moist_sensor_watering+0xb4>
				pump_data_array[i]->pump_active = true;
    2f90:	d7 01       	movw	r26, r14
    2f92:	ed 91       	ld	r30, X+
    2f94:	fc 91       	ld	r31, X
    2f96:	52 86       	std	Z+10, r5	; 0x0a
				moist_data_array[i]->pump_hour = gHOUR;
    2f98:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    2f9c:	f6 01       	movw	r30, r12
    2f9e:	80 87       	std	Z+8, r24	; 0x08
				moist_data_array[i]->pump_min = gMINUTE;
    2fa0:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    2fa4:	81 87       	std	Z+9, r24	; 0x09
				moist_data_array[i]->pump_sec = gSECOND;
    2fa6:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    2faa:	82 87       	std	Z+10, r24	; 0x0a
				pump_switch(i+1, true);	
    2fac:	65 2d       	mov	r22, r5
    2fae:	86 2d       	mov	r24, r6
    2fb0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <pump_switch>
			}
		}
		
		//stop pump
		if(pump_data_array[i]->pump_active){
    2fb4:	d7 01       	movw	r26, r14
    2fb6:	cd 90       	ld	r12, X+
    2fb8:	dc 90       	ld	r13, X
    2fba:	f6 01       	movw	r30, r12
    2fbc:	82 85       	ldd	r24, Z+10	; 0x0a
    2fbe:	88 23       	and	r24, r24
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <pump_moist_sensor_watering+0xc4>
    2fc2:	51 c0       	rjmp	.+162    	; 0x3066 <pump_moist_sensor_watering+0x166>
			temp = moist_data_array[i]->pump_vol/pump_data_array[i]->pump_calib * 60; //watering time in sec
    2fc4:	d5 01       	movw	r26, r10
    2fc6:	8d 90       	ld	r8, X+
    2fc8:	9c 90       	ld	r9, X
			water_sec = (int)temp; // round to int to get seconds
    2fca:	f4 01       	movw	r30, r8
    2fcc:	66 81       	ldd	r22, Z+6	; 0x06
    2fce:	77 81       	ldd	r23, Z+7	; 0x07
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 6d 1b 	call	0x36da	; 0x36da <__floatunsisf>
    2fd8:	d6 01       	movw	r26, r12
    2fda:	15 96       	adiw	r26, 0x05	; 5
    2fdc:	2d 91       	ld	r18, X+
    2fde:	3d 91       	ld	r19, X+
    2fe0:	4d 91       	ld	r20, X+
    2fe2:	5c 91       	ld	r21, X
    2fe4:	18 97       	sbiw	r26, 0x08	; 8
    2fe6:	0e 94 c5 1a 	call	0x358a	; 0x358a <__divsf3>
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e7       	ldi	r20, 0x70	; 112
    2ff0:	52 e4       	ldi	r21, 0x42	; 66
    2ff2:	0e 94 1f 1c 	call	0x383e	; 0x383e <__mulsf3>
    2ff6:	0e 94 37 1b 	call	0x366e	; 0x366e <__fixsfsi>
			while(water_sec >= 60){
    2ffa:	6c 33       	cpi	r22, 0x3C	; 60
    2ffc:	71 05       	cpc	r23, r1
    2ffe:	30 f0       	brcs	.+12     	; 0x300c <pump_moist_sensor_watering+0x10c>
				water_min++;
    3000:	73 94       	inc	r7
				water_sec -= 60;
    3002:	6c 53       	subi	r22, 0x3C	; 60
    3004:	71 09       	sbc	r23, r1
		
		//stop pump
		if(pump_data_array[i]->pump_active){
			temp = moist_data_array[i]->pump_vol/pump_data_array[i]->pump_calib * 60; //watering time in sec
			water_sec = (int)temp; // round to int to get seconds
			while(water_sec >= 60){
    3006:	6c 33       	cpi	r22, 0x3C	; 60
    3008:	71 05       	cpc	r23, r1
    300a:	d0 f7       	brcc	.-12     	; 0x3000 <pump_moist_sensor_watering+0x100>
				water_min++;
				water_sec -= 60;
			}
			
			stoptime_sec = water_sec + moist_data_array[i]->pump_sec; // calculate the stop time as the pump_time + watering_time
			stoptime_min = moist_data_array[i]->pump_min + water_min;
    300c:	f4 01       	movw	r30, r8
    300e:	c1 85       	ldd	r28, Z+9	; 0x09
    3010:	c7 0d       	add	r28, r7
			while(stoptime_min >= 60){
    3012:	cc 33       	cpi	r28, 0x3C	; 60
    3014:	20 f0       	brcs	.+8      	; 0x301e <pump_moist_sensor_watering+0x11e>
				stoptime_hour++;
    3016:	df 5f       	subi	r29, 0xFF	; 255
				stoptime_min -= 60;
    3018:	cc 53       	subi	r28, 0x3C	; 60
				water_sec -= 60;
			}
			
			stoptime_sec = water_sec + moist_data_array[i]->pump_sec; // calculate the stop time as the pump_time + watering_time
			stoptime_min = moist_data_array[i]->pump_min + water_min;
			while(stoptime_min >= 60){
    301a:	cc 33       	cpi	r28, 0x3C	; 60
    301c:	e0 f7       	brcc	.-8      	; 0x3016 <pump_moist_sensor_watering+0x116>
				stoptime_hour++;
				stoptime_min -= 60;
			}
			stoptime_hour += moist_data_array[i]->pump_hour;
    301e:	d4 01       	movw	r26, r8
    3020:	18 96       	adiw	r26, 0x08	; 8
    3022:	8c 91       	ld	r24, X
    3024:	18 97       	sbiw	r26, 0x08	; 8
    3026:	d8 0f       	add	r29, r24
			
			if((stoptime_hour == gHOUR) && (stoptime_min == gMINUTE) && (stoptime_sec == gSECOND)){		// if the stop time is reached then stop watering
    3028:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    302c:	d8 13       	cpse	r29, r24
    302e:	1b c0       	rjmp	.+54     	; 0x3066 <pump_moist_sensor_watering+0x166>
    3030:	40 90 8b 04 	lds	r4, 0x048B	; 0x80048b <gMINUTE>
    3034:	4c 12       	cpse	r4, r28
    3036:	17 c0       	rjmp	.+46     	; 0x3066 <pump_moist_sensor_watering+0x166>
    3038:	1a 96       	adiw	r26, 0x0a	; 10
    303a:	8c 91       	ld	r24, X
    303c:	68 0f       	add	r22, r24
    303e:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    3042:	68 13       	cpse	r22, r24
    3044:	0f c0       	rjmp	.+30     	; 0x3064 <pump_moist_sensor_watering+0x164>
				pump_data_array[i]->pump_active = false;		// set the pump active status to low
    3046:	f6 01       	movw	r30, r12
    3048:	12 86       	std	Z+10, r1	; 0x0a
				pump_switch(i+1, false);				// stop the pump
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	86 2d       	mov	r24, r6
    304e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <pump_switch>
				moist_data_array[i]->pump_block = true;
    3052:	d5 01       	movw	r26, r10
    3054:	ed 91       	ld	r30, X+
    3056:	fc 91       	ld	r31, X
    3058:	11 97       	sbiw	r26, 0x01	; 1
    305a:	53 86       	std	Z+11, r5	; 0x0b
			
			
		}
		
		// Check pump block
		if(moist_data_array[i]->pump_block){
    305c:	ed 91       	ld	r30, X+
    305e:	fc 91       	ld	r31, X
    3060:	c4 2d       	mov	r28, r4
    3062:	07 c0       	rjmp	.+14     	; 0x3072 <pump_moist_sensor_watering+0x172>
    3064:	c4 2d       	mov	r28, r4
    3066:	d5 01       	movw	r26, r10
    3068:	ed 91       	ld	r30, X+
    306a:	fc 91       	ld	r31, X
    306c:	83 85       	ldd	r24, Z+11	; 0x0b
    306e:	88 23       	and	r24, r24
    3070:	11 f1       	breq	.+68     	; 0x30b6 <pump_moist_sensor_watering+0x1b6>
			temp = moist_data_array[i]->pump_vol/pump_data_array[i]->pump_calib * 60; //watering time in sec
			water_sec = (int)temp; // round to int to get seconds
			
			stoptime_sec = moist_data_array[i]->pump_sec + PUMP_BLOCK_TIME_SEC;
    3072:	82 85       	ldd	r24, Z+10	; 0x0a
    3074:	8c 5e       	subi	r24, 0xEC	; 236
			
			while(stoptime_sec >= 60){
    3076:	8c 33       	cpi	r24, 0x3C	; 60
    3078:	20 f0       	brcs	.+8      	; 0x3082 <pump_moist_sensor_watering+0x182>
				stoptime_min++;
    307a:	cf 5f       	subi	r28, 0xFF	; 255
				stoptime_sec -= 60;
    307c:	8c 53       	subi	r24, 0x3C	; 60
			temp = moist_data_array[i]->pump_vol/pump_data_array[i]->pump_calib * 60; //watering time in sec
			water_sec = (int)temp; // round to int to get seconds
			
			stoptime_sec = moist_data_array[i]->pump_sec + PUMP_BLOCK_TIME_SEC;
			
			while(stoptime_sec >= 60){
    307e:	8c 33       	cpi	r24, 0x3C	; 60
    3080:	e0 f7       	brcc	.-8      	; 0x307a <pump_moist_sensor_watering+0x17a>
				stoptime_min++;
				stoptime_sec -= 60;
			}
			
			stoptime_min += moist_data_array[i]->pump_min;
    3082:	91 85       	ldd	r25, Z+9	; 0x09
    3084:	c9 0f       	add	r28, r25
			while(stoptime_min >= 60){
    3086:	cc 33       	cpi	r28, 0x3C	; 60
    3088:	20 f0       	brcs	.+8      	; 0x3092 <pump_moist_sensor_watering+0x192>
				stoptime_hour++;
    308a:	df 5f       	subi	r29, 0xFF	; 255
				stoptime_min -= 60;
    308c:	cc 53       	subi	r28, 0x3C	; 60
				stoptime_min++;
				stoptime_sec -= 60;
			}
			
			stoptime_min += moist_data_array[i]->pump_min;
			while(stoptime_min >= 60){
    308e:	cc 33       	cpi	r28, 0x3C	; 60
    3090:	e0 f7       	brcc	.-8      	; 0x308a <pump_moist_sensor_watering+0x18a>
				stoptime_hour++;
				stoptime_min -= 60;
			}
			stoptime_hour += moist_data_array[i]->pump_hour;
    3092:	90 85       	ldd	r25, Z+8	; 0x08
    3094:	d9 0f       	add	r29, r25
			
			if((stoptime_hour == gHOUR) && (stoptime_min == gMINUTE) && (stoptime_sec == gSECOND)){		// if the stop time is reached then stop watering
    3096:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <gHOUR>
    309a:	d9 13       	cpse	r29, r25
    309c:	0c c0       	rjmp	.+24     	; 0x30b6 <pump_moist_sensor_watering+0x1b6>
    309e:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <gMINUTE>
    30a2:	9c 13       	cpse	r25, r28
    30a4:	08 c0       	rjmp	.+16     	; 0x30b6 <pump_moist_sensor_watering+0x1b6>
    30a6:	20 91 85 04 	lds	r18, 0x0485	; 0x800485 <gSECOND>
    30aa:	28 13       	cpse	r18, r24
    30ac:	03 c0       	rjmp	.+6      	; 0x30b4 <pump_moist_sensor_watering+0x1b4>
				moist_data_array[i]->pump_block = false;
    30ae:	13 86       	std	Z+11, r1	; 0x0b
    30b0:	c9 2f       	mov	r28, r25
    30b2:	01 c0       	rjmp	.+2      	; 0x30b6 <pump_moist_sensor_watering+0x1b6>
    30b4:	c9 2f       	mov	r28, r25
    30b6:	63 94       	inc	r6
    30b8:	0e 5f       	subi	r16, 0xFE	; 254
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	b2 e0       	ldi	r27, 0x02	; 2
    30be:	eb 0e       	add	r14, r27
    30c0:	f1 1c       	adc	r15, r1
	uint8_t stoptime_sec = 0;
	float temp;
	uint8_t data;
	uint8_t i;
	
	for (i = 0; i < 3; i++){
    30c2:	e4 e0       	ldi	r30, 0x04	; 4
    30c4:	6e 12       	cpse	r6, r30
    30c6:	3b cf       	rjmp	.-394    	; 0x2f3e <pump_moist_sensor_watering+0x3e>
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <pump_moist_sensor_watering+0x1d2>
			
			
		}
		
		// Check pump block
		if(moist_data_array[i]->pump_block){
    30ca:	d8 01       	movw	r26, r16
    30cc:	ed 91       	ld	r30, X+
    30ce:	fc 91       	ld	r31, X
    30d0:	d0 cf       	rjmp	.-96     	; 0x3072 <pump_moist_sensor_watering+0x172>
			}
			
			
		}
	}
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	1f 91       	pop	r17
    30d8:	0f 91       	pop	r16
    30da:	ff 90       	pop	r15
    30dc:	ef 90       	pop	r14
    30de:	df 90       	pop	r13
    30e0:	cf 90       	pop	r12
    30e2:	bf 90       	pop	r11
    30e4:	af 90       	pop	r10
    30e6:	9f 90       	pop	r9
    30e8:	8f 90       	pop	r8
    30ea:	7f 90       	pop	r7
    30ec:	6f 90       	pop	r6
    30ee:	5f 90       	pop	r5
    30f0:	4f 90       	pop	r4
    30f2:	08 95       	ret

000030f4 <__vector_1>:
int16_t new = 0;
bool rotenc_press = false;
bool rotenc_press_old = false;
uint16_t push_debounce = 0;

ISR(INT0_vect){
    30f4:	1f 92       	push	r1
    30f6:	0f 92       	push	r0
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	0f 92       	push	r0
    30fc:	11 24       	eor	r1, r1
    30fe:	8f 93       	push	r24

	rotenc_press = true;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <rotenc_press>
	
}
    3106:	8f 91       	pop	r24
    3108:	0f 90       	pop	r0
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	0f 90       	pop	r0
    310e:	1f 90       	pop	r1
    3110:	18 95       	reti

00003112 <rotenc_init>:

void rotenc_init( void )
{
	ROTENC_DDR &= ~(1 << ROTENC_PINA) & ~(1 << ROTENC_PINB) & ~(1 << ROTENC_PUSH);
    3112:	8a b1       	in	r24, 0x0a	; 10
    3114:	8b 79       	andi	r24, 0x9B	; 155
    3116:	8a b9       	out	0x0a, r24	; 10
	ROTENC_PORT &= ~(1 << ROTENC_PUSH);
    3118:	5a 98       	cbi	0x0b, 2	; 11
	EICRA |= (1 << ISC01);
    311a:	e9 e6       	ldi	r30, 0x69	; 105
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	82 60       	ori	r24, 0x02	; 2
    3122:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
    3124:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
    3126:	78 94       	sei
    3128:	08 95       	ret

0000312a <rotenc_read4>:

int8_t rotenc_read4( void )         // read four step encoders
{
	int8_t val;

	cli();
    312a:	f8 94       	cli
	val = enc_delta;
    312c:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <enc_delta>
    3130:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <enc_delta+0x1>
	enc_delta = 0;
    3134:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <enc_delta+0x1>
    3138:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <enc_delta>
	sei();
    313c:	78 94       	sei
}
    313e:	08 95       	ret

00003140 <rotenc_poll>:


void rotenc_poll(void){       // 1ms for manual movement
	
	if(PHASE_A){new = 1;}else{new = 0;}
    3140:	4d 9b       	sbis	0x09, 5	; 9
    3142:	07 c0       	rjmp	.+14     	; 0x3152 <rotenc_poll+0x12>
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <new+0x1>
    314c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <new>
    3150:	23 c0       	rjmp	.+70     	; 0x3198 <rotenc_poll+0x58>
    3152:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <new+0x1>
    3156:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <new>
	if((new == 0) && last){
    315a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <last>
    315e:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <last+0x1>
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	c9 f0       	breq	.+50     	; 0x3198 <rotenc_poll+0x58>
		if(PHASE_B){
    3166:	4e 9b       	sbis	0x09, 6	; 9
    3168:	0c c0       	rjmp	.+24     	; 0x3182 <rotenc_poll+0x42>
			enc_delta--;
    316a:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <enc_delta>
    316e:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <enc_delta+0x1>
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <enc_delta+0x1>
    3178:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <enc_delta>


void rotenc_poll(void){       // 1ms for manual movement
	
	if(PHASE_A){new = 1;}else{new = 0;}
	if((new == 0) && last){
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0b c0       	rjmp	.+22     	; 0x3198 <rotenc_poll+0x58>
		if(PHASE_B){
			enc_delta--;
		}else{
			enc_delta++;	
    3182:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <enc_delta>
    3186:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <enc_delta+0x1>
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <enc_delta+0x1>
    3190:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <enc_delta>


void rotenc_poll(void){       // 1ms for manual movement
	
	if(PHASE_A){new = 1;}else{new = 0;}
	if((new == 0) && last){
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
			enc_delta--;
		}else{
			enc_delta++;	
		}
	}
	last = new;
    3198:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <last+0x1>
    319c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <last>
    31a0:	08 95       	ret

000031a2 <spi_MasterInit>:


void spi_MasterInit(void){
	
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
    31a2:	8c e2       	ldi	r24, 0x2C	; 44
    31a4:	84 b9       	out	0x04, r24	; 4
	//DDR_SPI &= ~(1<<DD_MISO);
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    31a6:	81 e5       	ldi	r24, 0x51	; 81
    31a8:	8c bd       	out	0x2c, r24	; 44
    31aa:	08 95       	ret

000031ac <spi_MasterTransmit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31ac:	93 e0       	ldi	r25, 0x03	; 3
    31ae:	9a 95       	dec	r25
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <spi_MasterTransmit+0x2>
    31b2:	00 00       	nop
	//	case data: PORTB |= (1 << DD_DC); break;
	//}
	
	_delay_us(10);
	/* Start Transmission */
	SPDR = cData;
    31b4:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete*/
	while (!(SPSR & (1<<SPIF)))
    31b6:	0d b4       	in	r0, 0x2d	; 45
    31b8:	07 fe       	sbrs	r0, 7
    31ba:	fd cf       	rjmp	.-6      	; 0x31b6 <spi_MasterTransmit+0xa>
    31bc:	83 e0       	ldi	r24, 0x03	; 3
    31be:	8a 95       	dec	r24
    31c0:	f1 f7       	brne	.-4      	; 0x31be <spi_MasterTransmit+0x12>
    31c2:	00 00       	nop
    31c4:	08 95       	ret

000031c6 <init_time>:
uint8_t poll = 0;

// Funtion Definition
void init_time(void){
	
	TCCR1B |= (1 << CS10) | (1 << WGM12);	//Set the prescaler to 1 and set to CTC mode
    31c6:	e1 e8       	ldi	r30, 0x81	; 129
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	89 60       	ori	r24, 0x09	; 9
    31ce:	80 83       	st	Z, r24
	OCR1A = F_CPU/1000 -1;					//set compare match to 1ms
    31d0:	8f e9       	ldi	r24, 0x9F	; 159
    31d2:	9f e0       	ldi	r25, 0x0F	; 15
    31d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    31d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 1 << OCIE1A;					//set interrupt by CTC
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	 // initial time and date setting
	 gMSECOND = 0;	
    31e2:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <gMSECOND+0x1>
    31e6:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <gMSECOND>
	 gSECOND  = 0;
    31ea:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <gSECOND>
	 gMINUTE  = 0;
    31ee:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <gMINUTE>
	 gHOUR    = 12;
    31f2:	9c e0       	ldi	r25, 0x0C	; 12
    31f4:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <gHOUR>
	 gDAY     = 01;
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <gDAY>
	 gMONTH   = 02;
    31fe:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <gMONTH>
	 gYEAR    = 2021;
    3202:	85 ee       	ldi	r24, 0xE5	; 229
    3204:	97 e0       	ldi	r25, 0x07	; 7
    3206:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <gYEAR+0x1>
    320a:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <gYEAR>
	 WeekDay  = monday;
    320e:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <WeekDay>
    3212:	08 95       	ret

00003214 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
    3214:	1f 92       	push	r1
    3216:	0f 92       	push	r0
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	0f 92       	push	r0
    321c:	11 24       	eor	r1, r1
    321e:	2f 93       	push	r18
    3220:	3f 93       	push	r19
    3222:	4f 93       	push	r20
    3224:	5f 93       	push	r21
    3226:	6f 93       	push	r22
    3228:	7f 93       	push	r23
    322a:	8f 93       	push	r24
    322c:	9f 93       	push	r25
    322e:	af 93       	push	r26
    3230:	bf 93       	push	r27
    3232:	ef 93       	push	r30
    3234:	ff 93       	push	r31
	
	static char LeapMonth;
	gMSECOND++;
    3236:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <gMSECOND>
    323a:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <gMSECOND+0x1>
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <gMSECOND+0x1>
    3244:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <gMSECOND>
	
	if(poll == 3){
    3248:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <poll>
    324c:	83 30       	cpi	r24, 0x03	; 3
    324e:	21 f4       	brne	.+8      	; 0x3258 <__vector_11+0x44>
		rotenc_poll();
    3250:	0e 94 a0 18 	call	0x3140	; 0x3140 <rotenc_poll>
		poll = 0;
    3254:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <poll>
	}
	poll++;
    3258:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <poll>
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <poll>
	if(gMSECOND == 1000)
    3262:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <gMSECOND>
    3266:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <gMSECOND+0x1>
    326a:	88 3e       	cpi	r24, 0xE8	; 232
    326c:	93 40       	sbci	r25, 0x03	; 3
    326e:	09 f0       	breq	.+2      	; 0x3272 <__vector_11+0x5e>
    3270:	bb c0       	rjmp	.+374    	; 0x33e8 <__vector_11+0x1d4>
	{
		gSECOND++;
    3272:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <gSECOND>
		gMSECOND = 0;
    327c:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <gMSECOND+0x1>
    3280:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <gMSECOND>
		gSEC_CHANGE = 1;
    3284:	91 e0       	ldi	r25, 0x01	; 1
    3286:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <gSEC_CHANGE>
		if(gPowerSaveTimer <= LCD_TIMEOUT_SEC){
    328a:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <gPowerSaveTimer>
    328e:	9d 33       	cpi	r25, 0x3D	; 61
    3290:	18 f4       	brcc	.+6      	; 0x3298 <__vector_11+0x84>
			gPowerSaveTimer++;
    3292:	9f 5f       	subi	r25, 0xFF	; 255
    3294:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <gPowerSaveTimer>
		}
		if (gSECOND == 60)
    3298:	8c 33       	cpi	r24, 0x3C	; 60
    329a:	09 f0       	breq	.+2      	; 0x329e <__vector_11+0x8a>
    329c:	a5 c0       	rjmp	.+330    	; 0x33e8 <__vector_11+0x1d4>
		{
			gSECOND = 0;
    329e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <gSECOND>
			gMINUTE++;
    32a2:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
		
			if (gMINUTE > 59)
    32a8:	8c 33       	cpi	r24, 0x3C	; 60
    32aa:	18 f4       	brcc	.+6      	; 0x32b2 <__vector_11+0x9e>
			gPowerSaveTimer++;
		}
		if (gSECOND == 60)
		{
			gSECOND = 0;
			gMINUTE++;
    32ac:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <gMINUTE>
    32b0:	9b c0       	rjmp	.+310    	; 0x33e8 <__vector_11+0x1d4>
		
			if (gMINUTE > 59)
			{
				gMINUTE = 0;
    32b2:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <gMINUTE>
				gHOUR++;
    32b6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    32ba:	8f 5f       	subi	r24, 0xFF	; 255
			
				if (gHOUR > 23)
    32bc:	88 31       	cpi	r24, 0x18	; 24
    32be:	18 f4       	brcc	.+6      	; 0x32c6 <__vector_11+0xb2>
			gMINUTE++;
		
			if (gMINUTE > 59)
			{
				gMINUTE = 0;
				gHOUR++;
    32c0:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <gHOUR>
    32c4:	91 c0       	rjmp	.+290    	; 0x33e8 <__vector_11+0x1d4>
			
				if (gHOUR > 23)
				{
				
					gHOUR = 0;
    32c6:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <gHOUR>
					gDAY++;
    32ca:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    32ce:	41 e0       	ldi	r20, 0x01	; 1
    32d0:	48 0f       	add	r20, r24
    32d2:	40 93 86 04 	sts	0x0486, r20	; 0x800486 <gDAY>
					WeekDay++;
    32d6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <WeekDay>
    32da:	8f 5f       	subi	r24, 0xFF	; 255
					
					if(WeekDay > sunday){
    32dc:	87 30       	cpi	r24, 0x07	; 7
    32de:	18 f4       	brcc	.+6      	; 0x32e6 <__vector_11+0xd2>
				if (gHOUR > 23)
				{
				
					gHOUR = 0;
					gDAY++;
					WeekDay++;
    32e0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <WeekDay>
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <__vector_11+0xd6>
					
					if(WeekDay > sunday){
						WeekDay = monday;
    32e6:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <WeekDay>
					}

					// Check for leap year if month == February
					if (gMONTH == 2)
    32ea:	50 91 8a 04 	lds	r21, 0x048A	; 0x80048a <gMONTH>
    32ee:	52 30       	cpi	r21, 0x02	; 2
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <__vector_11+0xe0>
    32f2:	43 c0       	rjmp	.+134    	; 0x337a <__vector_11+0x166>
						if (!(gYEAR & 0x0003))              // if (gYEAR%4 == 0)
    32f4:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <gYEAR>
    32f8:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <gYEAR+0x1>
    32fc:	cf 01       	movw	r24, r30
    32fe:	83 70       	andi	r24, 0x03	; 3
    3300:	99 27       	eor	r25, r25
    3302:	89 2b       	or	r24, r25
    3304:	b9 f5       	brne	.+110    	; 0x3374 <__vector_11+0x160>
							if (gYEAR%100 == 0)
    3306:	9f 01       	movw	r18, r30
    3308:	36 95       	lsr	r19
    330a:	27 95       	ror	r18
    330c:	36 95       	lsr	r19
    330e:	27 95       	ror	r18
    3310:	ab e7       	ldi	r26, 0x7B	; 123
    3312:	b4 e1       	ldi	r27, 0x14	; 20
    3314:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__umulhisi3>
    3318:	96 95       	lsr	r25
    331a:	87 95       	ror	r24
    331c:	64 e6       	ldi	r22, 0x64	; 100
    331e:	68 9f       	mul	r22, r24
    3320:	90 01       	movw	r18, r0
    3322:	69 9f       	mul	r22, r25
    3324:	30 0d       	add	r19, r0
    3326:	11 24       	eor	r1, r1
    3328:	e2 17       	cp	r30, r18
    332a:	f3 07       	cpc	r31, r19
    332c:	f9 f4       	brne	.+62     	; 0x336c <__vector_11+0x158>
								if (gYEAR%400 == 0)
    332e:	9f 01       	movw	r18, r30
    3330:	32 95       	swap	r19
    3332:	22 95       	swap	r18
    3334:	2f 70       	andi	r18, 0x0F	; 15
    3336:	23 27       	eor	r18, r19
    3338:	3f 70       	andi	r19, 0x0F	; 15
    333a:	23 27       	eor	r18, r19
    333c:	ae e3       	ldi	r26, 0x3E	; 62
    333e:	ba e0       	ldi	r27, 0x0A	; 10
    3340:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__umulhisi3>
    3344:	20 e9       	ldi	r18, 0x90	; 144
    3346:	31 e0       	ldi	r19, 0x01	; 1
    3348:	bc 01       	movw	r22, r24
    334a:	62 9f       	mul	r22, r18
    334c:	c0 01       	movw	r24, r0
    334e:	63 9f       	mul	r22, r19
    3350:	90 0d       	add	r25, r0
    3352:	72 9f       	mul	r23, r18
    3354:	90 0d       	add	r25, r0
    3356:	11 24       	eor	r1, r1
    3358:	e8 17       	cp	r30, r24
    335a:	f9 07       	cpc	r31, r25
    335c:	21 f4       	brne	.+8      	; 0x3366 <__vector_11+0x152>
									LeapMonth = 1;
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <LeapMonth.2503>
    3364:	32 c0       	rjmp	.+100    	; 0x33ca <__vector_11+0x1b6>
								else
									LeapMonth = 0;
    3366:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <LeapMonth.2503>
    336a:	2f c0       	rjmp	.+94     	; 0x33ca <__vector_11+0x1b6>
							else
								LeapMonth = 1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <LeapMonth.2503>
    3372:	2b c0       	rjmp	.+86     	; 0x33ca <__vector_11+0x1b6>
						else
							LeapMonth = 0;
    3374:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <LeapMonth.2503>
    3378:	28 c0       	rjmp	.+80     	; 0x33ca <__vector_11+0x1b6>
					else
						LeapMonth = 0;
    337a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <LeapMonth.2503>

					// Now, we can check for month length
					if (gDAY > (MonthLength[gMONTH] + LeapMonth))
    337e:	84 2f       	mov	r24, r20
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	e5 2f       	mov	r30, r21
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	ef 58       	subi	r30, 0x8F	; 143
    3388:	fe 4f       	sbci	r31, 0xFE	; 254
    338a:	20 81       	ld	r18, Z
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	28 17       	cp	r18, r24
    3390:	39 07       	cpc	r19, r25
    3392:	54 f5       	brge	.+84     	; 0x33e8 <__vector_11+0x1d4>
					{
						gDAY = 1;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <gDAY>
						gMONTH++;
    339a:	5f 5f       	subi	r21, 0xFF	; 255

						if (gMONTH > 12)
    339c:	5d 30       	cpi	r21, 0x0D	; 13
    339e:	18 f4       	brcc	.+6      	; 0x33a6 <__vector_11+0x192>

					// Now, we can check for month length
					if (gDAY > (MonthLength[gMONTH] + LeapMonth))
					{
						gDAY = 1;
						gMONTH++;
    33a0:	50 93 8a 04 	sts	0x048A, r21	; 0x80048a <gMONTH>
    33a4:	21 c0       	rjmp	.+66     	; 0x33e8 <__vector_11+0x1d4>

						if (gMONTH > 12)
						{
							gMONTH = 1;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <gMONTH>
							gYEAR++;
    33ac:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    33b0:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <gYEAR+0x1>
    33ba:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <gYEAR>
				}
			}
		}
	}
	
}
    33be:	14 c0       	rjmp	.+40     	; 0x33e8 <__vector_11+0x1d4>
						LeapMonth = 0;

					// Now, we can check for month length
					if (gDAY > (MonthLength[gMONTH] + LeapMonth))
					{
						gDAY = 1;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <gDAY>
						gMONTH++;
    33c6:	5f 5f       	subi	r21, 0xFF	; 255
    33c8:	eb cf       	rjmp	.-42     	; 0x33a0 <__vector_11+0x18c>
							LeapMonth = 0;
					else
						LeapMonth = 0;

					// Now, we can check for month length
					if (gDAY > (MonthLength[gMONTH] + LeapMonth))
    33ca:	84 2f       	mov	r24, r20
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	e5 2f       	mov	r30, r21
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	ef 58       	subi	r30, 0x8F	; 143
    33d4:	fe 4f       	sbci	r31, 0xFE	; 254
    33d6:	40 81       	ld	r20, Z
    33d8:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <LeapMonth.2503>
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	24 0f       	add	r18, r20
    33e0:	31 1d       	adc	r19, r1
    33e2:	28 17       	cp	r18, r24
    33e4:	39 07       	cpc	r19, r25
    33e6:	64 f3       	brlt	.-40     	; 0x33c0 <__vector_11+0x1ac>
				}
			}
		}
	}
	
}
    33e8:	ff 91       	pop	r31
    33ea:	ef 91       	pop	r30
    33ec:	bf 91       	pop	r27
    33ee:	af 91       	pop	r26
    33f0:	9f 91       	pop	r25
    33f2:	8f 91       	pop	r24
    33f4:	7f 91       	pop	r23
    33f6:	6f 91       	pop	r22
    33f8:	5f 91       	pop	r21
    33fa:	4f 91       	pop	r20
    33fc:	3f 91       	pop	r19
    33fe:	2f 91       	pop	r18
    3400:	0f 90       	pop	r0
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	0f 90       	pop	r0
    3406:	1f 90       	pop	r1
    3408:	18 95       	reti

0000340a <show_2digit_number>:
	show_2digit_number(gSECOND, PCD8544_Pixel_Clear);
	
}

void show_2digit_number(char number, PCD8544_Pixel_t color )
{
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	16 2f       	mov	r17, r22
	
	char HH, HL;
	HH = CHAR2BCD2(number);
    3416:	0e 94 5d 04 	call	0x8ba	; 0x8ba <CHAR2BCD2>
    341a:	c8 2f       	mov	r28, r24
	HL = (HH & 0x0F) + '0';
	HH = (HH >> 4) + '0';
    341c:	f8 2e       	mov	r15, r24
    341e:	f6 94       	lsr	r15
    3420:	f6 94       	lsr	r15
    3422:	f6 94       	lsr	r15
    3424:	f6 94       	lsr	r15
	
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR3x5_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR3x5_WIDTH*2, color);
    3426:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <PCD8544_x>
    342a:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    342e:	01 e0       	ldi	r16, 0x01	; 1
    3430:	11 11       	cpse	r17, r1
    3432:	01 c0       	rjmp	.+2      	; 0x3436 <show_2digit_number+0x2c>
    3434:	00 e0       	ldi	r16, 0x00	; 0
    3436:	28 e0       	ldi	r18, 0x08	; 8
    3438:	24 0f       	add	r18, r20
    343a:	66 e0       	ldi	r22, 0x06	; 6
    343c:	68 0f       	add	r22, r24
    343e:	82 50       	subi	r24, 0x02	; 2
    3440:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_GotoXY(PCD8544_x+1, PCD8544_y);
    3444:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    3448:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <PCD8544_y>
    344c:	8f 5f       	subi	r24, 0xFF	; 255
    344e:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>

	PCD8544_Putc(HH, !color, PCD8544_FontSize_3x5);
    3452:	d1 e0       	ldi	r29, 0x01	; 1
    3454:	11 11       	cpse	r17, r1
    3456:	d0 e0       	ldi	r29, 0x00	; 0
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	6d 2f       	mov	r22, r29
    345c:	80 e3       	ldi	r24, 0x30	; 48
    345e:	8f 0d       	add	r24, r15
    3460:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	PCD8544_Putc(HL, !color, PCD8544_FontSize_3x5);
    3464:	8c 2f       	mov	r24, r28
    3466:	8f 70       	andi	r24, 0x0F	; 15
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	6d 2f       	mov	r22, r29
    346c:	80 5d       	subi	r24, 0xD0	; 208
    346e:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	
	
}
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	08 95       	ret

0000347e <show_time>:

	
void show_time()
{
	
	show_2digit_number(gHOUR, PCD8544_Pixel_Clear);
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <gHOUR>
    3484:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
	PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	61 e0       	ldi	r22, 0x01	; 1
    348c:	8a e3       	ldi	r24, 0x3A	; 58
    348e:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	show_2digit_number(gMINUTE, PCD8544_Pixel_Clear);
    3492:	60 e0       	ldi	r22, 0x00	; 0
    3494:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <gMINUTE>
    3498:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
	PCD8544_Putc(':', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	61 e0       	ldi	r22, 0x01	; 1
    34a0:	8a e3       	ldi	r24, 0x3A	; 58
    34a2:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	show_2digit_number(gSECOND, PCD8544_Pixel_Clear);
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <gSECOND>
    34ac:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
    34b0:	08 95       	ret

000034b2 <show_4digit_number>:
	
	
}

void show_4digit_number(uint16_t number, PCD8544_Pixel_t color )
{
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	f6 2e       	mov	r15, r22
	uint16_t numBCD;
	char H1, H2, H3, H4;	//4 nibbles = 4 digits
	numBCD = INT2BCD4(number);
    34be:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <INT2BCD4>
    34c2:	ec 01       	movw	r28, r24
	H4 = (numBCD & 0x0F) + '0';
	H3 = ((numBCD >> 4)  & 0x0F) + '0';
	H2  = ((numBCD >> 8)  & 0x0F) + '0';
	H1  = ((numBCD >> 12) & 0x0F) + '0';
	
	PCD8544_SetArea(PCD8544_y-2, PCD8544_y+PCD8544_CHAR3x5_HEIGHT, PCD8544_x, PCD8544_x + PCD8544_CHAR3x5_WIDTH*4, color);
    34c4:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <PCD8544_x>
    34c8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <PCD8544_y>
    34cc:	01 e0       	ldi	r16, 0x01	; 1
    34ce:	f1 10       	cpse	r15, r1
    34d0:	01 c0       	rjmp	.+2      	; 0x34d4 <show_4digit_number+0x22>
    34d2:	00 e0       	ldi	r16, 0x00	; 0
    34d4:	20 e1       	ldi	r18, 0x10	; 16
    34d6:	24 0f       	add	r18, r20
    34d8:	66 e0       	ldi	r22, 0x06	; 6
    34da:	68 0f       	add	r22, r24
    34dc:	82 50       	subi	r24, 0x02	; 2
    34de:	0e 94 9c 12 	call	0x2538	; 0x2538 <PCD8544_SetArea>
	PCD8544_GotoXY(PCD8544_x+1, PCD8544_y);
    34e2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <PCD8544_x>
    34e6:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <PCD8544_y>
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	0e 94 c9 13 	call	0x2792	; 0x2792 <PCD8544_GotoXY>

	PCD8544_Putc(H1, !color, PCD8544_FontSize_3x5);
    34f0:	11 e0       	ldi	r17, 0x01	; 1
    34f2:	f1 10       	cpse	r15, r1
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	8d 2f       	mov	r24, r29
    34f8:	82 95       	swap	r24
    34fa:	8f 70       	andi	r24, 0x0F	; 15
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	61 2f       	mov	r22, r17
    3500:	80 5d       	subi	r24, 0xD0	; 208
    3502:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	PCD8544_Putc(H2, !color, PCD8544_FontSize_3x5);
    3506:	8d 2f       	mov	r24, r29
    3508:	8f 70       	andi	r24, 0x0F	; 15
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	61 2f       	mov	r22, r17
    350e:	80 5d       	subi	r24, 0xD0	; 208
    3510:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	PCD8544_Putc(H3, !color, PCD8544_FontSize_3x5);
    3514:	ce 01       	movw	r24, r28
    3516:	92 95       	swap	r25
    3518:	82 95       	swap	r24
    351a:	8f 70       	andi	r24, 0x0F	; 15
    351c:	89 27       	eor	r24, r25
    351e:	9f 70       	andi	r25, 0x0F	; 15
    3520:	89 27       	eor	r24, r25
    3522:	8f 70       	andi	r24, 0x0F	; 15
    3524:	41 e0       	ldi	r20, 0x01	; 1
    3526:	61 2f       	mov	r22, r17
    3528:	80 5d       	subi	r24, 0xD0	; 208
    352a:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	PCD8544_Putc(H4, !color, PCD8544_FontSize_3x5);
    352e:	8c 2f       	mov	r24, r28
    3530:	8f 70       	andi	r24, 0x0F	; 15
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	61 2f       	mov	r22, r17
    3536:	80 5d       	subi	r24, 0xD0	; 208
    3538:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
}
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ff 90       	pop	r15
    3546:	08 95       	ret

00003548 <show_date>:
	
void show_date()
{
	show_2digit_number(gDAY, PCD8544_Pixel_Clear);
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <gDAY>
    354e:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
	PCD8544_Putc('.', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	61 e0       	ldi	r22, 0x01	; 1
    3556:	8e e2       	ldi	r24, 0x2E	; 46
    3558:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	show_2digit_number(gMONTH, PCD8544_Pixel_Clear);
    355c:	60 e0       	ldi	r22, 0x00	; 0
    355e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <gMONTH>
    3562:	0e 94 05 1a 	call	0x340a	; 0x340a <show_2digit_number>
	PCD8544_Putc('.', PCD8544_Pixel_Set, PCD8544_FontSize_3x5);
    3566:	41 e0       	ldi	r20, 0x01	; 1
    3568:	61 e0       	ldi	r22, 0x01	; 1
    356a:	8e e2       	ldi	r24, 0x2E	; 46
    356c:	0e 94 ce 13 	call	0x279c	; 0x279c <PCD8544_Putc>
	show_4digit_number(gYEAR, PCD8544_Pixel_Clear);
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <gYEAR>
    3576:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <gYEAR+0x1>
    357a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <show_4digit_number>
    357e:	08 95       	ret

00003580 <__cmpsf2>:
    3580:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__fp_cmp>
    3584:	08 f4       	brcc	.+2      	; 0x3588 <__cmpsf2+0x8>
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	08 95       	ret

0000358a <__divsf3>:
    358a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__divsf3x>
    358e:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__fp_round>
    3592:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__fp_pscB>
    3596:	58 f0       	brcs	.+22     	; 0x35ae <__divsf3+0x24>
    3598:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fp_pscA>
    359c:	40 f0       	brcs	.+16     	; 0x35ae <__divsf3+0x24>
    359e:	29 f4       	brne	.+10     	; 0x35aa <__divsf3+0x20>
    35a0:	5f 3f       	cpi	r21, 0xFF	; 255
    35a2:	29 f0       	breq	.+10     	; 0x35ae <__divsf3+0x24>
    35a4:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__fp_inf>
    35a8:	51 11       	cpse	r21, r1
    35aa:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__fp_szero>
    35ae:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__fp_nan>

000035b2 <__divsf3x>:
    35b2:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__fp_split3>
    35b6:	68 f3       	brcs	.-38     	; 0x3592 <__divsf3+0x8>

000035b8 <__divsf3_pse>:
    35b8:	99 23       	and	r25, r25
    35ba:	b1 f3       	breq	.-20     	; 0x35a8 <__divsf3+0x1e>
    35bc:	55 23       	and	r21, r21
    35be:	91 f3       	breq	.-28     	; 0x35a4 <__divsf3+0x1a>
    35c0:	95 1b       	sub	r25, r21
    35c2:	55 0b       	sbc	r21, r21
    35c4:	bb 27       	eor	r27, r27
    35c6:	aa 27       	eor	r26, r26
    35c8:	62 17       	cp	r22, r18
    35ca:	73 07       	cpc	r23, r19
    35cc:	84 07       	cpc	r24, r20
    35ce:	38 f0       	brcs	.+14     	; 0x35de <__divsf3_pse+0x26>
    35d0:	9f 5f       	subi	r25, 0xFF	; 255
    35d2:	5f 4f       	sbci	r21, 0xFF	; 255
    35d4:	22 0f       	add	r18, r18
    35d6:	33 1f       	adc	r19, r19
    35d8:	44 1f       	adc	r20, r20
    35da:	aa 1f       	adc	r26, r26
    35dc:	a9 f3       	breq	.-22     	; 0x35c8 <__divsf3_pse+0x10>
    35de:	35 d0       	rcall	.+106    	; 0x364a <__divsf3_pse+0x92>
    35e0:	0e 2e       	mov	r0, r30
    35e2:	3a f0       	brmi	.+14     	; 0x35f2 <__divsf3_pse+0x3a>
    35e4:	e0 e8       	ldi	r30, 0x80	; 128
    35e6:	32 d0       	rcall	.+100    	; 0x364c <__divsf3_pse+0x94>
    35e8:	91 50       	subi	r25, 0x01	; 1
    35ea:	50 40       	sbci	r21, 0x00	; 0
    35ec:	e6 95       	lsr	r30
    35ee:	00 1c       	adc	r0, r0
    35f0:	ca f7       	brpl	.-14     	; 0x35e4 <__divsf3_pse+0x2c>
    35f2:	2b d0       	rcall	.+86     	; 0x364a <__divsf3_pse+0x92>
    35f4:	fe 2f       	mov	r31, r30
    35f6:	29 d0       	rcall	.+82     	; 0x364a <__divsf3_pse+0x92>
    35f8:	66 0f       	add	r22, r22
    35fa:	77 1f       	adc	r23, r23
    35fc:	88 1f       	adc	r24, r24
    35fe:	bb 1f       	adc	r27, r27
    3600:	26 17       	cp	r18, r22
    3602:	37 07       	cpc	r19, r23
    3604:	48 07       	cpc	r20, r24
    3606:	ab 07       	cpc	r26, r27
    3608:	b0 e8       	ldi	r27, 0x80	; 128
    360a:	09 f0       	breq	.+2      	; 0x360e <__divsf3_pse+0x56>
    360c:	bb 0b       	sbc	r27, r27
    360e:	80 2d       	mov	r24, r0
    3610:	bf 01       	movw	r22, r30
    3612:	ff 27       	eor	r31, r31
    3614:	93 58       	subi	r25, 0x83	; 131
    3616:	5f 4f       	sbci	r21, 0xFF	; 255
    3618:	3a f0       	brmi	.+14     	; 0x3628 <__divsf3_pse+0x70>
    361a:	9e 3f       	cpi	r25, 0xFE	; 254
    361c:	51 05       	cpc	r21, r1
    361e:	78 f0       	brcs	.+30     	; 0x363e <__divsf3_pse+0x86>
    3620:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__fp_inf>
    3624:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__fp_szero>
    3628:	5f 3f       	cpi	r21, 0xFF	; 255
    362a:	e4 f3       	brlt	.-8      	; 0x3624 <__divsf3_pse+0x6c>
    362c:	98 3e       	cpi	r25, 0xE8	; 232
    362e:	d4 f3       	brlt	.-12     	; 0x3624 <__divsf3_pse+0x6c>
    3630:	86 95       	lsr	r24
    3632:	77 95       	ror	r23
    3634:	67 95       	ror	r22
    3636:	b7 95       	ror	r27
    3638:	f7 95       	ror	r31
    363a:	9f 5f       	subi	r25, 0xFF	; 255
    363c:	c9 f7       	brne	.-14     	; 0x3630 <__divsf3_pse+0x78>
    363e:	88 0f       	add	r24, r24
    3640:	91 1d       	adc	r25, r1
    3642:	96 95       	lsr	r25
    3644:	87 95       	ror	r24
    3646:	97 f9       	bld	r25, 7
    3648:	08 95       	ret
    364a:	e1 e0       	ldi	r30, 0x01	; 1
    364c:	66 0f       	add	r22, r22
    364e:	77 1f       	adc	r23, r23
    3650:	88 1f       	adc	r24, r24
    3652:	bb 1f       	adc	r27, r27
    3654:	62 17       	cp	r22, r18
    3656:	73 07       	cpc	r23, r19
    3658:	84 07       	cpc	r24, r20
    365a:	ba 07       	cpc	r27, r26
    365c:	20 f0       	brcs	.+8      	; 0x3666 <__divsf3_pse+0xae>
    365e:	62 1b       	sub	r22, r18
    3660:	73 0b       	sbc	r23, r19
    3662:	84 0b       	sbc	r24, r20
    3664:	ba 0b       	sbc	r27, r26
    3666:	ee 1f       	adc	r30, r30
    3668:	88 f7       	brcc	.-30     	; 0x364c <__divsf3_pse+0x94>
    366a:	e0 95       	com	r30
    366c:	08 95       	ret

0000366e <__fixsfsi>:
    366e:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fixunssfsi>
    3672:	68 94       	set
    3674:	b1 11       	cpse	r27, r1
    3676:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__fp_szero>
    367a:	08 95       	ret

0000367c <__fixunssfsi>:
    367c:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__fp_splitA>
    3680:	88 f0       	brcs	.+34     	; 0x36a4 <__fixunssfsi+0x28>
    3682:	9f 57       	subi	r25, 0x7F	; 127
    3684:	98 f0       	brcs	.+38     	; 0x36ac <__fixunssfsi+0x30>
    3686:	b9 2f       	mov	r27, r25
    3688:	99 27       	eor	r25, r25
    368a:	b7 51       	subi	r27, 0x17	; 23
    368c:	b0 f0       	brcs	.+44     	; 0x36ba <__fixunssfsi+0x3e>
    368e:	e1 f0       	breq	.+56     	; 0x36c8 <__fixunssfsi+0x4c>
    3690:	66 0f       	add	r22, r22
    3692:	77 1f       	adc	r23, r23
    3694:	88 1f       	adc	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	1a f0       	brmi	.+6      	; 0x36a0 <__fixunssfsi+0x24>
    369a:	ba 95       	dec	r27
    369c:	c9 f7       	brne	.-14     	; 0x3690 <__fixunssfsi+0x14>
    369e:	14 c0       	rjmp	.+40     	; 0x36c8 <__fixunssfsi+0x4c>
    36a0:	b1 30       	cpi	r27, 0x01	; 1
    36a2:	91 f0       	breq	.+36     	; 0x36c8 <__fixunssfsi+0x4c>
    36a4:	0e 94 18 1c 	call	0x3830	; 0x3830 <__fp_zero>
    36a8:	b1 e0       	ldi	r27, 0x01	; 1
    36aa:	08 95       	ret
    36ac:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__fp_zero>
    36b0:	67 2f       	mov	r22, r23
    36b2:	78 2f       	mov	r23, r24
    36b4:	88 27       	eor	r24, r24
    36b6:	b8 5f       	subi	r27, 0xF8	; 248
    36b8:	39 f0       	breq	.+14     	; 0x36c8 <__fixunssfsi+0x4c>
    36ba:	b9 3f       	cpi	r27, 0xF9	; 249
    36bc:	cc f3       	brlt	.-14     	; 0x36b0 <__fixunssfsi+0x34>
    36be:	86 95       	lsr	r24
    36c0:	77 95       	ror	r23
    36c2:	67 95       	ror	r22
    36c4:	b3 95       	inc	r27
    36c6:	d9 f7       	brne	.-10     	; 0x36be <__fixunssfsi+0x42>
    36c8:	3e f4       	brtc	.+14     	; 0x36d8 <__fixunssfsi+0x5c>
    36ca:	90 95       	com	r25
    36cc:	80 95       	com	r24
    36ce:	70 95       	com	r23
    36d0:	61 95       	neg	r22
    36d2:	7f 4f       	sbci	r23, 0xFF	; 255
    36d4:	8f 4f       	sbci	r24, 0xFF	; 255
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	08 95       	ret

000036da <__floatunsisf>:
    36da:	e8 94       	clt
    36dc:	09 c0       	rjmp	.+18     	; 0x36f0 <__floatsisf+0x12>

000036de <__floatsisf>:
    36de:	97 fb       	bst	r25, 7
    36e0:	3e f4       	brtc	.+14     	; 0x36f0 <__floatsisf+0x12>
    36e2:	90 95       	com	r25
    36e4:	80 95       	com	r24
    36e6:	70 95       	com	r23
    36e8:	61 95       	neg	r22
    36ea:	7f 4f       	sbci	r23, 0xFF	; 255
    36ec:	8f 4f       	sbci	r24, 0xFF	; 255
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	99 23       	and	r25, r25
    36f2:	a9 f0       	breq	.+42     	; 0x371e <__floatsisf+0x40>
    36f4:	f9 2f       	mov	r31, r25
    36f6:	96 e9       	ldi	r25, 0x96	; 150
    36f8:	bb 27       	eor	r27, r27
    36fa:	93 95       	inc	r25
    36fc:	f6 95       	lsr	r31
    36fe:	87 95       	ror	r24
    3700:	77 95       	ror	r23
    3702:	67 95       	ror	r22
    3704:	b7 95       	ror	r27
    3706:	f1 11       	cpse	r31, r1
    3708:	f8 cf       	rjmp	.-16     	; 0x36fa <__floatsisf+0x1c>
    370a:	fa f4       	brpl	.+62     	; 0x374a <__floatsisf+0x6c>
    370c:	bb 0f       	add	r27, r27
    370e:	11 f4       	brne	.+4      	; 0x3714 <__floatsisf+0x36>
    3710:	60 ff       	sbrs	r22, 0
    3712:	1b c0       	rjmp	.+54     	; 0x374a <__floatsisf+0x6c>
    3714:	6f 5f       	subi	r22, 0xFF	; 255
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	8f 4f       	sbci	r24, 0xFF	; 255
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	16 c0       	rjmp	.+44     	; 0x374a <__floatsisf+0x6c>
    371e:	88 23       	and	r24, r24
    3720:	11 f0       	breq	.+4      	; 0x3726 <__floatsisf+0x48>
    3722:	96 e9       	ldi	r25, 0x96	; 150
    3724:	11 c0       	rjmp	.+34     	; 0x3748 <__floatsisf+0x6a>
    3726:	77 23       	and	r23, r23
    3728:	21 f0       	breq	.+8      	; 0x3732 <__floatsisf+0x54>
    372a:	9e e8       	ldi	r25, 0x8E	; 142
    372c:	87 2f       	mov	r24, r23
    372e:	76 2f       	mov	r23, r22
    3730:	05 c0       	rjmp	.+10     	; 0x373c <__floatsisf+0x5e>
    3732:	66 23       	and	r22, r22
    3734:	71 f0       	breq	.+28     	; 0x3752 <__floatsisf+0x74>
    3736:	96 e8       	ldi	r25, 0x86	; 134
    3738:	86 2f       	mov	r24, r22
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	2a f0       	brmi	.+10     	; 0x374a <__floatsisf+0x6c>
    3740:	9a 95       	dec	r25
    3742:	66 0f       	add	r22, r22
    3744:	77 1f       	adc	r23, r23
    3746:	88 1f       	adc	r24, r24
    3748:	da f7       	brpl	.-10     	; 0x3740 <__floatsisf+0x62>
    374a:	88 0f       	add	r24, r24
    374c:	96 95       	lsr	r25
    374e:	87 95       	ror	r24
    3750:	97 f9       	bld	r25, 7
    3752:	08 95       	ret

00003754 <__fp_cmp>:
    3754:	99 0f       	add	r25, r25
    3756:	00 08       	sbc	r0, r0
    3758:	55 0f       	add	r21, r21
    375a:	aa 0b       	sbc	r26, r26
    375c:	e0 e8       	ldi	r30, 0x80	; 128
    375e:	fe ef       	ldi	r31, 0xFE	; 254
    3760:	16 16       	cp	r1, r22
    3762:	17 06       	cpc	r1, r23
    3764:	e8 07       	cpc	r30, r24
    3766:	f9 07       	cpc	r31, r25
    3768:	c0 f0       	brcs	.+48     	; 0x379a <__fp_cmp+0x46>
    376a:	12 16       	cp	r1, r18
    376c:	13 06       	cpc	r1, r19
    376e:	e4 07       	cpc	r30, r20
    3770:	f5 07       	cpc	r31, r21
    3772:	98 f0       	brcs	.+38     	; 0x379a <__fp_cmp+0x46>
    3774:	62 1b       	sub	r22, r18
    3776:	73 0b       	sbc	r23, r19
    3778:	84 0b       	sbc	r24, r20
    377a:	95 0b       	sbc	r25, r21
    377c:	39 f4       	brne	.+14     	; 0x378c <__fp_cmp+0x38>
    377e:	0a 26       	eor	r0, r26
    3780:	61 f0       	breq	.+24     	; 0x379a <__fp_cmp+0x46>
    3782:	23 2b       	or	r18, r19
    3784:	24 2b       	or	r18, r20
    3786:	25 2b       	or	r18, r21
    3788:	21 f4       	brne	.+8      	; 0x3792 <__fp_cmp+0x3e>
    378a:	08 95       	ret
    378c:	0a 26       	eor	r0, r26
    378e:	09 f4       	brne	.+2      	; 0x3792 <__fp_cmp+0x3e>
    3790:	a1 40       	sbci	r26, 0x01	; 1
    3792:	a6 95       	lsr	r26
    3794:	8f ef       	ldi	r24, 0xFF	; 255
    3796:	81 1d       	adc	r24, r1
    3798:	81 1d       	adc	r24, r1
    379a:	08 95       	ret

0000379c <__fp_inf>:
    379c:	97 f9       	bld	r25, 7
    379e:	9f 67       	ori	r25, 0x7F	; 127
    37a0:	80 e8       	ldi	r24, 0x80	; 128
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	08 95       	ret

000037a8 <__fp_nan>:
    37a8:	9f ef       	ldi	r25, 0xFF	; 255
    37aa:	80 ec       	ldi	r24, 0xC0	; 192
    37ac:	08 95       	ret

000037ae <__fp_pscA>:
    37ae:	00 24       	eor	r0, r0
    37b0:	0a 94       	dec	r0
    37b2:	16 16       	cp	r1, r22
    37b4:	17 06       	cpc	r1, r23
    37b6:	18 06       	cpc	r1, r24
    37b8:	09 06       	cpc	r0, r25
    37ba:	08 95       	ret

000037bc <__fp_pscB>:
    37bc:	00 24       	eor	r0, r0
    37be:	0a 94       	dec	r0
    37c0:	12 16       	cp	r1, r18
    37c2:	13 06       	cpc	r1, r19
    37c4:	14 06       	cpc	r1, r20
    37c6:	05 06       	cpc	r0, r21
    37c8:	08 95       	ret

000037ca <__fp_round>:
    37ca:	09 2e       	mov	r0, r25
    37cc:	03 94       	inc	r0
    37ce:	00 0c       	add	r0, r0
    37d0:	11 f4       	brne	.+4      	; 0x37d6 <__fp_round+0xc>
    37d2:	88 23       	and	r24, r24
    37d4:	52 f0       	brmi	.+20     	; 0x37ea <__fp_round+0x20>
    37d6:	bb 0f       	add	r27, r27
    37d8:	40 f4       	brcc	.+16     	; 0x37ea <__fp_round+0x20>
    37da:	bf 2b       	or	r27, r31
    37dc:	11 f4       	brne	.+4      	; 0x37e2 <__fp_round+0x18>
    37de:	60 ff       	sbrs	r22, 0
    37e0:	04 c0       	rjmp	.+8      	; 0x37ea <__fp_round+0x20>
    37e2:	6f 5f       	subi	r22, 0xFF	; 255
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	8f 4f       	sbci	r24, 0xFF	; 255
    37e8:	9f 4f       	sbci	r25, 0xFF	; 255
    37ea:	08 95       	ret

000037ec <__fp_split3>:
    37ec:	57 fd       	sbrc	r21, 7
    37ee:	90 58       	subi	r25, 0x80	; 128
    37f0:	44 0f       	add	r20, r20
    37f2:	55 1f       	adc	r21, r21
    37f4:	59 f0       	breq	.+22     	; 0x380c <__fp_splitA+0x10>
    37f6:	5f 3f       	cpi	r21, 0xFF	; 255
    37f8:	71 f0       	breq	.+28     	; 0x3816 <__fp_splitA+0x1a>
    37fa:	47 95       	ror	r20

000037fc <__fp_splitA>:
    37fc:	88 0f       	add	r24, r24
    37fe:	97 fb       	bst	r25, 7
    3800:	99 1f       	adc	r25, r25
    3802:	61 f0       	breq	.+24     	; 0x381c <__fp_splitA+0x20>
    3804:	9f 3f       	cpi	r25, 0xFF	; 255
    3806:	79 f0       	breq	.+30     	; 0x3826 <__fp_splitA+0x2a>
    3808:	87 95       	ror	r24
    380a:	08 95       	ret
    380c:	12 16       	cp	r1, r18
    380e:	13 06       	cpc	r1, r19
    3810:	14 06       	cpc	r1, r20
    3812:	55 1f       	adc	r21, r21
    3814:	f2 cf       	rjmp	.-28     	; 0x37fa <__fp_split3+0xe>
    3816:	46 95       	lsr	r20
    3818:	f1 df       	rcall	.-30     	; 0x37fc <__fp_splitA>
    381a:	08 c0       	rjmp	.+16     	; 0x382c <__fp_splitA+0x30>
    381c:	16 16       	cp	r1, r22
    381e:	17 06       	cpc	r1, r23
    3820:	18 06       	cpc	r1, r24
    3822:	99 1f       	adc	r25, r25
    3824:	f1 cf       	rjmp	.-30     	; 0x3808 <__fp_splitA+0xc>
    3826:	86 95       	lsr	r24
    3828:	71 05       	cpc	r23, r1
    382a:	61 05       	cpc	r22, r1
    382c:	08 94       	sec
    382e:	08 95       	ret

00003830 <__fp_zero>:
    3830:	e8 94       	clt

00003832 <__fp_szero>:
    3832:	bb 27       	eor	r27, r27
    3834:	66 27       	eor	r22, r22
    3836:	77 27       	eor	r23, r23
    3838:	cb 01       	movw	r24, r22
    383a:	97 f9       	bld	r25, 7
    383c:	08 95       	ret

0000383e <__mulsf3>:
    383e:	0e 94 32 1c 	call	0x3864	; 0x3864 <__mulsf3x>
    3842:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__fp_round>
    3846:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fp_pscA>
    384a:	38 f0       	brcs	.+14     	; 0x385a <__mulsf3+0x1c>
    384c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__fp_pscB>
    3850:	20 f0       	brcs	.+8      	; 0x385a <__mulsf3+0x1c>
    3852:	95 23       	and	r25, r21
    3854:	11 f0       	breq	.+4      	; 0x385a <__mulsf3+0x1c>
    3856:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__fp_inf>
    385a:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__fp_nan>
    385e:	11 24       	eor	r1, r1
    3860:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__fp_szero>

00003864 <__mulsf3x>:
    3864:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__fp_split3>
    3868:	70 f3       	brcs	.-36     	; 0x3846 <__mulsf3+0x8>

0000386a <__mulsf3_pse>:
    386a:	95 9f       	mul	r25, r21
    386c:	c1 f3       	breq	.-16     	; 0x385e <__mulsf3+0x20>
    386e:	95 0f       	add	r25, r21
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	55 1f       	adc	r21, r21
    3874:	62 9f       	mul	r22, r18
    3876:	f0 01       	movw	r30, r0
    3878:	72 9f       	mul	r23, r18
    387a:	bb 27       	eor	r27, r27
    387c:	f0 0d       	add	r31, r0
    387e:	b1 1d       	adc	r27, r1
    3880:	63 9f       	mul	r22, r19
    3882:	aa 27       	eor	r26, r26
    3884:	f0 0d       	add	r31, r0
    3886:	b1 1d       	adc	r27, r1
    3888:	aa 1f       	adc	r26, r26
    388a:	64 9f       	mul	r22, r20
    388c:	66 27       	eor	r22, r22
    388e:	b0 0d       	add	r27, r0
    3890:	a1 1d       	adc	r26, r1
    3892:	66 1f       	adc	r22, r22
    3894:	82 9f       	mul	r24, r18
    3896:	22 27       	eor	r18, r18
    3898:	b0 0d       	add	r27, r0
    389a:	a1 1d       	adc	r26, r1
    389c:	62 1f       	adc	r22, r18
    389e:	73 9f       	mul	r23, r19
    38a0:	b0 0d       	add	r27, r0
    38a2:	a1 1d       	adc	r26, r1
    38a4:	62 1f       	adc	r22, r18
    38a6:	83 9f       	mul	r24, r19
    38a8:	a0 0d       	add	r26, r0
    38aa:	61 1d       	adc	r22, r1
    38ac:	22 1f       	adc	r18, r18
    38ae:	74 9f       	mul	r23, r20
    38b0:	33 27       	eor	r19, r19
    38b2:	a0 0d       	add	r26, r0
    38b4:	61 1d       	adc	r22, r1
    38b6:	23 1f       	adc	r18, r19
    38b8:	84 9f       	mul	r24, r20
    38ba:	60 0d       	add	r22, r0
    38bc:	21 1d       	adc	r18, r1
    38be:	82 2f       	mov	r24, r18
    38c0:	76 2f       	mov	r23, r22
    38c2:	6a 2f       	mov	r22, r26
    38c4:	11 24       	eor	r1, r1
    38c6:	9f 57       	subi	r25, 0x7F	; 127
    38c8:	50 40       	sbci	r21, 0x00	; 0
    38ca:	9a f0       	brmi	.+38     	; 0x38f2 <__mulsf3_pse+0x88>
    38cc:	f1 f0       	breq	.+60     	; 0x390a <__mulsf3_pse+0xa0>
    38ce:	88 23       	and	r24, r24
    38d0:	4a f0       	brmi	.+18     	; 0x38e4 <__mulsf3_pse+0x7a>
    38d2:	ee 0f       	add	r30, r30
    38d4:	ff 1f       	adc	r31, r31
    38d6:	bb 1f       	adc	r27, r27
    38d8:	66 1f       	adc	r22, r22
    38da:	77 1f       	adc	r23, r23
    38dc:	88 1f       	adc	r24, r24
    38de:	91 50       	subi	r25, 0x01	; 1
    38e0:	50 40       	sbci	r21, 0x00	; 0
    38e2:	a9 f7       	brne	.-22     	; 0x38ce <__mulsf3_pse+0x64>
    38e4:	9e 3f       	cpi	r25, 0xFE	; 254
    38e6:	51 05       	cpc	r21, r1
    38e8:	80 f0       	brcs	.+32     	; 0x390a <__mulsf3_pse+0xa0>
    38ea:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__fp_inf>
    38ee:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__fp_szero>
    38f2:	5f 3f       	cpi	r21, 0xFF	; 255
    38f4:	e4 f3       	brlt	.-8      	; 0x38ee <__mulsf3_pse+0x84>
    38f6:	98 3e       	cpi	r25, 0xE8	; 232
    38f8:	d4 f3       	brlt	.-12     	; 0x38ee <__mulsf3_pse+0x84>
    38fa:	86 95       	lsr	r24
    38fc:	77 95       	ror	r23
    38fe:	67 95       	ror	r22
    3900:	b7 95       	ror	r27
    3902:	f7 95       	ror	r31
    3904:	e7 95       	ror	r30
    3906:	9f 5f       	subi	r25, 0xFF	; 255
    3908:	c1 f7       	brne	.-16     	; 0x38fa <__mulsf3_pse+0x90>
    390a:	fe 2b       	or	r31, r30
    390c:	88 0f       	add	r24, r24
    390e:	91 1d       	adc	r25, r1
    3910:	96 95       	lsr	r25
    3912:	87 95       	ror	r24
    3914:	97 f9       	bld	r25, 7
    3916:	08 95       	ret

00003918 <__divmodqi4>:
    3918:	87 fb       	bst	r24, 7
    391a:	08 2e       	mov	r0, r24
    391c:	06 26       	eor	r0, r22
    391e:	87 fd       	sbrc	r24, 7
    3920:	81 95       	neg	r24
    3922:	67 fd       	sbrc	r22, 7
    3924:	61 95       	neg	r22
    3926:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodqi4>
    392a:	0e f4       	brtc	.+2      	; 0x392e <__divmodqi4_1>
    392c:	91 95       	neg	r25

0000392e <__divmodqi4_1>:
    392e:	07 fc       	sbrc	r0, 7
    3930:	81 95       	neg	r24

00003932 <__divmodqi4_exit>:
    3932:	08 95       	ret

00003934 <__divmodhi4>:
    3934:	97 fb       	bst	r25, 7
    3936:	07 2e       	mov	r0, r23
    3938:	16 f4       	brtc	.+4      	; 0x393e <__divmodhi4+0xa>
    393a:	00 94       	com	r0
    393c:	07 d0       	rcall	.+14     	; 0x394c <__divmodhi4_neg1>
    393e:	77 fd       	sbrc	r23, 7
    3940:	09 d0       	rcall	.+18     	; 0x3954 <__divmodhi4_neg2>
    3942:	0e 94 cf 1c 	call	0x399e	; 0x399e <__udivmodhi4>
    3946:	07 fc       	sbrc	r0, 7
    3948:	05 d0       	rcall	.+10     	; 0x3954 <__divmodhi4_neg2>
    394a:	3e f4       	brtc	.+14     	; 0x395a <__divmodhi4_exit>

0000394c <__divmodhi4_neg1>:
    394c:	90 95       	com	r25
    394e:	81 95       	neg	r24
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	08 95       	ret

00003954 <__divmodhi4_neg2>:
    3954:	70 95       	com	r23
    3956:	61 95       	neg	r22
    3958:	7f 4f       	sbci	r23, 0xFF	; 255

0000395a <__divmodhi4_exit>:
    395a:	08 95       	ret

0000395c <__tablejump2__>:
    395c:	ee 0f       	add	r30, r30
    395e:	ff 1f       	adc	r31, r31
    3960:	05 90       	lpm	r0, Z+
    3962:	f4 91       	lpm	r31, Z
    3964:	e0 2d       	mov	r30, r0
    3966:	09 94       	ijmp

00003968 <__umulhisi3>:
    3968:	a2 9f       	mul	r26, r18
    396a:	b0 01       	movw	r22, r0
    396c:	b3 9f       	mul	r27, r19
    396e:	c0 01       	movw	r24, r0
    3970:	a3 9f       	mul	r26, r19
    3972:	70 0d       	add	r23, r0
    3974:	81 1d       	adc	r24, r1
    3976:	11 24       	eor	r1, r1
    3978:	91 1d       	adc	r25, r1
    397a:	b2 9f       	mul	r27, r18
    397c:	70 0d       	add	r23, r0
    397e:	81 1d       	adc	r24, r1
    3980:	11 24       	eor	r1, r1
    3982:	91 1d       	adc	r25, r1
    3984:	08 95       	ret

00003986 <__udivmodqi4>:
    3986:	99 1b       	sub	r25, r25
    3988:	79 e0       	ldi	r23, 0x09	; 9
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <__udivmodqi4_ep>

0000398c <__udivmodqi4_loop>:
    398c:	99 1f       	adc	r25, r25
    398e:	96 17       	cp	r25, r22
    3990:	08 f0       	brcs	.+2      	; 0x3994 <__udivmodqi4_ep>
    3992:	96 1b       	sub	r25, r22

00003994 <__udivmodqi4_ep>:
    3994:	88 1f       	adc	r24, r24
    3996:	7a 95       	dec	r23
    3998:	c9 f7       	brne	.-14     	; 0x398c <__udivmodqi4_loop>
    399a:	80 95       	com	r24
    399c:	08 95       	ret

0000399e <__udivmodhi4>:
    399e:	aa 1b       	sub	r26, r26
    39a0:	bb 1b       	sub	r27, r27
    39a2:	51 e1       	ldi	r21, 0x11	; 17
    39a4:	07 c0       	rjmp	.+14     	; 0x39b4 <__udivmodhi4_ep>

000039a6 <__udivmodhi4_loop>:
    39a6:	aa 1f       	adc	r26, r26
    39a8:	bb 1f       	adc	r27, r27
    39aa:	a6 17       	cp	r26, r22
    39ac:	b7 07       	cpc	r27, r23
    39ae:	10 f0       	brcs	.+4      	; 0x39b4 <__udivmodhi4_ep>
    39b0:	a6 1b       	sub	r26, r22
    39b2:	b7 0b       	sbc	r27, r23

000039b4 <__udivmodhi4_ep>:
    39b4:	88 1f       	adc	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	5a 95       	dec	r21
    39ba:	a9 f7       	brne	.-22     	; 0x39a6 <__udivmodhi4_loop>
    39bc:	80 95       	com	r24
    39be:	90 95       	com	r25
    39c0:	bc 01       	movw	r22, r24
    39c2:	cd 01       	movw	r24, r26
    39c4:	08 95       	ret

000039c6 <__strlen_P>:
    39c6:	fc 01       	movw	r30, r24
    39c8:	05 90       	lpm	r0, Z+
    39ca:	00 20       	and	r0, r0
    39cc:	e9 f7       	brne	.-6      	; 0x39c8 <__strlen_P+0x2>
    39ce:	80 95       	com	r24
    39d0:	90 95       	com	r25
    39d2:	8e 0f       	add	r24, r30
    39d4:	9f 1f       	adc	r25, r31
    39d6:	08 95       	ret

000039d8 <eeprom_read_byte>:
    39d8:	f9 99       	sbic	0x1f, 1	; 31
    39da:	fe cf       	rjmp	.-4      	; 0x39d8 <eeprom_read_byte>
    39dc:	92 bd       	out	0x22, r25	; 34
    39de:	81 bd       	out	0x21, r24	; 33
    39e0:	f8 9a       	sbi	0x1f, 0	; 31
    39e2:	99 27       	eor	r25, r25
    39e4:	80 b5       	in	r24, 0x20	; 32
    39e6:	08 95       	ret

000039e8 <eeprom_update_byte>:
    39e8:	26 2f       	mov	r18, r22

000039ea <eeprom_update_r18>:
    39ea:	f9 99       	sbic	0x1f, 1	; 31
    39ec:	fe cf       	rjmp	.-4      	; 0x39ea <eeprom_update_r18>
    39ee:	92 bd       	out	0x22, r25	; 34
    39f0:	81 bd       	out	0x21, r24	; 33
    39f2:	f8 9a       	sbi	0x1f, 0	; 31
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	00 b4       	in	r0, 0x20	; 32
    39f8:	02 16       	cp	r0, r18
    39fa:	39 f0       	breq	.+14     	; 0x3a0a <eeprom_update_r18+0x20>
    39fc:	1f ba       	out	0x1f, r1	; 31
    39fe:	20 bd       	out	0x20, r18	; 32
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	fa 9a       	sbi	0x1f, 2	; 31
    3a06:	f9 9a       	sbi	0x1f, 1	; 31
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	08 95       	ret

00003a0c <eeprom_write_byte>:
    3a0c:	26 2f       	mov	r18, r22

00003a0e <eeprom_write_r18>:
    3a0e:	f9 99       	sbic	0x1f, 1	; 31
    3a10:	fe cf       	rjmp	.-4      	; 0x3a0e <eeprom_write_r18>
    3a12:	1f ba       	out	0x1f, r1	; 31
    3a14:	92 bd       	out	0x22, r25	; 34
    3a16:	81 bd       	out	0x21, r24	; 33
    3a18:	20 bd       	out	0x20, r18	; 32
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	fa 9a       	sbi	0x1f, 2	; 31
    3a20:	f9 9a       	sbi	0x1f, 1	; 31
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	01 96       	adiw	r24, 0x01	; 1
    3a26:	08 95       	ret

00003a28 <_exit>:
    3a28:	f8 94       	cli

00003a2a <__stop_program>:
    3a2a:	ff cf       	rjmp	.-2      	; 0x3a2a <__stop_program>
